{"version":3,"file":"static/chunks/5129.0f6d1bda4655314d.js","mappings":"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","sources":["webpack://_N_E/./components/InfoLayout.tsx","webpack://_N_E/./components/chains/aptosStandard/dapps.config.ts","webpack://_N_E/./components/chains/aptosStandard/params.ts","webpack://_N_E/./lib/uint8array.ts","webpack://_N_E/./components/chains/aptosStandard/utils.ts","webpack://_N_E/./components/chains/aptosStandard/example.tsx","webpack://_N_E/./components/connect/ConnectButton.tsx","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/bn.js/lib|buffer","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/brorand|crypto","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/elliptic/node_modules/bn.js/lib|buffer","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/readable-stream/lib/internal/streams|util","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/readable-stream/lib|util","webpack://_N_E/<anon>"],"sourcesContent":["import { Card, CardContent, CardHeader } from './ui/card';\n\nexport type InfoLayoutProps = {\n  title?: string;\n  children?: React.ReactNode;\n};\n\nexport default function InfoLayout({ title, children }: InfoLayoutProps) {\n  return (\n    <Card>\n      {title && <CardHeader className=\"font-medium\">{title}</CardHeader>}\n      <CardContent className=\"flex flex-col flex-wrap gap-3 break-all\">{children}</CardContent>\n    </Card>\n  );\n}\n","export const dapps = [\n  {\n    name: 'SEAM',\n    url: 'https://app.seam.money/',\n  },\n  {\n    name: 'Aptos Names',\n    url: 'https://www.aptosnames.com/',\n  },\n  {\n    name: 'Liquid Swap',\n    url: 'https://liquidswap.com/#/',\n  },\n];\n","import { AccountAddress, U256, U8 } from '@aptos-labs/ts-sdk';\nimport { isEmpty } from 'lodash';\n\nexport default {\n  signMessage: [\n    {\n      id: 'signMessage',\n      name: 'signMessage',\n      value: JSON.stringify({\n        address: false,\n        application: true,\n        chainId: true,\n        message: 'This is a sample message',\n        nonce: 12345,\n      }),\n    },\n  ],\n  signTransaction: (address: string) => [\n    {\n      id: 'signTransaction-native',\n      name: 'transfer native coin',\n      value: JSON.stringify({\n        data: {\n          type: 'entry_function_payload',\n          function: '0x1::coin::transfer',\n          typeArguments: ['0x1::aptos_coin::AptosCoin'],\n          functionArguments: [address, '100000'],\n        },\n      }),\n    },\n    {\n      id: 'signTransaction-native-options',\n      name: 'transfer native coin - options',\n      value: JSON.stringify({\n        data: {\n          type: 'entry_function_payload',\n          function: '0x1::coin::transfer',\n          typeArguments: ['0x1::aptos_coin::AptosCoin'],\n          functionArguments: [address, '100000'],\n        },\n        options: {\n          maxGasAmount: 1000000,\n          gasUnitPrice: 1000000,\n        },\n      }),\n    },\n    {\n      id: 'signTransaction-usdc-legacy',\n      name: 'transfer usdc coin (legacy)',\n      value: JSON.stringify({\n        data: {\n          type: 'entry_function_payload',\n          function: '0x1::coin::transfer',\n          typeArguments: [\n            '0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDC',\n          ],\n          functionArguments: [address, 10000],\n        },\n      }),\n    },\n    {\n      id: 'signTransaction-usdc-fa',\n      name: 'transfer usdc coin',\n      value: JSON.stringify({\n        data: {\n          type: 'entry_function_payload',\n          function: '0x1::primary_fungible_store::transfer',\n          typeArguments: ['0x1::fungible_asset::Metadata'],\n          functionArguments: [\n            '0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b',\n            address,\n            10000,\n          ],\n        },\n      }),\n    },\n  ],\n  signAndSubmitTransaction: (address: string) => [\n    {\n      id: 'transaction-native-pure',\n      name: 'transfer native coin pure',\n      value: JSON.stringify({\n        sender: address,\n        data: {\n          function: '0x1::coin::transfer',\n          typeArguments: ['0x1::aptos_coin::AptosCoin'],\n          functionArguments: [address, '100000'],\n        },\n      }),\n    },\n    {\n      id: 'signTransaction-native-pure-options',\n      name: 'transfer native coin pure - options',\n      value: JSON.stringify({\n        sender: address,\n        data: {\n          function: '0x1::coin::transfer',\n          typeArguments: ['0x1::aptos_coin::AptosCoin'],\n          functionArguments: [address, '100000'],\n        },\n        options: {\n          maxGasAmount: 1000000,\n          gasUnitPrice: 1000000,\n        },\n      }),\n    },\n    // {\n    //   id: 'signTransaction-native',\n    //   name: 'transfer native coin',\n    //   value: JSON.stringify({\n    //     sender: address,\n    //     data: {\n    //       function: '0x1::coin::transfer',\n    //       typeArguments: ['0x1::aptos_coin::AptosCoin'],\n    //       functionArguments: [\n    //         address && !isEmpty(address) ? AccountAddress.fromString(address) : undefined,\n    //         new U256(100000),\n    //       ],\n    //     },\n    //   }),\n    // },\n    // {\n    //   id: 'signTransaction-usdc-legacy',\n    //   name: 'transfer usdc coin (legacy)',\n    //   value: JSON.stringify({\n    //     sender: address,\n    //     data: {\n    //       function: '0x1::coin::transfer',\n    //       typeArguments: [\n    //         '0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDC',\n    //       ],\n    //       functionArguments: [address, new U256(100000)],\n    //     },\n    //   }),\n    // },\n  ],\n};\n","export function jsonToUint8Array(json: string | any): Uint8Array {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const message = typeof json === 'string' ? JSON.parse(json) : json;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access\n  const signatureArray = Object.keys(message).map((key) => message[key]);\n\n  return new Uint8Array(signatureArray);\n}\n","import {  Aptos, AptosConfig, Network ,EntryFunctionArgumentTypes, SimpleEntryFunctionArgumentTypes } from '@aptos-labs/ts-sdk';\nimport type { SignMessagePayload, SignMessageRequest } from './types';\nimport { NetworkInfo } from \"@aptos-labs/wallet-adapter-core\";\n\nexport const APTOS_SIGN_MESSAGE_PREFIX = 'APTOS';\n\nexport function formatFullMessage(message: SignMessageRequest): string {\n  let fullMessage = `${APTOS_SIGN_MESSAGE_PREFIX}\\n`;\n  if (message.address) {\n    fullMessage += `address: ${message.address}\\n`;\n  }\n  if (message.application) {\n    fullMessage += `application: ${message.application}\\n`;\n  }\n  if (message.chainId) {\n    fullMessage += `chainId: ${message.chainId}\\n`;\n  }\n  fullMessage += `message: ${message.message}\\n`;\n  fullMessage += `nonce: ${message.nonce}`;\n\n  return fullMessage;\n}\n\nexport function formatSignMessageRequest(\n  message: SignMessagePayload,\n  address: string,\n  application: string,\n  chainId: number,\n): SignMessageRequest {\n  const request: SignMessageRequest = {\n    message: message.message,\n    nonce: message.nonce,\n    fullMessage: '',\n  };\n\n  if (message.address) {\n    request.address = address;\n  }\n  if (message.application) {\n    let host: string;\n    try {\n      const urlObj = new URL(application);\n      host = urlObj.host;\n    } catch (error) {\n      host = application;\n    }\n    request.application = host;\n  }\n  if (message.chainId) {\n    request.chainId = chainId;\n  }\n\n  request.fullMessage = formatFullMessage(request);\n\n  return request;\n}\n\nexport function formatFunctionArgument(\n  functionArg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n): EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes {\n  if (functionArg) {\n    if (Array.isArray(functionArg)) return functionArg.map(formatFunctionArgument);\n    if (\n      typeof functionArg === 'string' ||\n      typeof functionArg === 'number' ||\n      typeof functionArg === 'boolean'\n    ) {\n      return functionArg;\n    }\n    if (typeof functionArg === 'bigint') {\n      return functionArg.toString();\n    }\n    if (functionArg instanceof Uint8Array) {\n      return functionArg;\n    }\n    if (functionArg instanceof ArrayBuffer) {\n      return new Uint8Array(functionArg);\n    }\n    if ('values' in functionArg) {\n      return functionArg.values.map(formatFunctionArgument);\n    }\n    if ('data' in functionArg) {\n      return functionArg.toString();\n    }\n    if (functionArg.value) {\n      return functionArg.value instanceof Uint8Array\n        ? functionArg.value\n        : functionArg.value.toString();\n    }\n  }\n\n  return functionArg;\n}\n\n// Devnet client\nconst DEVNET_CONFIG = new AptosConfig({ network: Network.DEVNET });\nconst DEVNET_CLIENT = new Aptos(DEVNET_CONFIG);\n\n// Testnet client\nconst TESTNET_CONFIG = new AptosConfig({ network: Network.TESTNET });\nconst TESTNET_CLIENT = new Aptos(TESTNET_CONFIG);\n\n// Mainnet client\nconst MAINNET_CONFIG = new AptosConfig({ network: Network.MAINNET });\nconst MAINNET_CLIENT = new Aptos(MAINNET_CONFIG);\n\nexport const aptosClient = (network?: NetworkInfo | null) => {\n  if (network?.name === Network.DEVNET) {\n    return DEVNET_CLIENT;\n  } else if (network?.name === Network.TESTNET) {\n    return TESTNET_CLIENT;\n  } else if (network?.name === Network.MAINNET) {\n    return MAINNET_CLIENT;\n  } else {\n    const CUSTOM_CONFIG = new AptosConfig({\n      network: Network.CUSTOM,\n      fullnode: network?.url,\n    });\n    return new Aptos(CUSTOM_CONFIG);\n  }\n};","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { dapps } from './dapps.config';\nimport ConnectButton from '../../../components/connect/ConnectButton';\nimport { useEffect, useRef, useCallback, useState } from 'react';\nimport { hexToBytes } from '@noble/hashes/utils';\nimport { SignMessageResponse } from './types';\nimport { ApiPayload, ApiGroup } from '../../ApiActuator';\nimport { useWallet } from '../../../components/connect/WalletContext';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport type { IKnownWallet } from '../../../components/connect/types';\nimport DappList from '../../../components/DAppList';\nimport params from './params';\nimport nacl from 'tweetnacl';\nimport { stripHexPrefix } from 'ethereumjs-util';\nimport {\n  createSignInMessage,\n  createSignInSigningMessage,\n} from '@aptos-labs/siwa';\nimport {\n  Network,\n  Aptos,\n  AptosConfig,\n  parseTypeTag,\n  TypeTagAddress,\n  TypeTagU64,\n  SimpleTransaction,\n  Deserializer,\n  Ed25519PublicKey,\n  Ed25519Signature,\n  AccountAuthenticatorEd25519,\n  AccountAddress,\n  U64,\n  Ed25519Account,\n  AnyRawTransaction,\n  AccountAuthenticator,\n  Account,\n} from '@aptos-labs/ts-sdk';\nimport {\n  WalletReadyState,\n  AptosStandardSupportedWallet,\n  AptosSignMessageInput,\n  AptosSignInInput,\n  AdapterWallet,\n  AptosSignInOutput,\n} from '@aptos-labs/wallet-adapter-core';\nimport { useWallet as useStandardWallet } from '@aptos-labs/wallet-adapter-react';\n\nimport { AptosWalletAdapterProvider } from '@aptos-labs/wallet-adapter-react';\nimport InfoLayout from '../../InfoLayout';\nimport { jsonToUint8Array } from '../../../lib/uint8array';\nimport { get } from 'lodash';\nimport { ApiForm, ApiFormRef } from '../../ApiForm';\nimport { aptosClient } from './utils';\nimport { stringifyWithSpecialType } from '../../../lib/jsonUtils';\n\n\nconst APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\nconst MaxGasAMount = 10000;\nconst TRANSFER_SCRIPT =\n  \"0xa11ceb0b0700000a0601000203020605080d071525083a40107a1f010200030201000104060c060c05030003060c0503083c53454c463e5f30046d61696e0d6170746f735f6163636f756e74087472616e73666572ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000114636f6d70696c6174696f6e5f6d65746164617461090003322e3003322e31000001070b000b01010b020b03110002\";\n\nfunction MultiAgentTransactionFlow() {\n  const { account, network, signTransaction, submitTransaction } = useStandardWallet();\n\n  const [secondarySignerAccount, setSecondarySignerAccount] = useState<Ed25519Account>();\n  const [transactionToSubmit, setTransactionToSubmit] = useState<AnyRawTransaction | null>(null);\n\n  const [senderAuthenticator, setSenderAuthenticator] = useState<AccountAuthenticator>();\n  const [secondarySignerAuthenticator, setSecondarySignerAuthenticator] =\n    useState<AccountAuthenticator>();\n\n  const apiFromRef = useRef<ApiFormRef>(null);\n\n  const generateTransaction = async (): Promise<AnyRawTransaction> => {\n    if (!account) {\n      throw new Error(\"no account\");\n    }\n\n    if (!network) {\n      throw new Error(\"no network\");\n    }\n\n    const secondarySigner = Account.generate();\n    setSecondarySignerAccount(secondarySigner);\n    apiFromRef.current?.setJsonValue('secondarySignerInfoResponse', {\n      \"此为自动生成，请勿修改，否则会导致交易失败\": \"\",\n      \"Address\": secondarySigner.accountAddress.toString(),\n      \"Private Key\": secondarySigner.privateKey.toString(),\n      \"Public Key\": secondarySigner.publicKey.toString(),\n    });\n\n    const transactionToSign = await aptosClient(\n      network,\n    ).transaction.build.multiAgent({\n      sender: account.address,\n      secondarySignerAddresses: [secondarySigner.accountAddress],\n      data: {\n        bytecode: TRANSFER_SCRIPT,\n        typeArguments: [],\n        functionArguments: [account.address, new U64(1)],\n      },\n      options:{\n        expireTimestamp: Math.floor(Date.now() / 1000) + 60 * 5,\n      }\n    });\n\n    console.log('=== DEBUG: Transaction generation ===');\n    console.log('Sender address:', account.address);\n    console.log('Secondary signer address:', secondarySigner.accountAddress.toString());\n    console.log('Transaction to sign:', transactionToSign);\n\n    return transactionToSign;\n  };\n\n  const onSenderSignTransaction = async () => {\n    const transaction = await generateTransaction();\n    setTransactionToSubmit(transaction);\n    try {\n      const response = await signTransaction({\n        transactionOrPayload: transaction,\n      });\n\n      console.log('=== DEBUG: Sender signing ===');\n      console.log('Sender sign response:', response);\n\n      const senderAuth = response.authenticator;\n      console.log('===== senderAuth ===== ', `isEd25519: ${senderAuth.isEd25519()? 'true' : 'false'}, isMultiEd25519: ${senderAuth.isMultiEd25519()? 'true' : 'false'}, isSingleKey: ${senderAuth.isSingleKey()? 'true' : 'false'}, isMultiKey: ${senderAuth.isMultiKey()? 'true' : 'false'}`);\n      setSenderAuthenticator(senderAuth);\n      apiFromRef.current?.setJsonValue('senderSignResponse', response.authenticator);\n    } catch (error) {\n      console.error('Sender signing error:', error);\n    }\n  };\n\n  const onSecondarySignerSignTransaction = async () => {\n    if (!transactionToSubmit) {\n      throw new Error(\"No Transaction to sign\");\n    }\n    if (!secondarySignerAccount) {\n      throw new Error(\"No secondarySignerAccount\");\n    }\n    try {\n      console.log('=== DEBUG: Secondary signer signing ===');\n      console.log('Secondary signer account:', secondarySignerAccount.accountAddress.toString());\n\n      const authenticator = aptosClient(network).sign({\n        signer: secondarySignerAccount,\n        transaction: transactionToSubmit,\n      });\n\n      console.log('Secondary signer authenticator:', authenticator);\n\n      setSecondarySignerAuthenticator(authenticator);\n      console.log('===== secondaryAuth ===== ', `isEd25519: ${authenticator.isEd25519()? 'true' : 'false'}, isMultiEd25519: ${authenticator.isMultiEd25519()? 'true' : 'false'}, isSingleKey: ${authenticator.isSingleKey()? 'true' : 'false'}, isMultiKey: ${authenticator.isMultiKey()? 'true' : 'false'}`);\n      apiFromRef.current?.setJsonValue('secondarySignerSignResponse', authenticator);\n      return Promise.resolve();\n    } catch (error) {\n      console.error('Secondary signer signing error:', error);\n    }\n  };\n\n  const onSubmitTransaction = async () => {\n    try {\n      if (!transactionToSubmit) {\n        throw new Error(\"No Transaction to sign\");\n      }\n      if (!senderAuthenticator) {\n        throw new Error(\"No senderAuthenticator\");\n      }\n      if (!secondarySignerAuthenticator) {\n        throw new Error(\"No secondarySignerAuthenticator\");\n      }\n\n      console.log('=== DEBUG: Transaction submission ===');\n      console.log('Transaction to submit:', transactionToSubmit);\n      console.log('Sender authenticator:', senderAuthenticator);\n      console.log('Secondary authenticator:', secondarySignerAuthenticator);\n\n      const response = await submitTransaction({\n        transaction: transactionToSubmit,\n        senderAuthenticator: senderAuthenticator,\n        additionalSignersAuthenticators: [secondarySignerAuthenticator],\n      });\n\n      apiFromRef.current?.setJsonValue('submitTransactionResponse', response);\n      if(window && window.open && response.hash) {\n        window.open(`https://explorer.aptoslabs.com/txn/${response.hash}`, '_blank');\n      }\n    } catch (error) {\n      apiFromRef.current?.setJsonValue('submitTransactionResponse', {\n        \"error\": error,\n      });\n      console.error('Submit transaction error:', error);\n    }\n  };\n\n  return (\n    <ApiForm\n      title=\"MultiAgent Transaction Flow\"\n      description=\"通过第二个账户签字实现第一个账户给第一个账户转账。 需要两个账户，一个作为发送者，一个作为第二签名账户, 发送者账户需要先签名，然后第二签名账户再签名，最后一起提交。\"\n      ref={apiFromRef}\n    >\n      <ApiForm.TextArea id=\"secondarySignerInfoResponse\" label=\"第二签名账户信息\" />\n      <ApiForm.Button id=\"onSenderSignTransaction\" label=\"1. Sign as sender & generate secondary account\" onClick={onSenderSignTransaction} />\n      <ApiForm.TextArea id=\"senderSignResponse\" label=\"执行结果\" />\n\n      <ApiForm.Button id=\"onSecondarySignerSignTransaction\"\n        label=\"2. Sign as secondary signer\"\n        onClick={onSecondarySignerSignTransaction}\n        disabled={!secondarySignerAccount}\n      />\n      <ApiForm.TextArea id=\"secondarySignerSignResponse\" label=\"执行结果\" />\n\n      <ApiForm.Button\n        id=\"submitTransaction\"\n        label=\"3. Submit transaction\"\n        onClick={onSubmitTransaction}\n        disabled={!senderAuthenticator || !secondarySignerAuthenticator}\n      />\n      <ApiForm.JsonEdit id=\"submitTransactionResponse\" label=\"执行结果\" />\n    </ApiForm>\n  );\n}\n\nfunction SponsorTransactionFlow() {\n  const { account, network, signTransaction, submitTransaction } = useStandardWallet();\n\n  const [transactionToSubmit, setTransactionToSubmit] = useState<AnyRawTransaction | null>(null);\n  const [senderAccount, setSenderAccount] = useState<Account | null>();\n\n  const [senderAuthenticator, setSenderAuthenticator] = useState<AccountAuthenticator>();\n  const [feepayerAuthenticator, setFeepayerAuthenticator] =\n    useState<AccountAuthenticator>();\n\n  const apiFromRef = useRef<ApiFormRef>(null);\n\n  const generateTransaction = async (sender: Account): Promise<AnyRawTransaction> => {\n    if (!account) {\n      throw new Error(\"no account\");\n    }\n\n    if (!network) {\n      throw new Error(\"no network\");\n    }\n\n    console.log('===  01, generateTransaction ===');\n\n    const transactionToSign = await aptosClient(\n      network\n    ).transaction.build.simple({\n      sender: sender.accountAddress,\n      withFeePayer: true,\n      data: {\n        function: \"0x1::resource_account::create_resource_account\",\n        typeArguments: [],\n        functionArguments: [\n          account.address.toString(),\n          AccountAddress.from(\"0x0\").toUint8Array(),\n        ],\n      },\n      options:{\n        expireTimestamp: Math.floor(Date.now() / 1000) + 60 * 5,\n      }\n    });\n    console.log('===  02, transactionToSign ===', transactionToSign);\n    transactionToSign.feePayerAddress = account.address;\n    return transactionToSign;\n  };\n\n  const onSignTransaction = async () => {\n    const sender = Account.generate();\n    setSenderAccount(sender);\n    apiFromRef.current?.setJsonValue('senderInfoResponse', {\n      \"此为自动生成，请勿修改，否则会导致交易失败\": \"\",\n      \"Address\": sender.accountAddress.toString(),\n      \"Private Key\": sender.privateKey.toString(),\n      \"Public Key\": sender.publicKey.toString(),\n    });\n\n    console.log('=== DEBUG: Transaction generation ===');\n    console.log('Sender address:', sender.accountAddress.toString());\n\n    const transaction = await generateTransaction(sender);\n    setTransactionToSubmit(transaction);\n\n    console.log('=== DEBUG: Transaction generation ===');\n    console.log('Transaction to sign:', transaction);\n\n    try {\n      const authenticator = aptosClient(network).sign({\n        signer: sender,\n        transaction: transaction,\n      });\n      setSenderAuthenticator(authenticator);\n      apiFromRef.current?.setJsonValue('senderSignResponse', authenticator);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onSignTransactionAsSponsor = async () => {\n    if (!transactionToSubmit) {\n      throw new Error(\"No Transaction to sign\");\n    }\n    try {\n      const response = await signTransaction({\n        transactionOrPayload: transactionToSubmit,\n        asFeePayer: true,\n      });\n      setFeepayerAuthenticator(response.authenticator);\n      apiFromRef.current?.setJsonValue('sponsorSignResponse', response.authenticator);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onSubmitTransaction = async () => {\n    if (!transactionToSubmit) {\n      throw new Error(\"No Transaction to sign\");\n    }\n    if (!senderAuthenticator) {\n      throw new Error(\"No senderAuthenticator\");\n    }\n    if (!feepayerAuthenticator) {\n      throw new Error(\"No feepayerAuthenticator\");\n    }\n    try {\n      const response = await submitTransaction({\n        transaction: transactionToSubmit,\n        senderAuthenticator: senderAuthenticator,\n        feePayerAuthenticator: feepayerAuthenticator,\n      });\n      apiFromRef.current?.setJsonValue('submitTransactionResponse', response);\n      if(window && window.open && response.hash) {\n        window.open(`https://explorer.aptoslabs.com/txn/${response.hash}`, '_blank');\n      }\n    } catch (error) {\n      apiFromRef.current?.setJsonValue('submitTransactionResponse', {\n        \"error\": error,\n      });\n      console.error(error);\n    }\n  };\n\n  return (\n    <ApiForm\n      title=\"Sponsor Transaction Flow\"\n      description=\"第一个用户发起一个创建账户的交易，第二个用户作为赞助者，支付交易费用\"\n      ref={apiFromRef}\n    >\n      <ApiForm.TextArea id=\"senderInfoResponse\" label=\"交易发送者信息\" />\n      <ApiForm.Button id=\"onSignTransaction\" label=\"1. Sign as sender\" onClick={onSignTransaction} />\n      <ApiForm.TextArea id=\"senderSignResponse\" label=\"执行结果\" />\n\n      <ApiForm.Button id=\"onSignTransactionAsSponsor\"\n        label=\"2. Sign as sponsor, 帮助发送者支付交易费用\"\n        onClick={onSignTransactionAsSponsor}\n        disabled={!senderAccount || !transactionToSubmit}\n      />\n      <ApiForm.TextArea id=\"sponsorSignResponse\" label=\"执行结果\" />\n\n      <ApiForm.Button\n        id=\"submitTransaction\"\n        label=\"3. Submit transaction\"\n        onClick={onSubmitTransaction}\n        disabled={!senderAuthenticator || !feepayerAuthenticator}\n      />\n      <ApiForm.JsonEdit id=\"submitTransactionResponse\" label=\"执行结果\" />\n    </ApiForm>\n  );\n}\n\nfunction Example() {\n  const {\n    connected,\n    account,\n    network,\n    signAndSubmitTransaction,\n    signMessageAndVerify,\n    signMessage,\n    signTransaction,\n    submitTransaction,\n    signIn,\n  } = useStandardWallet();\n\n  const aptosClient = new Aptos(\n    new AptosConfig({\n      network: Network.MAINNET,\n    }),\n  );\n\n  return (\n    <>\n      <ApiGroup title=\"Basics\">\n        <ApiPayload\n          title=\"getNetwork\"\n          description=\"getNetwork\"\n          disableRequestContent\n          allowCallWithoutProvider\n          onExecute={async () => {\n            return Promise.resolve(network);\n          }}\n        />\n        <ApiPayload\n          title=\"isConnected\"\n          description=\"isConnected\"\n          disableRequestContent\n          allowCallWithoutProvider\n          onExecute={async () => {\n            return Promise.resolve(connected);\n          }}\n        />\n        <ApiPayload\n          title=\"account\"\n          description=\"当前账户\"\n          disableRequestContent\n          allowCallWithoutProvider\n          onExecute={async () => {\n            return Promise.resolve(account);\n          }}\n        />\n        <ApiPayload\n          title=\"network\"\n          description=\"当前网络\"\n          disableRequestContent\n          allowCallWithoutProvider\n          onExecute={async () => {\n            return Promise.resolve(network);\n          }}\n        />\n      </ApiGroup>\n\n      <ApiGroup title=\"Transfer\">\n        <ApiPayload\n          title=\"signMessage\"\n          description=\"signMessage\"\n          presupposeParams={params.signMessage}\n          onExecute={async (request: string) => {\n            const obj = JSON.parse(request) as AptosSignMessageInput;\n            const result = await signMessage(obj);\n            return stringifyWithSpecialType(result).replace(/\\\\n/g, '\\\\\\\\n')\n              .replace(/\\\\r/g, '\\\\\\\\r')\n              .replace(/\\\\t/g, '\\\\\\\\t');\n          }}\n          onValidate={(request: string, result: string) => {\n            const { fullMessage, signature } = JSON.parse(result) as SignMessageResponse;\n\n            const signatureU8 = jsonToUint8Array(get(signature, 'data.data'));\n\n            const isValidSignature = nacl.sign.detached.verify(\n              Buffer.from(fullMessage),\n              signatureU8,\n              hexToBytes(stripHexPrefix(account?.publicKey.toString() ?? '')),\n            );\n\n            return Promise.resolve(isValidSignature.toString());\n          }}\n        />\n        <ApiPayload\n          title=\"signMessageAndVerify\"\n          description=\"signMessageAndVerify\"\n          presupposeParams={params.signMessage}\n          onExecute={async (request: string) => {\n            const obj = JSON.parse(request) as AptosSignMessageInput;\n            return signMessageAndVerify(obj);\n          }}\n        />\n        <ApiPayload\n          title=\"signIn\"\n          description=\"signIn\"\n          presupposeParams={[{\n            id: 'signIn',\n            name: 'signIn',\n            value: JSON.stringify({\n              walletName: 'OneKey',\n              input: {\n                domain: \"localhost:3000\",\n                nonce: Math.random().toString(16),\n                statement: \"Signing into demo application\",\n                notBefore: new Date().toISOString(),\n                expirationTime: new Date(\n                  Date.now() + 1000 * 60 * 60 * 24\n                ).toISOString(),\n                issuedAt: new Date().toISOString(),\n                requestId: \"abc\",\n                resources: [\"resource.1\", \"resource.2\"],\n              },\n            }),\n          }]}\n          onExecute={async (request: string) => {\n            const obj = JSON.parse(request) as {\n              walletName: string;\n              input: AptosSignInInput;\n            };\n            return signIn(obj);\n          }}\n          onValidate={async (request: string, result: string) => {\n            const { account, input, signature } = JSON.parse(result) as AptosSignInOutput;\n\n            const publicKeyU8 = jsonToUint8Array(get(account, 'publicKey.key.data'));\n            const signatureU8 = jsonToUint8Array(get(signature, 'data.data'));\n\n            const message = createSignInSigningMessage(createSignInMessage(input));\n\n            const isValidSignature = nacl.sign.detached.verify(\n              Buffer.from(message),\n              signatureU8,\n              publicKeyU8,\n            );\n            return Promise.resolve(isValidSignature.toString());\n          }}\n        />\n         {/* <ApiPayload\n          title=\"openInMobileApp\"\n          description=\"signMessageAndVerify\"\n          presupposeParams={params.signMessage}\n          onExecute={async (request: string) => {\n            return openInMobileApp();\n          }}\n        /> */}\n        <ApiPayload\n          title=\"signTransaction\"\n          description=\"signTransaction\"\n          presupposeParams={params.signTransaction(account?.address.toString() ?? '')}\n          onExecute={async (request: string) => {\n            const obj = JSON.parse(request);\n            const { data, asFeePayer, options } = obj;\n            const res = await signTransaction({\n              transactionOrPayload: {\n                data,\n                options: options ? options : undefined,\n              },\n              asFeePayer,\n            });\n            return res;\n          }}\n        />\n        <ApiPayload\n          title=\"signAndSubmitTransaction\"\n          description=\"signAndSubmitTransaction\"\n          presupposeParams={params.signAndSubmitTransaction(account?.address.toString() ?? '')}\n          onExecute={async (request: string) => {\n            const obj = JSON.parse(request);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            const res = await signAndSubmitTransaction(obj);\n            return JSON.stringify(res);\n          }}\n        />\n      </ApiGroup>\n\n      <ApiGroup title=\"SDK Build Transaction\">\n        <ApiPayload\n          title=\"signTransaction-SDK-build transaction\"\n          description=\"使用 SDK 构造 Coin 转账\"\n          presupposeParams={[\n            {\n              id: 'sender',\n              name: 'sender',\n              value: JSON.stringify({\n                recipient: account?.address.toString() ?? '',\n                amount: 100000,\n              }),\n            },\n          ]}\n          onExecute={async (request: string) => {\n            const { recipient, amount } = JSON.parse(request);\n            const res = await aptosClient.coin.transferCoinTransaction({\n              sender: account?.address.toString() ?? '',\n              recipient,\n              amount,\n            });\n\n            return {\n              txn: res.bcsToHex().toStringWithoutPrefix(),\n              result: await signTransaction({\n                transactionOrPayload:res\n              }),\n            };\n          }}\n          onValidate={async (request: string, result: string) => {\n            const { txn, result: signedTxn } = JSON.parse(result);\n            const publicKey = jsonToUint8Array(get(signedTxn, 'authenticator.public_key.key.data'));\n            const signature = jsonToUint8Array(get(signedTxn, 'authenticator.signature.data.data'));\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            const simpleTxn = SimpleTransaction.deserialize(new Deserializer(hexToBytes(txn)));\n\n            const res = await submitTransaction({\n              transaction: simpleTxn,\n              senderAuthenticator: new AccountAuthenticatorEd25519(\n                new Ed25519PublicKey(publicKey),\n                new Ed25519Signature(signature),\n              ),\n            });\n\n            return Promise.resolve(JSON.stringify(res));\n          }}\n        />\n\n        <ApiPayload\n          title=\"signTransaction-SDK-build transaction\"\n          description=\"使用 SDK 构造 Legacy Token 转账\"\n          presupposeParams={[\n            {\n              id: 'sender',\n              name: 'sender',\n              value: JSON.stringify({\n                recipient: account?.address.toString() ?? '',\n                amount: 100000,\n                coinType:\n                  '0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDC',\n              }),\n            },\n          ]}\n          onExecute={async (request: string) => {\n            const { recipient, amount, coinType } = JSON.parse(request);\n            const res = await aptosClient.coin.transferCoinTransaction({\n              sender: account?.address.toString() ?? '',\n              recipient,\n              amount,\n              coinType,\n            });\n\n            return {\n              txn: res.bcsToHex().toStringWithoutPrefix(),\n              result: await signTransaction({\n                transactionOrPayload:res\n              }),\n            };\n          }}\n          onValidate={async (request: string, result: string) => {\n            const { txn, result: signedTxn } = JSON.parse(result);\n            const publicKey = jsonToUint8Array(get(signedTxn, 'authenticator.public_key.key.data'));\n            const signature = jsonToUint8Array(get(signedTxn, 'authenticator.signature.data.data'));\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            const simpleTxn = SimpleTransaction.deserialize(new Deserializer(hexToBytes(txn)));\n\n            const res = await submitTransaction({\n              transaction: simpleTxn,\n              senderAuthenticator: new AccountAuthenticatorEd25519(\n                new Ed25519PublicKey(publicKey),\n                new Ed25519Signature(signature),\n              ),\n            });\n\n            return Promise.resolve(JSON.stringify(res));\n          }}\n        />\n\n        <ApiPayload\n          title=\"signTransaction-SDK-build transaction\"\n          description=\"使用 SDK 构造 Token 转账\"\n          presupposeParams={[\n            {\n              id: 'sender',\n              name: 'sender',\n              value: JSON.stringify({\n                recipient: account?.address ?? '',\n                amount: 100000,\n                coinType: '0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b',\n              }),\n            },\n          ]}\n          onExecute={async (request: string) => {\n            const { recipient, amount, coinType } = JSON.parse(request);\n            try {\n              const res = await aptosClient.transaction.build.simple({\n                sender: account?.address ?? '',\n                data: {\n                  function: '0x1::primary_fungible_store::transfer',\n                  typeArguments: ['0x1::fungible_asset::Metadata'],\n                  functionArguments: [coinType, recipient, amount],\n                  abi: {\n                    typeParameters: [{ constraints: [] }],\n                    parameters: [\n                      parseTypeTag('0x1::object::Object'),\n                      new TypeTagAddress(),\n                      new TypeTagU64(),\n                    ],\n                  },\n                },\n              });\n              return {\n                txn: res.bcsToHex().toStringWithoutPrefix(),\n                result: await signTransaction({\n                  transactionOrPayload: res\n                }),\n              };\n            } catch (error) {\n              console.log(error);\n            }\n          }}\n          onValidate={async (request: string, result: string) => {\n            const { txn, result: signedTxn } = JSON.parse(result);\n            const publicKey = jsonToUint8Array(get(signedTxn, 'authenticator.public_key.key.data'));\n            const signature = jsonToUint8Array(get(signedTxn, 'authenticator.signature.data.data'));\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            const simpleTxn = SimpleTransaction.deserialize(new Deserializer(hexToBytes(txn)));\n\n            const res = await submitTransaction({\n              transaction: simpleTxn,\n              senderAuthenticator: new AccountAuthenticatorEd25519(\n                new Ed25519PublicKey(publicKey),\n                new Ed25519Signature(signature),\n              ),\n            });\n\n            return Promise.resolve(JSON.stringify(res));\n          }}\n        />\n      </ApiGroup>\n\n      <ApiGroup title=\"SignAndSubmitTransaction Test\">\n        <ApiPayload\n          title=\"signAndSubmitTransaction Normal Argument\"\n          description=\"Normal Argument 测试\"\n          presupposeParams={[\n            {\n              id: 'sender',\n              name: 'sender',\n              value: JSON.stringify({\n                recipient: account?.address.toString() ?? '',\n                amount: 100000,\n                coinType: '0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b',\n              }),\n            },\n          ]}\n          onExecute={async (request: string) => {\n            const { recipient, amount, coinType } = JSON.parse(request);\n            return {\n              result: await signAndSubmitTransaction({\n                sender: account?.address.toString() ?? '',\n                data: {\n                  function: '0x1::primary_fungible_store::transfer',\n                  typeArguments: ['0x1::fungible_asset::Metadata'],\n                  functionArguments: [coinType, recipient as string, amount as number],\n                },\n              }),\n            };\n          }}\n        />\n\n        <ApiPayload\n          title=\"signAndSubmitTransaction Encode Argument\"\n          description=\"Encode Argument 测试 (OneKey、OKX、MizuWallet 等都不支持)\"\n          presupposeParams={[\n            {\n              id: 'sender',\n              name: 'sender',\n              value: JSON.stringify({\n                recipient: account?.address.toString() ?? '',\n                amount: 100000,\n                coinType: '0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b',\n              }),\n            },\n          ]}\n          onExecute={async (request: string) => {\n            const { recipient, amount, coinType } = JSON.parse(request);\n            return {\n              result: await signAndSubmitTransaction({\n                sender: account?.address.toString() ?? '',\n                data: {\n                  function: '0x1::primary_fungible_store::transfer',\n                  typeArguments: ['0x1::fungible_asset::Metadata'],\n                  functionArguments: [\n                    coinType,\n                    AccountAddress.from(recipient as string),\n                    new U64(amount as number),\n                  ],\n                },\n              }),\n            };\n          }}\n        />\n\n        <ApiPayload\n          title=\"signAndSubmitTransaction Script\"\n          description=\"Script 测试\"\n          presupposeParams={[\n            {\n              id: 'sign with script payload',\n              name: 'with script payload',\n              value: '',\n            },\n          ]}\n          onExecute={async (request: string) => {\n            return {\n              result: await signAndSubmitTransaction({\n                sender: account?.address.toString() ?? '',\n                data: {\n                  bytecode:\n                    'a11ceb0b060000000701000402040a030e0c041a04051e20073e30086e2000000001010204010001000308000104030401000105050601000002010203060c0305010b0001080101080102060c03010b0001090002050b00010900000a6170746f735f636f696e04636f696e04436f696e094170746f73436f696e087769746864726177076465706f7369740000000000000000000000000000000000000000000000000000000000000001000001080b000b0138000c030b020b03380102',\n                  functionArguments: [\n                    new U64(1),\n                    AccountAddress.from(account?.address.toString() ?? ('' as string)),\n                  ],\n                },\n              }),\n            };\n          }}\n        />\n         <ApiPayload\n          title=\"signAndSubmitTransaction test set gas\"\n          description=\"测试设置 gas\"\n          presupposeParams={[\n            {\n              id: 'sign with options',\n              name: 'with options',\n              value: '',\n            },\n          ]}\n          onExecute={async (request: string) => {\n              const commitedTransaction = await signAndSubmitTransaction({\n                sender: account?.address.toString() ?? '',\n                data: {\n                  function: \"0x1::coin::transfer\",\n                  typeArguments: [APTOS_COIN],\n                  functionArguments: [account.address.toString(), 1], // 1 is in Octas\n                },\n                options: { maxGasAmount: MaxGasAMount },\n              })\n\n              const executedTransaction = await aptosClient.waitForTransaction({\n                transactionHash: commitedTransaction.hash,\n              });\n\n              if ((executedTransaction as any).max_gas_amount == MaxGasAMount) {\n                return Promise.resolve({\n                  title: \"Success\",\n                  description: `transaction ${executedTransaction.hash} executed with a max gas amount of ${MaxGasAMount}`,\n                });\n              } else {\n                return Promise.resolve({\n                  variant: \"destructive\",\n                  title: \"Error\",\n                  description: `transaction ${executedTransaction.hash} executed with a max gas amount of ${get(executedTransaction,\"max_gas_amount\")}`,\n                });\n              }\n          }}\n        />\n      </ApiGroup>\n\n      <ApiGroup title=\"Advanced Transaction Flow\">\n        <MultiAgentTransactionFlow />\n        <SponsorTransactionFlow />\n      </ApiGroup>\n\n      <DappList dapps={dapps} />\n    </>\n  );\n}\n\nfunction AptosConnectButton() {\n  const { connected, wallets, account, network, connect, disconnect } = useStandardWallet();\n\n  const { setProvider } = useWallet();\n\n  const walletsRef = useRef<(AdapterWallet | AptosStandardSupportedWallet)[]>([]);\n  walletsRef.current = wallets.filter((wallet) => wallet.readyState === WalletReadyState.Installed);\n\n  useEffect(() => {\n    console.log('Aptos Standard Wallets:', wallets);\n  }, [wallets]);\n\n  const onConnectWallet = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async (selectedWallet: IKnownWallet) => {\n      const wallet = walletsRef.current.find((w) => w.name === selectedWallet.id);\n      if (!wallet) {\n        return Promise.reject('Wallet not found');\n      }\n\n      connect(wallet.name);\n\n      return {\n        provider: undefined,\n      };\n    },\n    [connect],\n  );\n\n  useEffect(() => {\n    console.log('account changed', account);\n    setProvider(account);\n  }, [account, setProvider]);\n  useEffect(() => {\n    console.log('network changed', network);\n  }, [network]);\n\n  return (\n    <>\n      <ConnectButton<any>\n        fetchWallets={() => {\n          return Promise.resolve(\n            walletsRef.current.map((wallet) => {\n              return {\n                id: wallet.name,\n                name: wallet.name,\n                tags: [get(wallet,'isAIP62Standard') ? 'AIP62' : '', get(wallet,'isAptosNativeWallet') ? 'Aptos Native' : ''],\n              };\n            }),\n          );\n        }}\n        onConnect={onConnectWallet}\n        onDisconnect={() => void disconnect()}\n      />\n\n      <InfoLayout title=\"Base Info\">\n        {account && <p>Account:{account?.address?.toString() ?? ''}</p>}\n        {account && <p>PubKey:{account?.publicKey?.toString() ?? ''}</p>}\n        {account && <p>ansName:{account?.ansName?.toString() ?? ''}</p>}\n        {network && <p>chainId:{network?.chainId ?? ''}</p>}\n        {network && <p>networkName:{network?.name?.toString() ?? ''}</p>}\n        {network && <p>networkUrl:{network?.url?.toString() ?? ''}</p>}\n        {account && <p>Status :{connected ? 'Connected' : 'Disconnected'}</p>}\n      </InfoLayout>\n    </>\n  );\n}\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AptosWalletAdapterProvider\n        autoConnect={true}\n        dappConfig={{\n          network: Network.MAINNET,\n        }}\n        // @ts-expect-error\n        optInWallets={['Petra', 'OneKey', 'OKX Wallet', 'Nightly', 'Mizu Wallet', 'Pontem Wallet']}\n        onError={(error) => {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          console.log('error', error);\n        }}\n      >\n        <AptosConnectButton />\n        <Example />\n      </AptosWalletAdapterProvider>\n    </QueryClientProvider>\n  );\n}\n","/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { Button } from '../ui/button';\nimport { Card, CardContent } from '../ui/card';\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '../ui/dialog';\nimport type { IAccountInfo, IKnownWallet } from './types';\nimport { useWallet } from './WalletContext';\nimport { toast } from '../ui/use-toast';\nimport { get } from 'lodash';\nimport { useSettings } from '../../hooks/useSettings';\n\nexport type ConnectButtonProps<T> = {\n  fetchWallets: () => Promise<IKnownWallet[]>;\n  onConnect: (wallet: IKnownWallet) => Promise<\n    {\n      provider: T;\n    } & Partial<IAccountInfo>\n  >;\n  onDisconnect?: () => Promise<void>;\n};\n\nconst accountInfoKeys: Record<string, string> = {\n  address: '地址',\n  publicKey: '公钥',\n  chainId: '网络',\n};\n\nexport default function ConnectButton<T>({\n  fetchWallets,\n  onConnect,\n  onDisconnect,\n}: ConnectButtonProps<T>) {\n  const { settings } = useSettings();\n  const connectDialogRef = useRef<any>(null);\n  const autoConnectedRef = useRef<boolean>(false);\n\n  const [wallets, setWallets] = useState<IKnownWallet[]>([]);\n\n  const { setProvider, setAccount, provider, account } = useWallet();\n\n  const connectWallet = useCallback(\n    async (wallet: IKnownWallet) => {\n      try {\n        const { provider: _provider, ...accountInfo } = await onConnect(wallet);\n        setProvider(_provider);\n        setAccount(accountInfo);\n      } catch (error) {\n        console.log('connectWallet error', error);\n\n        toast({\n          title: '连接失败',\n          description: get(error, 'message', ''),\n        });\n      }\n    },\n    [onConnect, setAccount, setProvider],\n  );\n\n  const disconnectWallet = useCallback(async () => {\n    autoConnectedRef.current = false;\n    await onDisconnect?.();\n    setProvider(null);\n    setAccount(null);\n  }, [onDisconnect, setAccount, setProvider]);\n\n  const closeDialog = useCallback(() => {\n    setTimeout(() => {\n      try {\n        connectDialogRef.current?.click();\n      } catch (error) {\n        // ignore\n      }\n    }, 150);\n  }, []);\n\n  const connectWalletWithDialog = useCallback(\n    async (options?: { directConnection?: boolean }) => {\n      const wallets = await fetchWallets?.();\n\n      if (wallets?.length === 0) {\n        closeDialog();\n        return;\n      }\n\n      const { directConnection } = options ?? { directConnection: false };\n      if (wallets?.length === 1 || (wallets?.length > 0 && directConnection)) {\n        closeDialog();\n        await connectWallet(wallets[0]);\n      } else {\n        setWallets(wallets);\n      }\n    },\n    [closeDialog, connectWallet, fetchWallets],\n  );\n\n  useEffect(() => {\n    const timeout = setTimeout(async () => {\n      if (autoConnectedRef.current) return;\n\n      console.log('settings.autoConnect', settings.autoConnect);\n      if (settings.autoConnect) {\n        autoConnectedRef.current = true;\n        await connectWalletWithDialog({\n          directConnection: true,\n        });\n      }\n    }, 500);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [settings.autoConnect]);\n\n  return (\n    <Card>\n      <CardContent className=\"flex flex-col flex-wrap gap-3\">\n        <div className=\"flex flex-row flex-wrap justify-between\">\n          <Dialog>\n            <DialogTrigger asChild>\n              <Button onClick={() => connectWalletWithDialog()}>Connect Wallet</Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogClose ref={connectDialogRef} />\n              <DialogHeader>\n                <DialogTitle>选择钱包开始连接</DialogTitle>\n                {!!wallets &&\n                  wallets.map((wallet) => (\n                    <DialogClose asChild key={wallet.id}>\n                      <Button onClick={() => connectWallet(wallet)} className=\"gap-2\">\n                        {wallet.logo && (\n                          <img\n                            alt={wallet.name}\n                            src={wallet.logo}\n                            className=\"w-5 h-5 rounded-full\"\n                          />\n                        )}\n                        <span className=\"font-medium\">{wallet.name}</span>\n                        {wallet.tags?.map((tag) => (\n                          <span key={tag} className=\"text-xs font-light\">\n                            {tag}\n                          </span>\n                        ))}\n                      </Button>\n                    </DialogClose>\n                  ))}\n                {!wallets ||\n                  (wallets.length === 0 && (\n                    <DialogDescription>\n                      没有钱包可用，请安装 OneKey Extension\n                      <a target=\"_blank\" href={'https://www.onekey.so/download/'}>\n                        Install OneKey Extension →\n                      </a>\n                    </DialogDescription>\n                  ))}\n              </DialogHeader>\n            </DialogContent>\n          </Dialog>\n          {provider && (\n            <Button variant=\"destructive\" onClick={disconnectWallet}>\n              断开链接\n            </Button>\n          )}\n        </div>\n        {account && (\n          <div className=\"flex grid-cols-1 xl:grid-cols-2 flex-wrap gap-x-6 gap-y-3 mt-4\">\n            {Object.keys(account).map((key) => {\n              return (\n                <div key={key}>\n                  <span>{`${accountInfoKeys?.[key] ?? key}`}: </span>\n                  {/* @ts-expect-error */}\n                  <span className=\"font-normal flex flex-wrap text-break\">{`${account?.[key]}`}</span>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":["InfoLayout","param","title","children","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Card","jsx","CardHeader","className","CardContent","dapps","name","url","params","signMessage","id","value","JSON","stringify","address","application","chainId","message","nonce","signTransaction","data","type","function","typeArguments","functionArguments","options","maxGasAmount","gasUnitPrice","signAndSubmitTransaction","sender","jsonToUint8Array","json","parse","signatureArray","Object","keys","map","key","Uint8Array","DEVNET_CONFIG","AptosConfig","network","Network","DEVNET","DEVNET_CLIENT","Aptos","TESTNET_CONFIG","TESTNET","TESTNET_CLIENT","MAINNET_CONFIG","MAINNET","MAINNET_CLIENT","aptosClient","CUSTOM_CONFIG","CUSTOM","fullnode","MultiAgentTransactionFlow","account","submitTransaction","useStandardWallet","secondarySignerAccount","setSecondarySignerAccount","useState","transactionToSubmit","setTransactionToSubmit","senderAuthenticator","setSenderAuthenticator","secondarySignerAuthenticator","setSecondarySignerAuthenticator","apiFromRef","useRef","generateTransaction","secondarySigner","Account","generate","current","setJsonValue","accountAddress","toString","privateKey","publicKey","transactionToSign","transaction","build","multiAgent","secondarySignerAddresses","bytecode","U64","expireTimestamp","Math","floor","Date","now","console","log","onSenderSignTransaction","response","transactionOrPayload","senderAuth","authenticator","isEd25519","isMultiEd25519","isSingleKey","concat","isMultiKey","error","onSecondarySignerSignTransaction","sign","signer","Promise","resolve","onSubmitTransaction","additionalSignersAuthenticators","window","open","hash","jsx_runtime","ApiForm","description","ref","TextArea","label","Button","onClick","disabled","JsonEdit","SponsorTransactionFlow","senderAccount","setSenderAccount","feepayerAuthenticator","setFeepayerAuthenticator","simple","withFeePayer","AccountAddress","from","toUint8Array","feePayerAddress","onSignTransaction","onSignTransactionAsSponsor","asFeePayer","feePayerAuthenticator","Example","connected","signMessageAndVerify","signIn","Fragment","ApiGroup","ApiPayload","disableRequestContent","allowCallWithoutProvider","onExecute","presupposeParams","request","obj","result","stringifyWithSpecialType","replace","onValidate","fullMessage","signature","signatureU8","get","isValidSignature","nacl","detached","verify","Buffer","hexToBytes","stripHexPrefix","walletName","input","domain","random","statement","notBefore","toISOString","expirationTime","issuedAt","requestId","resources","publicKeyU8","createSignInSigningMessage","createSignInMessage","res","undefined","recipient","amount","coin","transferCoinTransaction","txn","bcsToHex","toStringWithoutPrefix","signedTxn","simpleTxn","SimpleTransaction","deserialize","Deserializer","AccountAuthenticatorEd25519","Ed25519PublicKey","Ed25519Signature","coinType","abi","typeParameters","constraints","parameters","parseTypeTag","TypeTagAddress","TypeTagU64","commitedTransaction","executedTransaction","waitForTransaction","transactionHash","max_gas_amount","MaxGasAMount","variant","DappList","AptosConnectButton","wallets","connect","disconnect","setProvider","useWallet","walletsRef","filter","wallet","readyState","WalletReadyState","Installed","useEffect","onConnectWallet","useCallback","selectedWallet","find","w","provider","reject","ConnectButton","fetchWallets","tags","onConnect","onDisconnect","p","ansName","queryClient","QueryClient","App","QueryClientProvider","client","AptosWalletAdapterProvider","autoConnect","dappConfig","optInWallets","onError","accountInfoKeys","settings","useSettings","connectDialogRef","autoConnectedRef","setWallets","setAccount","connectWallet","_provider","accountInfo","toast","disconnectWallet","closeDialog","setTimeout","click","connectWalletWithDialog","length","directConnection","timeout","clearTimeout","div","Dialog","DialogTrigger","asChild","DialogContent","DialogClose","DialogHeader","DialogTitle","logo","img","alt","src","span","tag","DialogDescription","a","target","href"],"sourceRoot":""}