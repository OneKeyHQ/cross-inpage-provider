{"version":3,"file":"static/chunks/5792.30c250d7dd32304a.js","mappings":"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","sources":["webpack://_N_E/./components/DAppList.tsx","webpack://_N_E/./components/InfoLayout.tsx","webpack://_N_E/./components/chains/ton/dapps.config.ts","webpack://_N_E/./components/chains/ton/params.ts","webpack://_N_E/./lib/localStorageForGithubPages.ts","webpack://_N_E/./components/chains/ton/TonProofDemoApi.ts","webpack://_N_E/./components/chains/ton/example.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport { Card, CardContent, CardTitle } from './ui/card';\n\nexport type Dapp = {\n  name: string;\n  url: string;\n};\n\nexport type DappListProps = {\n  dapps: Dapp[];\n};\n\nconst DappList: React.FC<DappListProps> = ({ dapps }) => {\n  return (\n    <Card>\n      <CardTitle className=\"text-xl\">Dapp Bookmarks</CardTitle>\n      <CardContent className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3\">\n        {dapps.map((dapp, index) => (\n          <div key={index} className=\"border p-2 rounded-lg shadow-sm hover:shadow-md\">\n            <Link href={dapp.url} legacyBehavior>\n              <a className=\"text-blue-500 hover:underline text-lg block\">{dapp.name} →</a>\n            </Link>\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default DappList;\n","import { Card, CardContent, CardHeader } from './ui/card';\n\nexport type InfoLayoutProps = {\n  title?: string;\n  children?: React.ReactNode;\n};\n\nexport default function InfoLayout({ title, children }: InfoLayoutProps) {\n  return (\n    <Card>\n      {title && <CardHeader className=\"font-medium\">{title}</CardHeader>}\n      <CardContent className=\"flex flex-col flex-wrap gap-3 break-all\">{children}</CardContent>\n    </Card>\n  );\n}\n","export const dapps = [\n  {\n    name: 'Ton 官方 Demo',\n    url: 'https://ton-connect.github.io/demo-dapp-with-react-ui/',\n  },\n  {\n    name: 'TonStakers',\n    url: 'https://app.tonstakers.com',\n  },\n  {\n    name: 'GetGems',\n    url: 'https://getgems.io',\n  },\n  {\n    name: 'Ston Swap',\n    url: 'https://app.ston.fi',\n  },\n];\n","/* eslint-disable @typescript-eslint/no-var-requires */\nconst { Address, beginCell } = require('@ton/core');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst { TonClient, JettonMaster } = require('@ton/ton');\n\nconst client = new TonClient({\n  endpoint: 'https://toncenter.com/api/v2/jsonRPC',\n});\nasync function getJettonWalletAddress(jettonMasterAddressStr: string, userAddressStr: string) {\n  try {\n    const jettonMasterAddress = Address.parse(jettonMasterAddressStr);\n    const userAddress = Address.parse(userAddressStr);\n\n    const jettonMaster = client.open(JettonMaster.create(jettonMasterAddress));\n    const walletAddress = await jettonMaster.getWalletAddress(userAddress);\n\n    if (!walletAddress) {\n      throw new Error('Wallet address is empty');\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    console.log('Wallet Address:', walletAddress.toString());\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return walletAddress.toString();\n  } catch (error) {\n    console.error('Error in getJettonWalletAddress:', error);\n    return null; // 或者根据需要返回其他值\n  }\n}\n\nexport default {\n  sendTransaction: (to: string) => {\n    let bounceableAddress = '';\n    let nonBounceableAddress = '';\n    let rawAddress = '';\n\n    try {\n      const address = Address.parse(to ?? '');\n      bounceableAddress = address.toString({ bounceable: true });\n      nonBounceableAddress = address.toString({ bounceable: false });\n      rawAddress = address.toRawString();\n    } catch (error) {\n      // ignore\n    }\n\n    return [\n      {\n        id: 'sendTransaction-native',\n        name: 'Native',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-two',\n        name: 'Native 2 Message',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-four',\n        name: 'Native 4 Message',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-validUntil-less-5-minutes',\n        name: 'Native validUntil less 5 minutes',\n        value: JSON.stringify({\n          validUntil: Math.floor(Date.now() / 1000) + 60 * 3,\n          messages: [\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-validUntil-more-5-minutes',\n        name: 'Native validUntil more than 5 minutes',\n        value: JSON.stringify({\n          validUntil: Math.floor(Date.now() / 1000) + 60 * 10,\n          messages: [\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-bounceable-address-type',\n        name: 'Native bounceable address type',\n        value: JSON.stringify({\n          messages: [\n            {\n              to: bounceableAddress,\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-non-bounceable-address-type',\n        name: 'Native non-bounceable address type',\n        value: JSON.stringify({\n          messages: [\n            {\n              to: nonBounceableAddress,\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-stateInit',\n        name: 'Native with stateInit',\n        value: JSON.stringify({\n          messages: [\n            {\n              address:to,\n              amount: '20000000', //Toncoin in nanotons\n              stateInit:\n                'te6cckEBBAEAOgACATQCAQAAART/APSkE/S88sgLAwBI0wHQ0wMBcbCRW+D6QDBwgBDIywVYzxYh+gLLagHPFsmAQPsAlxCarA==',\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-payload',\n        name: 'Native with payload',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '20000000', //Toncoin in nanotons\n              payload: 'te6ccsEBAQEADAAMABQAAAAASGVsbG8hCaTc/g==',\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-payload-and-stateInit',\n        name: 'Native with payload and stateInit',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '5000000',\n              stateInit:\n                'te6cckEBBAEAOgACATQCAQAAART/APSkE/S88sgLAwBI0wHQ0wMBcbCRW+D6QDBwgBDIywVYzxYh+gLLagHPFsmAQPsAlxCarA==',\n              payload: 'te6ccsEBAQEADAAMABQAAAAASGVsbG8hCaTc/g==',\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-network',\n        name: 'Native with network',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n          network: '-239',\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-from-bounceable-address',\n        name: 'Native with from bounceable address',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n          from: bounceableAddress,\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-from-non-bounceable-address',\n        name: 'Native with from non-bounceable address',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n          from: nonBounceableAddress,\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-from-raw-address',\n        name: 'Native with from raw address',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n          from: rawAddress,\n        }),\n      },\n    ];\n  },\n  sendTransactionWithError: (to: string) => {\n    let bounceableAddress = '';\n    let nonBounceableAddress = '';\n    let rawAddress = '';\n\n    try {\n      const address = Address.parse(to);\n      bounceableAddress = address.toString({ bounceable: true });\n      nonBounceableAddress = address.toString({ bounceable: false });\n      rawAddress = address.toRawString();\n    } catch (error) {\n      // ignore\n    }\n    return [\n      {\n        id: 'sendTransaction-native',\n        name: 'Empty Message',\n        value: JSON.stringify({\n          messages: [],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-invalid-message-1',\n        name: '1 message is valid and 1 is invalid',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n            {\n              address: to, // destination address\n              amount: '50000000000000000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-validUntil-outdated',\n        name: 'Native validUntil outdated',\n        value: JSON.stringify({\n          validUntil: Math.floor(Date.now() / 1000) - 10,\n          messages: [\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-validUntil-NaN',\n        name: 'Native validUntil NaN',\n        value: JSON.stringify({\n          validUntil: NaN,\n          messages: [\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-validUntil-null',\n        name: 'Native validUntil null',\n        value: JSON.stringify({\n          validUntil: null,\n          messages: [\n            {\n              address: to, // destination address\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-without-address',\n        name: 'Native without address',\n        value: JSON.stringify({\n          validUntil: null,\n          messages: [\n            {\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-raw-address-type',\n        name: 'Native raw address type',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: rawAddress,\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      // invalid address (2nd letter omitted)\n      {\n        id: 'sendTransaction-native-invalid-address',\n        name: 'Native invalid address',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to?.replace('UQC', 'UC'),\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-max-amount',\n        name: 'Native invalid address',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '500000000000000', //Toncoin in nanotons\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-without-amount',\n        name: 'Native without amount',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-amount-integer',\n        name: 'Native without amount',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: 20000,\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-stateInit-error',\n        name: 'Native with stateInit error',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '20000000', //Toncoin in nanotons\n              stateInit:\n                'te7cckEBBAEAOgACATQCAQAAART/APSkE/S88sgLAwBI0wHQ0wMBcbCRW+D6QDBwgBDIywVYzxYh+gLLagHPFsmAQPsAlxCarA==',\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-payload-error',\n        name: 'Native with payload error',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '20000000', //Toncoin in nanotons\n              payload: 'te7ccsEBAQEADAAMABQAAAAASGVsbG8hCaTc/g==',\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-network-error',\n        name: 'Native with network error',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n          network: '-3',\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-network-integer-error',\n        name: 'Native with network integer error',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n          network: -239,\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-from-address-error',\n        name: 'Native with from bounceable address error',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n          from: to?.replace('UQC', 'UC'),\n        }),\n      },\n      {\n        id: 'sendTransaction-native-with-from-address-not-match',\n        name: 'Native with from address not match',\n        value: JSON.stringify({\n          messages: [\n            {\n              address: to,\n              amount: '20000000', //Toncoin in nanotons\n            },\n          ],\n          from: 'EQCKWpx7cNMpvmcN5ObM5lLUZHZRFKqYA4xmw9jOry0ZsF9M',\n        }),\n      },\n    ];\n  },\n  sendTokenTransaction: async (address: string) => {\n    // 定义支持的代币主合约地址\n    const jettonMasters = {\n      SCALE: 'EQBlqsm144Dq6SjbPI4jjZvA1hqTIP3CvHovbIfW_t-SCALE',\n      USDT: 'EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs',\n    };\n\n    // 获取所有代币的钱包地址\n    const scaleWallet = await getJettonWalletAddress(jettonMasters.SCALE, address);\n    const usdtWallet = await getJettonWalletAddress(jettonMasters.USDT, address);\n\n    if (!scaleWallet || !usdtWallet) {\n      throw new Error('无法获取代币钱包地址');\n    }\n\n    return [\n      {\n        id: 'sendToken-scale',\n        name: 'Send SCALE Token',\n        value: JSON.stringify({\n          validUntil: Math.floor(Date.now() / 1000) + 360,\n          messages: [\n            {\n              address: scaleWallet,\n              amount: '150000000',\n              payload: beginCell()\n                .storeUint(0xf8a7ea5, 32)\n                .storeUint(0, 64)\n                .storeCoins(10000000000)\n                .storeAddress(Address.parse(address))\n                .storeAddress(Address.parse(address))\n                .storeCoins(0)\n                .storeBit(0)\n                .storeBit(0)\n                .storeRef(beginCell().endCell())\n                .endCell()\n                .toBoc()\n                .toString('base64'),\n              stateInit: null,\n            },\n          ],\n        }),\n      },\n      {\n        id: 'sendToken-usdt',\n        name: 'Send USDT Token',\n        value: JSON.stringify({\n          validUntil: Math.floor(Date.now() / 1000) + 360,\n          messages: [\n            {\n              address: usdtWallet,\n              amount: '150000000',\n              payload: beginCell()\n                .storeUint(0xf8a7ea5, 32)\n                .storeUint(0, 64)\n                .storeCoins(100000)\n                .storeAddress(Address.parse(address))\n                .storeAddress(Address.parse(address))\n                .storeCoins(0)\n                .storeBit(0)\n                .storeBit(0)\n                .storeRef(beginCell().endCell())\n                .endCell()\n                .toBoc()\n                .toString('base64'),\n              stateInit: null,\n            },\n          ],\n        }),\n      },\n    ];\n  },\n};\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nconst separator = `${window.location.pathname.replace(/\\/+$/, '')}:`;\n\nconst setItem = localStorage.setItem;\nlocalStorage.constructor.prototype.setItem = (key: string, value: string) =>\n  setItem.apply(localStorage, [separator + key, value]);\nlocalStorage.setItem = (key: string, value: string) =>\n  setItem.apply(localStorage, [separator + key, value]);\n\nconst getItem = localStorage.getItem;\nlocalStorage.constructor.prototype.getItem = (key: string) =>\n  getItem.apply(localStorage, [separator + key]);\nlocalStorage.getItem = (key: string) => getItem.apply(localStorage, [separator + key]);\n\nconst removeItem = localStorage.removeItem;\nlocalStorage.constructor.prototype.removeItem = (key: string) =>\n  removeItem.apply(localStorage, [separator + key]);\nlocalStorage.removeItem = (key: string) => removeItem.apply(localStorage, [separator + key]);\n\nexport {};\n","/* eslint-disable @typescript-eslint/no-unsafe-argument */\nimport {\n  Account,\n  ConnectAdditionalRequest,\n  TonProofItemReplySuccess,\n} from '@tonconnect/ui-react';\nimport '../../../lib/localStorageForGithubPages';\n\nclass TonProofDemoApiService {\n  private localStorageKey = 'demo-api-access-token';\n\n  private host = window.location.origin;\n\n  public accessToken: string | null = null;\n\n  public readonly refreshIntervalMs = 9 * 60 * 1000;\n\n  constructor() {\n    this.accessToken = localStorage.getItem(this.localStorageKey);\n\n    if (!this.accessToken) {\n      void this.generatePayload();\n    }\n  }\n\n  async generatePayload(): Promise<ConnectAdditionalRequest | null> {\n    try {\n      const response = await (\n        await fetch(`${this.host}/api/generate_payload`, {\n          method: 'POST',\n        })\n      ).json();\n      return { tonProof: response.payload as string };\n    } catch {\n      return null;\n    }\n  }\n\n  async checkProof(proof: TonProofItemReplySuccess['proof'], account: Account): Promise<boolean> {\n    try {\n      const reqBody = {\n        address: account.address,\n        network: account.chain,\n        public_key: account.publicKey,\n        proof: {\n          ...proof,\n          state_init: account.walletStateInit,\n        },\n      };\n\n      const response = await (\n        await fetch(`${this.host}/api/check_proof`, {\n          method: 'POST',\n          body: JSON.stringify(reqBody),\n        })\n      ).json();\n\n      if (response?.token) {\n        localStorage.setItem(this.localStorageKey, response.token);\n        this.accessToken = response.token;\n        return true;\n      }\n      return false;\n    } catch (e) {\n      console.log('checkProof error:', e);\n      throw e;\n    }\n  }\n\n  async getAccountInfo(account: Account) {\n    const response = await (\n      await fetch(`${this.host}/api/get_account_info`, {\n        headers: {\n          Authorization: `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json',\n        },\n      })\n    ).json();\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    return response as {};\n  }\n\n  reset() {\n    this.accessToken = null;\n    localStorage.removeItem(this.localStorageKey);\n    void this.generatePayload();\n  }\n}\n\nexport const TonProofDemoApi = new TonProofDemoApiService();\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-return */\nimport { dapps } from './dapps.config';\nimport { ApiPayload, ApiGroup } from '../../ApiActuator';\nimport DappList from '../../DAppList';\nimport {\n  TonConnectButton,\n  TonConnectUIProvider,\n  useTonAddress,\n  useTonConnectUI,\n  useTonWallet,\n} from '@tonconnect/ui-react';\nimport InfoLayout from '../../InfoLayout';\nimport params from './params';\nimport { TonProofDemoApi } from './TonProofDemoApi';\nimport { Switch } from '../../ui/switch';\nimport { useToast } from '../../ui/use-toast';\nimport { useState, useEffect } from 'react';\nconst TON_SCAM_DAPP_ENABLE_KEY = 'ton_scam_dapp_enable';\n\ntype IPresupposeParam = {\n  id: string;\n  name: string;\n  value: string;\n  description?: string;\n};\n\nexport function Example() {\n  const userFriendlyAddress = useTonAddress();\n  const rawAddress = useTonAddress(false);\n  const wallet = useTonWallet();\n  const [tonConnectUI, setOptions] = useTonConnectUI();\n  const { toast } = useToast();\n  const [tokenParams, setTokenParams] = useState<IPresupposeParam[]>([]);\n\n  useEffect(() => {\n    async function fetchTokenParams() {\n      if (userFriendlyAddress) {\n        const result = await params.sendTokenTransaction(userFriendlyAddress);\n        setTokenParams(result);\n      }\n    }\n    void fetchTokenParams();\n  }, [userFriendlyAddress]);\n\n  const scamEnable = localStorage.getItem(TON_SCAM_DAPP_ENABLE_KEY);\n\n  return (\n    <>\n      <TonConnectButton />\n\n      <InfoLayout title=\"Base Info\">\n        <div>\n          <p>伪装欺诈模式</p>\n          <Switch\n            checked={!!scamEnable}\n            onCheckedChange={async (checked) => {\n              if (tonConnectUI.connected) {\n                await tonConnectUI?.disconnect();\n                TonProofDemoApi.reset();\n              }\n              if (checked) {\n                localStorage.setItem(TON_SCAM_DAPP_ENABLE_KEY, 'true');\n              } else {\n                localStorage.removeItem(TON_SCAM_DAPP_ENABLE_KEY);\n              }\n              window.location.reload();\n            }}\n          />\n        </div>\n        {userFriendlyAddress && <p>userFriendlyAddress: {userFriendlyAddress}</p>}\n        {rawAddress && <p>rawAddress: {rawAddress}</p>}\n        {wallet?.account && <p>Wallet Account PublicKey: {wallet?.account.publicKey}</p>}\n        {wallet?.account && <p>Wallet Account Chain: {wallet?.account.chain}</p>}\n        {wallet?.account && (\n          <p>Wallet Account WalletStateInit: {wallet?.account.walletStateInit}</p>\n        )}\n\n        {wallet?.device?.appName && <p>Wallet AppName: {wallet?.device?.appName}</p>}\n        {wallet?.device?.appVersion && <p>Wallet appVersion: {wallet?.device?.appVersion}</p>}\n        {wallet?.device?.platform && <p>Wallet platform: {wallet?.device?.platform}</p>}\n        {wallet?.device?.features && (\n          <p>Wallet features: {JSON.stringify(wallet?.device?.features)}</p>\n        )}\n      </InfoLayout>\n\n      <ApiGroup title=\"Sign Proof 按步骤作\">\n        <ApiPayload\n          title=\"步骤1: Loading Proof Data\"\n          description=\"步骤1: 断开连接，生成 Proof Payload\"\n          allowCallWithoutProvider={true}\n          onExecute={async (request: string) => {\n            // 断开连接，重置 accessToken\n            if (tonConnectUI.connected) {\n              await tonConnectUI?.disconnect();\n              TonProofDemoApi.reset();\n            }\n\n            // 置 loading 状态\n            tonConnectUI.setConnectRequestParameters({ state: 'loading' });\n\n            const payload = await TonProofDemoApi.generatePayload();\n            if (payload) {\n              tonConnectUI.setConnectRequestParameters({ state: 'ready', value: payload });\n            } else {\n              tonConnectUI.setConnectRequestParameters(null);\n            }\n\n            return payload;\n          }}\n        />\n        <ApiPayload\n          title=\"步骤2: 连接 Wallet\"\n          description=\"步骤2: 连接 Wallet\"\n          allowCallWithoutProvider={true}\n          onExecute={async (request: string) => {\n            void tonConnectUI.openModal();\n            return Promise.resolve('success');\n          }}\n          onValidate={async (request: string, response: string) => {\n            if (wallet.connectItems?.tonProof && 'proof' in wallet.connectItems.tonProof) {\n              try {\n                const result = await TonProofDemoApi.checkProof(\n                  wallet.connectItems.tonProof.proof,\n                  wallet.account,\n                );\n\n                if (!result) {\n                  toast({\n                    variant: 'destructive',\n                    title: 'Proof 签名验证失败',\n                  });\n                }\n                if (result && scamEnable) {\n                  toast({\n                    title: '当前处于伪装欺诈模式，不应该成功连接账户',\n                    variant: 'destructive',\n                  });\n                }\n\n                return JSON.stringify({\n                  success: result,\n                  proof: wallet.connectItems.tonProof.proof,\n                });\n              } catch (e: any) {\n                return JSON.stringify({\n                  success: false,\n                  errorMessage: e?.message,\n                  proof: null,\n                });\n              }\n            }\n            return Promise.resolve('error');\n          }}\n        />\n        <ApiPayload\n          title=\"步骤3: 测试获取 Account Info\"\n          description=\"步骤3: 测试获取 Account Info\"\n          allowCallWithoutProvider={!!wallet}\n          onExecute={async (request: string) => {\n            const response = await TonProofDemoApi.getAccountInfo(wallet.account);\n            return response;\n          }}\n        />\n      </ApiGroup>\n\n      <ApiGroup title=\"Send Transaction\">\n        <ApiPayload\n          title=\"sendTransaction\"\n          description=\"转账普通 Native\"\n          allowCallWithoutProvider={!!userFriendlyAddress}\n          presupposeParams={params.sendTransaction(userFriendlyAddress || '')}\n          onExecute={async (request: string) => {\n            const res = await tonConnectUI?.sendTransaction(JSON.parse(request));\n            return JSON.stringify(res);\n          }}\n        />\n\n        <ApiPayload\n          title=\"sendTransaction\"\n          description=\"错误例子测试，这个用例所有请求都应该报错\"\n          allowCallWithoutProvider={!!userFriendlyAddress}\n          presupposeParams={params.sendTransactionWithError(userFriendlyAddress || '')}\n          onExecute={async (request: string) => {\n            const res = await tonConnectUI?.sendTransaction(JSON.parse(request));\n            return JSON.stringify(res);\n          }}\n        />\n      </ApiGroup>\n\n      <ApiGroup title=\"Send Transaction\">\n        <ApiPayload\n          title=\"Send Jetton\"\n          description=\"代币转账\"\n          allowCallWithoutProvider={!!userFriendlyAddress}\n          presupposeParams={tokenParams}\n          onExecute={async (request: string) => {\n            const res = await tonConnectUI?.sendTransaction(JSON.parse(request));\n            return JSON.stringify(res);\n          }}\n        />\n      </ApiGroup>\n\n      <ApiGroup title=\"Exotic Cell Transactions\">\n        <ApiPayload\n          title=\"Merkle Proof Transaction\"\n          allowCallWithoutProvider={!!userFriendlyAddress}\n          presupposeParams={[\n            {\n              id: 'merkleProof',\n              name: 'Merkle Proof Transaction',\n              value: JSON.stringify({\n                validUntil: Date.now() + 900000,\n                messages: [\n                  {\n                    address: userFriendlyAddress || '',\n                    amount: '100000', // 0.0001 TON\n                    payload: {\n                      type: 'merkle-proof',\n                      hash: 'te6ccgEBAQEAJgAASEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==',\n                      depth: 32,\n                      merkleProof:\n                        'te6ccgEBAQEAJgAASEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==',\n                    },\n                  },\n                ],\n              }),\n            },\n            {\n              id: 'overstringCell',\n              name: 'Overstring Cell Transaction',\n              value: JSON.stringify({\n                validUntil: Date.now() + 900000,\n                messages: [\n                  {\n                    address: userFriendlyAddress || '',\n                    amount: '100000', // 0.0001 TON\n                    payload: {\n                      type: 'overstring',\n                      data: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.',\n                    },\n                  },\n                ],\n              }),\n            },\n          ]}\n          onExecute={async (request: string) => {\n            try {\n              const res = await tonConnectUI?.sendTransaction(JSON.parse(request));\n              if (!res) {\n                return JSON.stringify({ success: true, message: 'Transaction sent successfully' });\n              }\n              return JSON.stringify(res);\n            } catch (error: any) {\n              // 如果错误中包含特定字符串，说明交易可能已经成功\n              if (error?.message?.includes('[object Object]')) {\n                return JSON.stringify({ success: true, message: 'Transaction likely succeeded' });\n              }\n              return JSON.stringify({ error: error.message });\n            }\n          }}\n        />\n\n        <ApiPayload\n          title=\"Merkle Update Transaction\"\n          allowCallWithoutProvider={!!userFriendlyAddress}\n          presupposeParams={[\n            {\n              id: 'merkleUpdate',\n              name: 'Merkle Update Transaction',\n              value: JSON.stringify({\n                validUntil: Date.now() + 900000,\n                messages: [\n                  {\n                    address: userFriendlyAddress || '',\n                    amount: '100000', // 0.0001 TON\n                    payload: {\n                      type: 'merkle-update',\n                      oldHash: 'te6ccgEBAQEAJgAASEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==',\n                      newHash: 'te6ccgEBAQEAJgAASEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==',\n                      depth: 32,\n                    },\n                  },\n                ],\n              }),\n            },\n            {\n              id: 'dictionaryCell',\n              name: 'Dictionary Cell Transaction',\n              value: JSON.stringify({\n                validUntil: Date.now() + 900000,\n                messages: [\n                  {\n                    address: userFriendlyAddress || '',\n                    amount: '100000', // 0.0001 TON\n                    payload: {\n                      type: 'dictionary',\n                      keySize: 256,\n                      data: {\n                        '0': 'te6ccgEBAQEAJgAASEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==',\n                        '1': 'te6ccgEBAQEAJgAASEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==',\n                      },\n                    },\n                  },\n                ],\n              }),\n            },\n          ]}\n          onExecute={async (request: string) => {\n            try {\n              const res = await tonConnectUI?.sendTransaction(JSON.parse(request));\n              return JSON.stringify(res);\n            } catch (error: any) {\n              return JSON.stringify({ error: error.message });\n            }\n          }}\n        />\n      </ApiGroup>\n      <DappList dapps={dapps} />\n    </>\n  );\n}\n\nexport default function App() {\n  const enable = localStorage.getItem(TON_SCAM_DAPP_ENABLE_KEY);\n\n  const manifestUrl = enable\n    ? 'https://dapp-example.onekeytest.com/scam-tonconnect-manifest.json'\n    : 'https://dapp-example.onekeytest.com/tonconnect-manifest.json';\n\n  return (\n    <>\n      <TonConnectUIProvider manifestUrl={manifestUrl} >\n        {/* <TonConnectUIProvider manifestUrl=\"https://ton-connect.github.io/demo-dapp-with-react-ui/tonconnect-manifest.json\"> */}\n        <Example />\n      </TonConnectUIProvider>\n    </>\n  );\n}\n"],"names":["__webpack_exports__","Z","dapps","param","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Card","jsx","CardTitle","className","CardContent","map","dapp","index","div","Link","href","url","legacyBehavior","a","name","InfoLayout","title","children","CardHeader","Address","beginCell","require","TonClient","JettonMaster","client","endpoint","getJettonWalletAddress","jettonMasterAddressStr","userAddressStr","jettonMasterAddress","parse","userAddress","jettonMaster","open","create","walletAddress","getWalletAddress","console","log","toString","error","params","sendTransaction","bounceableAddress","nonBounceableAddress","rawAddress","address","to","bounceable","toRawString","id","value","JSON","stringify","messages","amount","validUntil","Math","floor","Date","now","stateInit","payload","network","from","sendTransactionWithError","NaN","replace","sendTokenTransaction","jettonMasters","SCALE","USDT","scaleWallet","usdtWallet","storeUint","storeCoins","storeAddress","storeBit","storeRef","endCell","toBoc","separator","concat","window","location","pathname","setItem","localStorage","constructor","prototype","key","apply","getItem","removeItem","TonProofDemoApi","generatePayload","response","fetch","host","method","json","tonProof","e","checkProof","proof","account","reqBody","chain","public_key","publicKey","state_init","walletStateInit","body","token","localStorageKey","accessToken","getAccountInfo","headers","Authorization","reset","origin","refreshIntervalMs","TON_SCAM_DAPP_ENABLE_KEY","Example","wallet","userFriendlyAddress","useTonAddress","useTonWallet","tonConnectUI","setOptions","useTonConnectUI","toast","useToast","tokenParams","setTokenParams","useState","useEffect","fetchTokenParams","result","scamEnable","jsx_runtime","Fragment","TonConnectButton","p","Switch","checked","onCheckedChange","connected","disconnect","reload","device","appName","appVersion","platform","features","ApiGroup","ApiPayload","description","allowCallWithoutProvider","onExecute","request","setConnectRequestParameters","state","openModal","Promise","resolve","onValidate","connectItems","variant","success","errorMessage","message","presupposeParams","res","type","hash","depth","merkleProof","data","includes","oldHash","newHash","keySize","DappList","App","enable","TonConnectUIProvider","manifestUrl"],"sourceRoot":""}