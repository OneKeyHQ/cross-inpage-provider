{"version":3,"file":"static/chunks/3020.59dd3dd3587d587e.js","mappings":"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","sources":["webpack://_N_E/./components/InfoLayout.tsx","webpack://_N_E/./components/chains/babylon/dapps.config.ts","webpack://_N_E/./components/chains/babylon/example.tsx","webpack://_N_E/./components/chains/btcBabylon/params.ts","webpack://_N_E/./components/chains/cosmosBabylon/params.ts","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/bn.js/lib|buffer","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/libsodium-sumo/dist/modules-sumo|fs","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/libsodium-sumo/dist/modules-sumo|path","webpack://_N_E/<anon>"],"sourcesContent":["import { Card, CardContent, CardHeader } from './ui/card';\n\nexport type InfoLayoutProps = {\n  title?: string;\n  children?: React.ReactNode;\n};\n\nexport default function InfoLayout({ title, children }: InfoLayoutProps) {\n  return (\n    <Card>\n      {title && <CardHeader className=\"font-medium\">{title}</CardHeader>}\n      <CardContent className=\"flex flex-col flex-wrap gap-3 break-all\">{children}</CardContent>\n    </Card>\n  );\n}\n","export const dapps = [\n  {\n    name: 'Osmosis',\n    url: 'https://app.osmosis.zone/',\n  },\n  {\n    name: 'JunoSwap',\n    url: 'https://junoswap.com/',\n  },\n];\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unnecessary-type-assertion, @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-return */\nimport { dapps } from './dapps.config';\nimport ConnectButton from '../../connect/ConnectButton';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { hexToBytes } from '@noble/hashes/utils';\nimport { SignMode } from 'cosmjs-types/cosmos/tx/signing/v1beta1/signing';\nimport { get, isEmpty } from 'lodash-es';\n\nimport {\n  TomoContextProvider,\n  useTomoModalControl,\n  useTomoProviders,\n  useTomoWalletConnect,\n  useTomoWalletState,\n  useWalletList,\n} from '@tomo-inc/wallet-connect-sdk';\n\nimport * as bitcoin from 'bitcoinjs-lib';\nimport { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx';\nimport Long from 'long';\nimport { MsgSend } from 'cosmjs-types/cosmos/bank/v1beta1/tx';\nimport { PubKey } from 'cosmjs-types/cosmos/crypto/ed25519/keys';\nimport { Any } from 'cosmjs-types/google/protobuf/any';\nimport { AuthInfo, Fee, SignerInfo, Tx, TxBody, TxRaw } from 'cosmjs-types/cosmos/tx/v1beta1/tx';\n\nimport { IProviderInfo } from './types';\nimport { ApiPayload, ApiGroup } from '../../ApiActuator';\nimport { useWallet } from '../../connect/WalletContext';\nimport type { IKnownWallet } from '../../connect/types';\nimport DappList from '../../DAppList';\nimport InfoLayout from '../../InfoLayout';\nimport paramsCosmos from '../cosmosBabylon/params';\nimport paramsBtc from '../btcBabylon/params';\nimport { toast } from '../../ui/use-toast';\nimport { Button } from '../../ui/button';\n\nimport '@tomo-inc/wallet-connect-sdk/style.css';\nimport { verifyMessage } from '@unisat/wallet-utils';\nimport { Verifier } from 'bip322-js';\nimport { Input } from '../../ui/input';\nimport { createPSBT } from '../btc/utils';\n\nfunction removeNull(obj: any): any {\n  if (obj !== null && typeof obj === 'object') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return Object.entries(obj)\n      .filter(([, v]) => v != null)\n      .reduce(\n        (acc, [k, v]) => ({\n          ...acc,\n          [k]: v === Object(v) && !Array.isArray(v) ? removeNull(v) : v,\n        }),\n        {},\n      );\n  }\n\n  return obj;\n}\n\nfunction Example() {\n  const tomoModal = useTomoModalControl();\n  const tomoWalletConnect = useTomoWalletConnect();\n\n  // Check wallet connection status\n  const tomowalletState = useTomoWalletState();\n  const connected = tomowalletState.isConnected;\n\n  // Check all the supported wallets\n  const supportedWallets = useWalletList();\n\n  // Get provider\n  const providers = useTomoProviders();\n  console.log('providers', providers);\n  const providerBitcoin = providers.bitcoinProvider ?? undefined;\n  const providerCosmos = providers.cosmosProvider ?? undefined;\n\n  console.log('providerBitcoin', providerBitcoin);\n  console.log('providerCosmos', providerCosmos);\n\n  const walletsRef = useRef<IProviderInfo[]>([\n    {\n      uuid: 'bitcoin',\n      name: 'BTC',\n      inject: 'bitcoin',\n    },\n    {\n      uuid: 'cosmos',\n      name: 'Cosmos',\n      inject: 'cosmos',\n    },\n  ]);\n\n  const { setProvider, setAccount, account } = useWallet<'bitcoin' | 'cosmos'>();\n\n  const onConnectWallet = useCallback(\n    async (selectedWallet: IKnownWallet) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const providerDetail = walletsRef.current?.find((w) => w.uuid === selectedWallet.id);\n      if (!providerDetail) {\n        return Promise.reject('Wallet not found');\n      }\n\n      const result = await tomoModal.open(providerDetail.inject as 'bitcoin' | 'cosmos');\n      console.log('xxxx', result);\n\n      const connected = result.walletState.isConnected;\n      let address = undefined;\n      if (result.walletState.cosmos.connected) {\n        address = result.walletState.cosmos.address;\n      }\n      if (result.walletState.bitcoin.connected) {\n        address = result.walletState.bitcoin.address;\n      }\n\n      if (connected && !address) {\n        toast({\n          title: 'Wallet not found',\n          description: 'Please install the wallet extension',\n        });\n        return;\n      }\n\n      return {\n        provider: providerDetail.inject,\n        address: address ?? '',\n      };\n    },\n    [tomoModal],\n  );\n\n  useEffect(() => {\n    if (tomowalletState?.cosmos?.connected) {\n      setProvider('cosmos');\n      setAccount({\n        address: tomowalletState.cosmos.address,\n        chainId: tomowalletState.cosmos.chainId.toString(),\n      });\n    }\n    if (tomowalletState?.bitcoin?.connected) {\n      setProvider('bitcoin');\n      setAccount({\n        address: tomowalletState.bitcoin.address,\n        chainId: tomowalletState.bitcoin.chainId.toString(),\n      });\n    }\n  }, [setAccount, setProvider, tomowalletState]);\n\n  return (\n    <>\n      <InfoLayout title=\"Base Info\">\n        <div>\n          <p>btc network: {tomowalletState?.bitcoin?.network}</p>\n          <p>btc address: {tomowalletState?.bitcoin?.address}</p>\n          <p>btc chainId: {tomowalletState?.bitcoin?.chainId}</p>\n          <p>btc chainType: {tomowalletState?.bitcoin?.chainType}</p>\n          <p>btc walletId: {tomowalletState?.bitcoin?.walletId}</p>\n          <br />\n          <p>cosmos network: {tomowalletState?.cosmos?.network}</p>\n          <p>cosmos address: {tomowalletState?.cosmos?.address}</p>\n          <p>cosmos chainId: {tomowalletState?.cosmos?.chainId}</p>\n          <p>cosmos chainType: {tomowalletState?.cosmos?.chainType}</p>\n          <p>cosmos walletId: {tomowalletState?.cosmos?.walletId}</p>\n        </div>\n      </InfoLayout>\n\n      <ConnectButton\n        fetchWallets={() => {\n          return Promise.resolve(\n            walletsRef.current.map((wallet) => {\n              return {\n                id: wallet.uuid,\n                name: wallet.inject ? wallet.name : `${wallet.name}`,\n              };\n            }),\n          );\n        }}\n        onConnect={onConnectWallet}\n        onDisconnect={tomoWalletConnect.disconnect}\n      />\n      <ApiGroup title=\"BTC Basics\">\n        <ApiPayload\n          title=\"connectWallet\"\n          description=\"connectWallet\"\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (_request: string) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            const res = await providerBitcoin?.connectWallet();\n            return JSON.stringify(res);\n          }}\n        />\n        <ApiPayload\n          title=\"getKey\"\n          description=\"获取账户权限\"\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (_request: string) => {\n            return await providerBitcoin?.getPublicKeyHex();\n          }}\n        />\n        <ApiPayload\n          title=\"getAddress\"\n          description=\"获取账户地址\"\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (_request: string) => {\n            return await providerBitcoin?.getAddress();\n          }}\n        />\n        <ApiPayload\n          title=\"getNetwork\"\n          description=\"获取账户网络\"\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (_request: string) => {\n            return await providerBitcoin?.getNetwork();\n          }}\n        />\n        <ApiPayload\n          title=\"getNetworkFees\"\n          description=\"获取网络费用\"\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (_request: string) => {\n            return await providerBitcoin?.getNetworkFees();\n          }}\n        />\n        <ApiPayload\n          title=\"getWalletProviderName\"\n          description=\"获取钱包提供者名称\"\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (_request: string) => {\n            return await providerBitcoin?.getWalletProviderName();\n          }}\n        />\n        <ApiPayload\n          title=\"getWalletProviderIcon\"\n          description=\"获取钱包提供者图标\"\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (_request: string) => {\n            return await providerBitcoin?.getWalletProviderIcon();\n          }}\n        />\n      </ApiGroup>\n\n      <ApiGroup title=\"Cosmos Basics\">\n        <ApiPayload\n          title=\"connectWallet\"\n          description=\"connectWallet\"\n          allowCallWithoutProvider={!!providerCosmos}\n          onExecute={async (_request: string) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            const res = await providerCosmos?.connectWallet();\n            return JSON.stringify(res);\n          }}\n        />\n        <ApiPayload\n          title=\"getKey\"\n          description=\"获取账户权限\"\n          allowCallWithoutProvider={!!providerCosmos}\n          onExecute={async (_request: string) => {\n            return await providerCosmos?.getPublicKeyHex();\n          }}\n        />\n        <ApiPayload\n          title=\"getAddress\"\n          description=\"获取账户地址\"\n          allowCallWithoutProvider={!!providerCosmos}\n          onExecute={async (_request: string) => {\n            return await providerCosmos?.getAddress();\n          }}\n        />\n        <ApiPayload\n          title=\"getNetwork\"\n          description=\"获取账户网络\"\n          allowCallWithoutProvider={!!providerCosmos}\n          onExecute={async (_request: string) => {\n            return await providerCosmos?.getNetwork();\n          }}\n        />\n        <ApiPayload\n          title=\"getWalletProviderName\"\n          description=\"获取钱包提供者名称\"\n          allowCallWithoutProvider={!!providerCosmos}\n          onExecute={async (_request: string) => {\n            return await providerCosmos?.getWalletProviderName();\n          }}\n        />\n        <ApiPayload\n          title=\"getWalletProviderIcon\"\n          description=\"获取钱包提供者图标\"\n          allowCallWithoutProvider={!!providerCosmos}\n          onExecute={async (_request: string) => {\n            return await providerCosmos?.getWalletProviderIcon();\n          }}\n        />\n      </ApiGroup>\n\n      <ApiGroup title=\"BTC Sign Message\">\n        <ApiPayload\n          title=\"SignMessage\"\n          description=\"签名消息\"\n          presupposeParams={paramsBtc.signMessage}\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (request: string) => {\n            const obj = JSON.parse(request) as { msg: string; type: 'ecdsa' | 'bip322-simple' };\n            const res = await providerBitcoin?.signMessage(obj.msg, obj.type);\n            return res;\n          }}\n          onValidate={async (request: string, response: string) => {\n            const obj = JSON.parse(request) as { msg: string; type: string | undefined };\n            const publicKey = await providerBitcoin?.getPublicKeyHex();\n\n            if (!obj.type || obj.type === 'ecdsa') {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n              return verifyMessage(publicKey, obj.msg, response);\n            }\n\n            if (obj.type === 'bip322-simple') {\n              return Verifier.verifySignature(account.address, obj.msg, response);\n            }\n            return 'Dapp Example: 不支持的类型签字的验证';\n          }}\n        />\n        <ApiPayload\n          title=\"SignMessageBIP322\"\n          description=\"签名消息 BIP322\"\n          presupposeParams={paramsBtc.signMessageBip322}\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (request: string) => {\n            const res = await providerBitcoin?.signMessageBIP322(request);\n            return res;\n          }}\n          onValidate={async (request: string, response: string) => {\n            return Promise.resolve(Verifier.verifySignature(account.address, request, response));\n          }}\n        />\n      </ApiGroup>\n\n      <ApiGroup title=\"BTC Transaction\">\n        <ApiPayload\n          title=\"SendBitcoin\"\n          description=\"发送交易\"\n          allowCallWithoutProvider={!!providerBitcoin}\n          presupposeParams={paramsBtc.sendBitcoin(account?.address ?? '')}\n          onExecute={async (request: string) => {\n            const obj = JSON.parse(request) as { toAddress: string; satoshis: number };\n            const res = await providerBitcoin?.sendBitcoin(obj.toAddress, obj.satoshis);\n            return JSON.stringify(res);\n          }}\n        />\n        <ApiPayload\n          title=\"pushTx\"\n          description=\"广播交易\"\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (request: string) => {\n            if (!request || isEmpty(request)) {\n              toast({\n                title: 'Error',\n                description: '请填写需要广播的交易信息',\n              });\n              throw new Error('request is empty');\n            }\n\n            const res = await providerBitcoin?.pushTx(request);\n            return JSON.stringify(res);\n          }}\n        />\n        <ApiPayload\n          title=\"signPsbt\"\n          description=\"signPsbt\"\n          presupposeParams={paramsBtc.signPsbt}\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (request: string) => {\n            const { psbtHex, options } = JSON.parse(request) as {\n              psbtHex: string;\n              options?: any;\n            };\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            const res = await providerBitcoin?.signPsbt(psbtHex);\n\n            const psbt = bitcoin.Psbt.fromHex(res);\n            if (!options?.autoFinalized) {\n              psbt.finalizeAllInputs();\n            }\n            return psbt.toHex();\n          }}\n          generateRequestFrom={() => {\n            return (\n              <>\n                <Input\n                  label=\"收款地址\"\n                  type=\"text\"\n                  name=\"toAddress\"\n                  defaultValue={account?.address ?? ''}\n                />\n                <Input label=\"转账金额\" type=\"number\" name=\"amount\" defaultValue=\"1000\" />\n                <Input label=\"手续费 sat/vB\" type=\"number\" name=\"gasPrice\" defaultValue=\"20\" />\n              </>\n            );\n          }}\n          onGenerateRequest={async (fromData: Record<string, any>) => {\n            const toAddress = fromData['toAddress'] as string;\n            const amount = parseInt(fromData['amount'] as string);\n            const gasPrice = parseInt((fromData['gasPrice'] as string) ?? '20');\n\n            if (!toAddress || !amount) {\n              throw new Error('toAddress or amount is required');\n            }\n\n            const network = await providerBitcoin?.getNetwork();\n\n            const psbt = createPSBT(\n              account?.address ?? '',\n              toAddress,\n              amount,\n              gasPrice,\n              network === 'testnet' ? bitcoin.networks.bitcoin : bitcoin.networks.testnet,\n            );\n\n            return Promise.resolve(psbt);\n          }}\n          onValidate={async (_request: string, response: string) => {\n            const res = await providerBitcoin?.pushTx(response);\n            return JSON.stringify(res);\n          }}\n        />\n        <ApiPayload\n          title=\"signPsbts\"\n          description=\"signPsbts\"\n          presupposeParams={paramsBtc.signPsbts}\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (request: string) => {\n            const { psbtHexs, options } = JSON.parse(request) as {\n              psbtHexs: string[];\n              options?: any[];\n            };\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            const res = await providerBitcoin?.signPsbts(psbtHexs);\n\n            const result: string[] = [];\n            res.forEach((psbt, index) => {\n              const psbtObj = bitcoin.Psbt.fromHex(psbt);\n              if (!options?.[index]?.autoFinalized) {\n                psbtObj.finalizeAllInputs();\n              }\n              result.push(psbtObj.toHex());\n            });\n\n            return JSON.stringify(result);\n          }}\n          generateRequestFrom={() => {\n            return (\n              <>\n                <Input\n                  label=\"收款地址\"\n                  type=\"text\"\n                  name=\"toAddress\"\n                  defaultValue={account?.address ?? ''}\n                />\n                <Input label=\"转账金额\" type=\"number\" name=\"amount\" defaultValue=\"1000\" />\n                <Input label=\"手续费 sat/vB\" type=\"number\" name=\"gasPrice\" defaultValue=\"20\" />\n              </>\n            );\n          }}\n          onGenerateRequest={async (fromData: Record<string, any>) => {\n            const toAddress = fromData['toAddress'] as string;\n            const amount = parseInt(fromData['amount'] as string);\n            const gasPrice = parseInt((fromData['gasPrice'] as string) ?? '20');\n\n            if (!toAddress || !amount) {\n              throw new Error('toAddress or amount is required');\n            }\n\n            const network = await providerBitcoin?.getNetwork();\n\n            const psbt = await createPSBT(\n              account?.address ?? '',\n              toAddress,\n              amount,\n              gasPrice,\n              network === 'testnet' ? bitcoin.networks.bitcoin : bitcoin.networks.testnet,\n            );\n\n            const pabtObj = JSON.parse(psbt);\n\n            return Promise.resolve(\n              JSON.stringify({\n                psbtHexs: [pabtObj.psbtHex],\n                options: [pabtObj.options],\n              }),\n            );\n          }}\n          onValidate={async (_request: string, response: string) => {\n            const [psbtHexs] = JSON.parse(response);\n            return await providerBitcoin?.pushTx(psbtHexs);\n          }}\n        />\n        <ApiPayload\n          title=\"pushPsbt\"\n          description=\"pushPsbt\"\n          allowCallWithoutProvider={!!providerBitcoin}\n          onExecute={async (request: string) => {\n            if (!request || isEmpty(request)) {\n              toast({\n                title: 'Error',\n                description: '请填写需要广播的交易信息',\n              });\n              throw new Error('request is empty');\n            }\n            const res = await providerBitcoin?.pushTx(request);\n            return res;\n          }}\n        />\n      </ApiGroup>\n\n      <ApiGroup title=\"Cosmos Transfer\">\n        <ApiPayload\n          title=\"signAmino\"\n          description=\"signAmino\"\n          presupposeParams={paramsCosmos.signAmino(account?.address, account?.address, 'ubbn')}\n          allowCallWithoutProvider={!!providerCosmos}\n          onExecute={async (request: string) => {\n            if (!account) return JSON.stringify({ error: 'account is null' });\n\n            const network = await providerCosmos?.createSigningStargateClient();\n            const accountInfo = await network.getAccount(account?.address);\n            const chainId = await network.getChainId();\n\n            const obj = JSON.parse(request);\n\n            const requestObj = {\n              chain_id: chainId,\n              account_number: accountInfo?.accountNumber,\n              sequence: accountInfo?.sequence,\n              fee: obj.fee,\n              memo: obj.memo,\n              msgs: obj.msgs,\n            };\n            const signer = await providerCosmos?.getOfflineSigner();\n            return await signer.signAmino(account.address, requestObj);\n          }}\n        />\n        <ApiPayload\n          title=\"signDirect\"\n          description=\"signDirect\"\n          presupposeParams={paramsCosmos.signDirect(account?.address, account?.address, 'ubbn')}\n          allowCallWithoutProvider={!!providerCosmos}\n          onExecute={async (request: string) => {\n            const network = await providerCosmos?.createSigningStargateClient();\n\n            const sequence = await network.getSequence(account?.address);\n            const chainId = await network.getChainId();\n\n            const obj = JSON.parse(request);\n\n            const signer = await providerCosmos?.getOfflineSigner();\n            const res = await signer.signDirect(account.address, {\n              bodyBytes: Buffer.from(obj.signDoc.bodyBytes, 'hex'),\n              authInfoBytes: Buffer.from(obj.signDoc.authInfoBytes, 'hex'),\n              chainId: chainId,\n              accountNumber: Long.fromNumber(sequence?.accountNumber),\n            });\n            return res;\n          }}\n          onValidate={async (_request: string, response: string) => {\n            const tx = hexToBytes(response);\n            const res = await providerCosmos?.broadcastTx(tx);\n            return JSON.stringify(res);\n          }}\n        />\n      </ApiGroup>\n\n      <DappList dapps={dapps} />\n    </>\n  );\n}\n\n// await tomoWalletConnect.disconnect();\nexport function ChildComponent() {\n  const tomoModal = useTomoModalControl();\n  const tomoWalletConnect = useTomoWalletConnect();\n\n  return (\n    <div style={{ textAlign: 'right' }}>\n      <Button\n        onClick={async () => {\n          await tomoModal.open('cosmos');\n        }}\n      >\n        Connect Wallet\n      </Button>\n      <Button\n        onClick={async () => {\n          await tomoWalletConnect.disconnect();\n        }}\n      >\n        Disconnect Wallet\n      </Button>\n    </div>\n  );\n}\n\nexport default function Demo() {\n  return (\n    <TomoContextProvider\n      chainTypes={['cosmos', 'bitcoin']}\n      cosmosChains={[\n        {\n          id: 1,\n          name: 'Babylon Main',\n          type: 'cosmos',\n          network: 'bbn-1',\n          backendUrls: { rpcUrl: 'https://babylon.nodes.guru' },\n        },\n        {\n          id: 2,\n          name: 'Babylon Test',\n          type: 'cosmos',\n          network: 'bbn-test-5',\n          backendUrls: { rpcUrl: 'https://babylon-testnet-rpc.nodes.guru' },\n        },\n      ]}\n      style={{\n        rounded: 'medium',\n        theme: 'light',\n        primaryColor: '#FF7C2A',\n      }}\n    >\n      <Example />\n      <ChildComponent />\n    </TomoContextProvider>\n  );\n}\n","import BTCParams from '../btc/params';\n\nexport default {\n  ...BTCParams,\n  getUtxos: (address: string) => [\n    {\n      id: 'getUtxos',\n      name: 'getUtxos',\n      value: JSON.stringify({\n        address: address,\n        amount: 1000,\n      }),\n    },\n  ],\n  signMessageBip322: [\n    {\n      id: 'signMessageBip322',\n      name: 'signMessageBip322',\n      value: 'Hello World',\n    },\n  ],\n};\n","export const networks = [\n  {\n    name: 'Babylon Testnet',\n    id: 'bbn-test-5',\n    rest: 'https://babylon-testnet-api.nodes.guru',\n    denom: 'ubbn',\n  },\n];\n\nexport default {\n  enable: [\n    {\n      id: 'enable',\n      name: 'enable',\n      value: JSON.stringify('cosmoshub-4'),\n    },\n    {\n      id: 'enable-multiple',\n      name: 'enable multiple',\n      value: JSON.stringify(['cosmoshub-4', 'juno-1', 'osmosis-1']),\n    },\n  ],\n  signArbitrary: [\n    {\n      id: 'signArbitrary',\n      name: 'signArbitrary',\n      value: '010203',\n    },\n  ],\n  signAmino: (fromAddress: string, toAddress: string, denom: string) => [\n    {\n      id: 'signAmino-msgSend',\n      name: 'SignAmino MsgSend',\n      value: JSON.stringify({\n        fee: {\n          amount: [{ amount: '1', denom: denom }],\n          gas: '200000',\n        },\n        msgs: [\n          {\n            'type': 'cosmos-sdk/MsgSend',\n            'value': {\n              'from_address': fromAddress,\n              'to_address': toAddress,\n              'amount': [\n                {\n                  'amount': '1000',\n                  'denom': denom,\n                },\n              ],\n            },\n          },\n        ],\n        'memo': '',\n      }),\n    },\n    {\n      id: 'signAmino-executeContract',\n      name: 'SignAmino ExecuteContract',\n      value: JSON.stringify({\n        fee: {\n          amount: [{ amount: '1', denom: denom }],\n          gas: '200000',\n        },\n        msgs: [\n          {\n            'type': 'wasm/MsgExecuteContract',\n            'value': {\n              'from_address': fromAddress,\n              'contract': 'cw1qyqxw2ep3r3jyly4k2jlyj3lq3jly4k2jlyj3lq',\n              'msg': {\n                transfer: {\n                  recipient: toAddress,\n                  amount: '1000',\n                },\n              },\n              'funds': [],\n            },\n          },\n        ],\n        'memo': '',\n      }),\n    },\n  ],\n  signDirect_simple: (fromAddress: string, toAddress: string, denom: string) => [\n    {\n      id: 'signDirect-msgSend',\n      name: 'signDirect MsgSend',\n      value: JSON.stringify({\n        fee: {\n          amount: [{ amount: '1', denom: denom }],\n          gas: '200000',\n        },\n        msgs: [\n          {\n            'type': '/cosmos.bank.v1beta1.MsgSend',\n            'value': {\n              'from_address': fromAddress,\n              'to_address': toAddress,\n              'amount': [\n                {\n                  'amount': '1000',\n                  'denom': denom,\n                },\n              ],\n            },\n          },\n        ],\n        'memo': '',\n      }),\n    },\n    {\n      id: 'signDirect-executeContract',\n      name: 'signDirect ExecuteContract CwToken',\n      value: JSON.stringify({\n        fee: {\n          amount: [{ amount: '1', denom: denom }],\n          gas: '200000',\n        },\n        msgs: [\n          {\n            'type': '/cosmwasm.wasm.v1.MsgExecuteContract',\n            'value': {\n              'from_address': fromAddress,\n              'contract': 'cw1qyqxw2ep3r3jyly4k2jlyj3lq3jly4k2jlyj3lq',\n              'msg': {\n                transfer: {\n                  recipient: toAddress,\n                  amount: '1000',\n                },\n              },\n              'funds': [],\n            },\n          },\n        ],\n        'memo': '',\n      }),\n    },\n  ],\n  signDirect: (fromAddress: string, toAddress: string, denom: string) => [\n    {\n      id: 'signDirect-msgSend',\n      name: 'signDirect MsgSend',\n      value: JSON.stringify({\n        'chainId': 'bbn-test-5',\n        'signer': 'bbn1uxd7fqht3qgeg80g20q0hfv0cqh4rcqpwgmkvq',\n        'signDoc': {\n          'bodyBytes':\n            '0ae6060a2d2f626162796c6f6e2e6274637374616b696e672e76312e4d736743726561746542544344656c65676174696f6e12b4060a2a62626e31757864376671687433716765673830673230713068667630637168347263717077676d6b7671124508021241200110c948b9c573cc2499265b5e99e748cc32fd9a5ee17d3cf02365eef4b1fa964915c0193ba04f75a10f0b0d1afea76f6e7f378972be17d3bd7cfb2a7259201d1a20ead5c9942bc49655fc2234c55e9a61468bcd4ce599922a6bedf0eb3e5b9ee5322220d23c2c25e1fcf8fd1c21b9a402c19e2e309e531e45e92fb1e9805b6056b0cc762880f40330d086033a89010200000001a4876046ff402b8950373fed5952c6c14b88db57333d4a8e92be42a1b1e7fdba0100000000ffffffff0250c3000000000000225120700088b1166fa4c1a5e05a7677517eac01004f4343072fbff7b8d2dec576dc59c415880000000000225120773bdb0b0f631d71ae90465cb233b1c8285f327500516fb4072bfa8ddb3dd754000000004a7d0200000001dcb9294f16b86260a5833129d552faa3e75052d68a912bc7f8156bb74f5f281a0000000000ffffffff02c4090000000000001600145be12624d08a2b424095d7c07221c33450d14bf104a600000000000022512018fb8361aeff975f8b4a817c6b3050c7ee68d0d131991eae62a54b422577fc06000000005240fb9796c2433fb93ef2311b858bd792d3794b926d407e9088c737cef2ac32e890a594cc7f34fc2ea434226b72fbf6ecd4b48505039666159d195ab8f21fa525f958f007625e0200000001dcb9294f16b86260a5833129d552faa3e75052d68a912bc7f8156bb74f5f281a0000000000ffffffff0180bb00000000000022512041ce3c9f53d216681fc36d9d7e015076e1b0483bb8a5e557064205ece8dea368000000006880f702727d0200000001b4dfba7b6bf26c1ed08c8a4fd20f76001cac84226b92068834560711573c5dac0000000000ffffffff0260090000000000001600145be12624d08a2b424095d7c07221c33450d14bf1989e00000000000022512018fb8361aeff975f8b4a817c6b3050c7ee68d0d131991eae62a54b422577fc06000000007a4025917df4988fae03729bb92232749e84e3dbf87e6914726468b4efbcc59b6580984077e86a806cb24cefbe42ac89696558e83f81021ad6824c4e57bbec5f26d6',\n          'authInfoBytes':\n            '0a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21038563d76bd72b9f140992e4f6ac7248e95ab19552fcef8f5492e33ba3172b210912040a020801180312130a0d0a047562626e1205313234343310c1bf6c',\n          'chainId': 'bbn-test-5',\n          'accountNumber': '0',\n        },\n      }),\n    },\n  ],\n};\n","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":["InfoLayout","param","title","children","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Card","jsx","CardHeader","className","CardContent","dapps","name","url","Example","tomowalletState","providers","account","tomoModal","useTomoModalControl","tomoWalletConnect","useTomoWalletConnect","useTomoWalletState","isConnected","useWalletList","useTomoProviders","console","log","providerBitcoin","bitcoinProvider","undefined","providerCosmos","cosmosProvider","walletsRef","useRef","uuid","inject","setProvider","setAccount","useWallet","onConnectWallet","useCallback","selectedWallet","address","providerDetail","current","find","w","id","Promise","reject","result","open","connected","walletState","cosmos","bitcoin","toast","description","provider","useEffect","chainId","toString","Fragment","div","p","network","chainType","walletId","br","ConnectButton","fetchWallets","resolve","map","wallet","concat","onConnect","onDisconnect","disconnect","ApiGroup","ApiPayload","allowCallWithoutProvider","onExecute","_request","res","connectWallet","JSON","stringify","getPublicKeyHex","getAddress","getNetwork","getNetworkFees","getWalletProviderName","getWalletProviderIcon","presupposeParams","paramsBtc","signMessage","request","obj","parse","msg","type","onValidate","response","publicKey","Verifier","verifySignature","verifyMessage","signMessageBip322","signMessageBIP322","sendBitcoin","toAddress","satoshis","isEmpty","pushTx","signPsbt","psbtHex","options","psbt","fromHex","autoFinalized","finalizeAllInputs","toHex","generateRequestFrom","Input","label","defaultValue","onGenerateRequest","fromData","amount","parseInt","gasPrice","createPSBT","testnet","signPsbts","psbtHexs","forEach","index","psbtObj","push","pabtObj","paramsCosmos","signAmino","error","createSigningStargateClient","accountInfo","getAccount","getChainId","requestObj","chain_id","account_number","accountNumber","sequence","fee","memo","msgs","signer","getOfflineSigner","signDirect","getSequence","bodyBytes","Buffer","from","signDoc","authInfoBytes","Long","tx","hexToBytes","broadcastTx","DappList","ChildComponent","style","textAlign","Button","onClick","Demo","TomoContextProvider","chainTypes","cosmosChains","backendUrls","rpcUrl","rounded","theme","primaryColor","__webpack_exports__","Z","BTCParams","getUtxos","value","networks","rest","denom","enable","signArbitrary","fromAddress","gas","transfer","recipient","signDirect_simple"],"sourceRoot":""}