{"version":3,"file":"static/chunks/9841.0f04d624dc8c1a3c.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/focusManager.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/mutation.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/notifyManager.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/onlineManager.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/query.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/queryCache.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/mutationCache.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/queryClient.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/removable.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/retryer.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/subscribable.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/thenable.js","webpack://_N_E/./node_modules/@tanstack/query-core/build/modern/utils.js","webpack://_N_E/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js","webpack://_N_E/./node_modules/@wallet-standard/app/lib/esm/wallets.js","webpack://_N_E/<anon>"],"sourcesContent":["// src/focusManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar FocusManager = class extends Subscribable {\n  #focused;\n  #cleanup;\n  #setup;\n  constructor() {\n    super();\n    this.#setup = (onFocus) => {\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus();\n        window.addEventListener(\"visibilitychange\", listener, false);\n        return () => {\n          window.removeEventListener(\"visibilitychange\", listener);\n        };\n      }\n      return;\n    };\n  }\n  onSubscribe() {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.();\n      this.#cleanup = void 0;\n    }\n  }\n  setEventListener(setup) {\n    this.#setup = setup;\n    this.#cleanup?.();\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === \"boolean\") {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n  setFocused(focused) {\n    const changed = this.#focused !== focused;\n    if (changed) {\n      this.#focused = focused;\n      this.onFocus();\n    }\n  }\n  onFocus() {\n    const isFocused = this.isFocused();\n    this.listeners.forEach((listener) => {\n      listener(isFocused);\n    });\n  }\n  isFocused() {\n    if (typeof this.#focused === \"boolean\") {\n      return this.#focused;\n    }\n    return globalThis.document?.visibilityState !== \"hidden\";\n  }\n};\nvar focusManager = new FocusManager();\nexport {\n  FocusManager,\n  focusManager\n};\n//# sourceMappingURL=focusManager.js.map","// src/mutation.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Removable } from \"./removable.js\";\nimport { createRetryer } from \"./retryer.js\";\nvar Mutation = class extends Removable {\n  #observers;\n  #mutationCache;\n  #retryer;\n  constructor(config) {\n    super();\n    this.mutationId = config.mutationId;\n    this.#mutationCache = config.mutationCache;\n    this.#observers = [];\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n  setOptions(options) {\n    this.options = options;\n    this.updateGcTime(this.options.gcTime);\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  addObserver(observer) {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer);\n      this.clearGcTimeout();\n      this.#mutationCache.notify({\n        type: \"observerAdded\",\n        mutation: this,\n        observer\n      });\n    }\n  }\n  removeObserver(observer) {\n    this.#observers = this.#observers.filter((x) => x !== observer);\n    this.scheduleGc();\n    this.#mutationCache.notify({\n      type: \"observerRemoved\",\n      mutation: this,\n      observer\n    });\n  }\n  optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === \"pending\") {\n        this.scheduleGc();\n      } else {\n        this.#mutationCache.remove(this);\n      }\n    }\n  }\n  continue() {\n    return this.#retryer?.continue() ?? // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n    this.execute(this.state.variables);\n  }\n  async execute(variables) {\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error(\"No mutationFn found\"));\n        }\n        return this.options.mutationFn(variables);\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: \"failed\", failureCount, error });\n      },\n      onPause: () => {\n        this.#dispatch({ type: \"pause\" });\n      },\n      onContinue: () => {\n        this.#dispatch({ type: \"continue\" });\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this)\n    });\n    const restored = this.state.status === \"pending\";\n    const isPaused = !this.#retryer.canStart();\n    try {\n      if (!restored) {\n        this.#dispatch({ type: \"pending\", variables, isPaused });\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this\n        );\n        const context = await this.options.onMutate?.(variables);\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: \"pending\",\n            context,\n            variables,\n            isPaused\n          });\n        }\n      }\n      const data = await this.#retryer.start();\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this\n      );\n      await this.options.onSuccess?.(data, variables, this.state.context);\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this\n      );\n      await this.options.onSettled?.(data, null, variables, this.state.context);\n      this.#dispatch({ type: \"success\", data });\n      return data;\n    } catch (error) {\n      try {\n        await this.#mutationCache.config.onError?.(\n          error,\n          variables,\n          this.state.context,\n          this\n        );\n        await this.options.onError?.(\n          error,\n          variables,\n          this.state.context\n        );\n        await this.#mutationCache.config.onSettled?.(\n          void 0,\n          error,\n          this.state.variables,\n          this.state.context,\n          this\n        );\n        await this.options.onSettled?.(\n          void 0,\n          error,\n          variables,\n          this.state.context\n        );\n        throw error;\n      } finally {\n        this.#dispatch({ type: \"error\", error });\n      }\n    } finally {\n      this.#mutationCache.runNext(this);\n    }\n  }\n  #dispatch(action) {\n    const reducer = (state) => {\n      switch (action.type) {\n        case \"failed\":\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n        case \"pause\":\n          return {\n            ...state,\n            isPaused: true\n          };\n        case \"continue\":\n          return {\n            ...state,\n            isPaused: false\n          };\n        case \"pending\":\n          return {\n            ...state,\n            context: action.context,\n            data: void 0,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: \"pending\",\n            variables: action.variables,\n            submittedAt: Date.now()\n          };\n        case \"success\":\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: \"success\",\n            isPaused: false\n          };\n        case \"error\":\n          return {\n            ...state,\n            data: void 0,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: \"error\"\n          };\n      }\n    };\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action);\n      });\n      this.#mutationCache.notify({\n        mutation: this,\n        type: \"updated\",\n        action\n      });\n    });\n  }\n};\nfunction getDefaultState() {\n  return {\n    context: void 0,\n    data: void 0,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: \"idle\",\n    variables: void 0,\n    submittedAt: 0\n  };\n}\nexport {\n  Mutation,\n  getDefaultState\n};\n//# sourceMappingURL=mutation.js.map","// src/notifyManager.ts\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n  let notifyFn = (callback) => {\n    callback();\n  };\n  let batchNotifyFn = (callback) => {\n    callback();\n  };\n  let scheduleFn = (cb) => setTimeout(cb, 0);\n  const schedule = (callback) => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  return {\n    batch: (callback) => {\n      let result;\n      transactions++;\n      try {\n        result = callback();\n      } finally {\n        transactions--;\n        if (!transactions) {\n          flush();\n        }\n      }\n      return result;\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: (callback) => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args);\n        });\n      };\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn) => {\n      notifyFn = fn;\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn) => {\n      batchNotifyFn = fn;\n    },\n    setScheduler: (fn) => {\n      scheduleFn = fn;\n    }\n  };\n}\nvar notifyManager = createNotifyManager();\nexport {\n  createNotifyManager,\n  notifyManager\n};\n//# sourceMappingURL=notifyManager.js.map","// src/onlineManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar OnlineManager = class extends Subscribable {\n  #online = true;\n  #cleanup;\n  #setup;\n  constructor() {\n    super();\n    this.#setup = (onOnline) => {\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true);\n        const offlineListener = () => onOnline(false);\n        window.addEventListener(\"online\", onlineListener, false);\n        window.addEventListener(\"offline\", offlineListener, false);\n        return () => {\n          window.removeEventListener(\"online\", onlineListener);\n          window.removeEventListener(\"offline\", offlineListener);\n        };\n      }\n      return;\n    };\n  }\n  onSubscribe() {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.();\n      this.#cleanup = void 0;\n    }\n  }\n  setEventListener(setup) {\n    this.#setup = setup;\n    this.#cleanup?.();\n    this.#cleanup = setup(this.setOnline.bind(this));\n  }\n  setOnline(online) {\n    const changed = this.#online !== online;\n    if (changed) {\n      this.#online = online;\n      this.listeners.forEach((listener) => {\n        listener(online);\n      });\n    }\n  }\n  isOnline() {\n    return this.#online;\n  }\n};\nvar onlineManager = new OnlineManager();\nexport {\n  OnlineManager,\n  onlineManager\n};\n//# sourceMappingURL=onlineManager.js.map","// src/query.ts\nimport {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  skipToken,\n  timeUntilStale\n} from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { canFetch, createRetryer, isCancelledError } from \"./retryer.js\";\nimport { Removable } from \"./removable.js\";\nvar Query = class extends Removable {\n  #initialState;\n  #revertState;\n  #cache;\n  #retryer;\n  #defaultOptions;\n  #abortSignalConsumed;\n  constructor(config) {\n    super();\n    this.#abortSignalConsumed = false;\n    this.#defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.#cache = config.cache;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.#initialState = getDefaultState(this.options);\n    this.state = config.state ?? this.#initialState;\n    this.scheduleGc();\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  get promise() {\n    return this.#retryer?.promise;\n  }\n  setOptions(options) {\n    this.options = { ...this.#defaultOptions, ...options };\n    this.updateGcTime(this.options.gcTime);\n  }\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n      this.#cache.remove(this);\n    }\n  }\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options);\n    this.#dispatch({\n      data,\n      type: \"success\",\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual\n    });\n    return data;\n  }\n  setState(state, setStateOptions) {\n    this.#dispatch({ type: \"setState\", state, setStateOptions });\n  }\n  cancel(options) {\n    const promise = this.#retryer?.promise;\n    this.#retryer?.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n  destroy() {\n    super.destroy();\n    this.cancel({ silent: true });\n  }\n  reset() {\n    this.destroy();\n    this.setState(this.#initialState);\n  }\n  isActive() {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false\n    );\n  }\n  isDisabled() {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive();\n    }\n    return this.options.queryFn === skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;\n  }\n  isStale() {\n    if (this.state.isInvalidated) {\n      return true;\n    }\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale\n      );\n    }\n    return this.state.data === void 0;\n  }\n  isStaleByTime(staleTime = 0) {\n    return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n  onFocus() {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus());\n    observer?.refetch({ cancelRefetch: false });\n    this.#retryer?.continue();\n  }\n  onOnline() {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect());\n    observer?.refetch({ cancelRefetch: false });\n    this.#retryer?.continue();\n  }\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer);\n      this.clearGcTimeout();\n      this.#cache.notify({ type: \"observerAdded\", query: this, observer });\n    }\n  }\n  removeObserver(observer) {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer);\n      if (!this.observers.length) {\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true });\n          } else {\n            this.#retryer.cancelRetry();\n          }\n        }\n        this.scheduleGc();\n      }\n      this.#cache.notify({ type: \"observerRemoved\", query: this, observer });\n    }\n  }\n  getObserversCount() {\n    return this.observers.length;\n  }\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: \"invalidate\" });\n    }\n  }\n  fetch(options, fetchOptions) {\n    if (this.state.fetchStatus !== \"idle\") {\n      if (this.state.data !== void 0 && fetchOptions?.cancelRefetch) {\n        this.cancel({ silent: true });\n      } else if (this.#retryer) {\n        this.#retryer.continueRetry();\n        return this.#retryer.promise;\n      }\n    }\n    if (options) {\n      this.setOptions(options);\n    }\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn);\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`\n        );\n      }\n    }\n    const abortController = new AbortController();\n    const addSignalProperty = (object) => {\n      Object.defineProperty(object, \"signal\", {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true;\n          return abortController.signal;\n        }\n      });\n    };\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions);\n      const queryFnContext = {\n        queryKey: this.queryKey,\n        meta: this.meta\n      };\n      addSignalProperty(queryFnContext);\n      this.#abortSignalConsumed = false;\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn,\n          queryFnContext,\n          this\n        );\n      }\n      return queryFn(queryFnContext);\n    };\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn\n    };\n    addSignalProperty(context);\n    this.options.behavior?.onFetch(\n      context,\n      this\n    );\n    this.#revertState = this.state;\n    if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== context.fetchOptions?.meta) {\n      this.#dispatch({ type: \"fetch\", meta: context.fetchOptions?.meta });\n    }\n    const onError = (error) => {\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: \"error\",\n          error\n        });\n      }\n      if (!isCancelledError(error)) {\n        this.#cache.config.onError?.(\n          error,\n          this\n        );\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error,\n          this\n        );\n      }\n      this.scheduleGc();\n    };\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise,\n      fn: context.fetchFn,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === void 0) {\n          if (process.env.NODE_ENV !== \"production\") {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`\n            );\n          }\n          onError(new Error(`${this.queryHash} data is undefined`));\n          return;\n        }\n        try {\n          this.setData(data);\n        } catch (error) {\n          onError(error);\n          return;\n        }\n        this.#cache.config.onSuccess?.(data, this);\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error,\n          this\n        );\n        this.scheduleGc();\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: \"failed\", failureCount, error });\n      },\n      onPause: () => {\n        this.#dispatch({ type: \"pause\" });\n      },\n      onContinue: () => {\n        this.#dispatch({ type: \"continue\" });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true\n    });\n    return this.#retryer.start();\n  }\n  #dispatch(action) {\n    const reducer = (state) => {\n      switch (action.type) {\n        case \"failed\":\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error\n          };\n        case \"pause\":\n          return {\n            ...state,\n            fetchStatus: \"paused\"\n          };\n        case \"continue\":\n          return {\n            ...state,\n            fetchStatus: \"fetching\"\n          };\n        case \"fetch\":\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null\n          };\n        case \"success\":\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: \"success\",\n            ...!action.manual && {\n              fetchStatus: \"idle\",\n              fetchFailureCount: 0,\n              fetchFailureReason: null\n            }\n          };\n        case \"error\":\n          const error = action.error;\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: \"idle\" };\n          }\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: \"idle\",\n            status: \"error\"\n          };\n        case \"invalidate\":\n          return {\n            ...state,\n            isInvalidated: true\n          };\n        case \"setState\":\n          return {\n            ...state,\n            ...action.state\n          };\n      }\n    };\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate();\n      });\n      this.#cache.notify({ query: this, type: \"updated\", action });\n    });\n  }\n};\nfunction fetchState(data, options) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? \"fetching\" : \"paused\",\n    ...data === void 0 && {\n      error: null,\n      status: \"pending\"\n    }\n  };\n}\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n  const hasData = data !== void 0;\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? \"success\" : \"pending\",\n    fetchStatus: \"idle\"\n  };\n}\nexport {\n  Query,\n  fetchState\n};\n//# sourceMappingURL=query.js.map","// src/queryCache.ts\nimport { hashQueryKeyByOptions, matchQuery } from \"./utils.js\";\nimport { Query } from \"./query.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar QueryCache = class extends Subscribable {\n  constructor(config = {}) {\n    super();\n    this.config = config;\n    this.#queries = /* @__PURE__ */ new Map();\n  }\n  #queries;\n  build(client, options, state) {\n    const queryKey = options.queryKey;\n    const queryHash = options.queryHash ?? hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey)\n      });\n      this.add(query);\n    }\n    return query;\n  }\n  add(query) {\n    if (!this.#queries.has(query.queryHash)) {\n      this.#queries.set(query.queryHash, query);\n      this.notify({\n        type: \"added\",\n        query\n      });\n    }\n  }\n  remove(query) {\n    const queryInMap = this.#queries.get(query.queryHash);\n    if (queryInMap) {\n      query.destroy();\n      if (queryInMap === query) {\n        this.#queries.delete(query.queryHash);\n      }\n      this.notify({ type: \"removed\", query });\n    }\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        this.remove(query);\n      });\n    });\n  }\n  get(queryHash) {\n    return this.#queries.get(queryHash);\n  }\n  getAll() {\n    return [...this.#queries.values()];\n  }\n  find(filters) {\n    const defaultedFilters = { exact: true, ...filters };\n    return this.getAll().find(\n      (query) => matchQuery(defaultedFilters, query)\n    );\n  }\n  findAll(filters = {}) {\n    const queries = this.getAll();\n    return Object.keys(filters).length > 0 ? queries.filter((query) => matchQuery(filters, query)) : queries;\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event);\n      });\n    });\n  }\n  onFocus() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onFocus();\n      });\n    });\n  }\n  onOnline() {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onOnline();\n      });\n    });\n  }\n};\nexport {\n  QueryCache\n};\n//# sourceMappingURL=queryCache.js.map","// src/mutationCache.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Mutation } from \"./mutation.js\";\nimport { matchMutation, noop } from \"./utils.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar MutationCache = class extends Subscribable {\n  constructor(config = {}) {\n    super();\n    this.config = config;\n    this.#mutations = /* @__PURE__ */ new Set();\n    this.#scopes = /* @__PURE__ */ new Map();\n    this.#mutationId = 0;\n  }\n  #mutations;\n  #scopes;\n  #mutationId;\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state\n    });\n    this.add(mutation);\n    return mutation;\n  }\n  add(mutation) {\n    this.#mutations.add(mutation);\n    const scope = scopeFor(mutation);\n    if (typeof scope === \"string\") {\n      const scopedMutations = this.#scopes.get(scope);\n      if (scopedMutations) {\n        scopedMutations.push(mutation);\n      } else {\n        this.#scopes.set(scope, [mutation]);\n      }\n    }\n    this.notify({ type: \"added\", mutation });\n  }\n  remove(mutation) {\n    if (this.#mutations.delete(mutation)) {\n      const scope = scopeFor(mutation);\n      if (typeof scope === \"string\") {\n        const scopedMutations = this.#scopes.get(scope);\n        if (scopedMutations) {\n          if (scopedMutations.length > 1) {\n            const index = scopedMutations.indexOf(mutation);\n            if (index !== -1) {\n              scopedMutations.splice(index, 1);\n            }\n          } else if (scopedMutations[0] === mutation) {\n            this.#scopes.delete(scope);\n          }\n        }\n      }\n    }\n    this.notify({ type: \"removed\", mutation });\n  }\n  canRun(mutation) {\n    const scope = scopeFor(mutation);\n    if (typeof scope === \"string\") {\n      const mutationsWithSameScope = this.#scopes.get(scope);\n      const firstPendingMutation = mutationsWithSameScope?.find(\n        (m) => m.state.status === \"pending\"\n      );\n      return !firstPendingMutation || firstPendingMutation === mutation;\n    } else {\n      return true;\n    }\n  }\n  runNext(mutation) {\n    const scope = scopeFor(mutation);\n    if (typeof scope === \"string\") {\n      const foundMutation = this.#scopes.get(scope)?.find((m) => m !== mutation && m.state.isPaused);\n      return foundMutation?.continue() ?? Promise.resolve();\n    } else {\n      return Promise.resolve();\n    }\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.#mutations.forEach((mutation) => {\n        this.notify({ type: \"removed\", mutation });\n      });\n      this.#mutations.clear();\n      this.#scopes.clear();\n    });\n  }\n  getAll() {\n    return Array.from(this.#mutations);\n  }\n  find(filters) {\n    const defaultedFilters = { exact: true, ...filters };\n    return this.getAll().find(\n      (mutation) => matchMutation(defaultedFilters, mutation)\n    );\n  }\n  findAll(filters = {}) {\n    return this.getAll().filter((mutation) => matchMutation(filters, mutation));\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event);\n      });\n    });\n  }\n  resumePausedMutations() {\n    const pausedMutations = this.getAll().filter((x) => x.state.isPaused);\n    return notifyManager.batch(\n      () => Promise.all(\n        pausedMutations.map((mutation) => mutation.continue().catch(noop))\n      )\n    );\n  }\n};\nfunction scopeFor(mutation) {\n  return mutation.options.scope?.id;\n}\nexport {\n  MutationCache\n};\n//# sourceMappingURL=mutationCache.js.map","// src/infiniteQueryBehavior.ts\nimport { addToEnd, addToStart, ensureQueryFn } from \"./utils.js\";\nfunction infiniteQueryBehavior(pages) {\n  return {\n    onFetch: (context, query) => {\n      const options = context.options;\n      const direction = context.fetchOptions?.meta?.fetchMore?.direction;\n      const oldPages = context.state.data?.pages || [];\n      const oldPageParams = context.state.data?.pageParams || [];\n      let result = { pages: [], pageParams: [] };\n      let currentPage = 0;\n      const fetchFn = async () => {\n        let cancelled = false;\n        const addSignalProperty = (object) => {\n          Object.defineProperty(object, \"signal\", {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true;\n              } else {\n                context.signal.addEventListener(\"abort\", () => {\n                  cancelled = true;\n                });\n              }\n              return context.signal;\n            }\n          });\n        };\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions);\n        const fetchPage = async (data, param, previous) => {\n          if (cancelled) {\n            return Promise.reject();\n          }\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data);\n          }\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? \"backward\" : \"forward\",\n            meta: context.options.meta\n          };\n          addSignalProperty(queryFnContext);\n          const page = await queryFn(\n            queryFnContext\n          );\n          const { maxPages } = context.options;\n          const addTo = previous ? addToStart : addToEnd;\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages)\n          };\n        };\n        if (direction && oldPages.length) {\n          const previous = direction === \"backward\";\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams\n          };\n          const param = pageParamFn(options, oldData);\n          result = await fetchPage(oldData, param, previous);\n        } else {\n          const remainingPages = pages ?? oldPages.length;\n          do {\n            const param = currentPage === 0 ? oldPageParams[0] ?? options.initialPageParam : getNextPageParam(options, result);\n            if (currentPage > 0 && param == null) {\n              break;\n            }\n            result = await fetchPage(result, param);\n            currentPage++;\n          } while (currentPage < remainingPages);\n        }\n        return result;\n      };\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(\n            fetchFn,\n            {\n              queryKey: context.queryKey,\n              meta: context.options.meta,\n              signal: context.signal\n            },\n            query\n          );\n        };\n      } else {\n        context.fetchFn = fetchFn;\n      }\n    }\n  };\n}\nfunction getNextPageParam(options, { pages, pageParams }) {\n  const lastIndex = pages.length - 1;\n  return pages.length > 0 ? options.getNextPageParam(\n    pages[lastIndex],\n    pages,\n    pageParams[lastIndex],\n    pageParams\n  ) : void 0;\n}\nfunction getPreviousPageParam(options, { pages, pageParams }) {\n  return pages.length > 0 ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams) : void 0;\n}\nfunction hasNextPage(options, data) {\n  if (!data)\n    return false;\n  return getNextPageParam(options, data) != null;\n}\nfunction hasPreviousPage(options, data) {\n  if (!data || !options.getPreviousPageParam)\n    return false;\n  return getPreviousPageParam(options, data) != null;\n}\nexport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior\n};\n//# sourceMappingURL=infiniteQueryBehavior.js.map","// src/queryClient.ts\nimport {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  resolveStaleTime,\n  skipToken\n} from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = class {\n  #queryCache;\n  #mutationCache;\n  #defaultOptions;\n  #queryDefaults;\n  #mutationDefaults;\n  #mountCount;\n  #unsubscribeFocus;\n  #unsubscribeOnline;\n  constructor(config = {}) {\n    this.#queryCache = config.queryCache || new QueryCache();\n    this.#mutationCache = config.mutationCache || new MutationCache();\n    this.#defaultOptions = config.defaultOptions || {};\n    this.#queryDefaults = /* @__PURE__ */ new Map();\n    this.#mutationDefaults = /* @__PURE__ */ new Map();\n    this.#mountCount = 0;\n  }\n  mount() {\n    this.#mountCount++;\n    if (this.#mountCount !== 1)\n      return;\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations();\n        this.#queryCache.onFocus();\n      }\n    });\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations();\n        this.#queryCache.onOnline();\n      }\n    });\n  }\n  unmount() {\n    this.#mountCount--;\n    if (this.#mountCount !== 0)\n      return;\n    this.#unsubscribeFocus?.();\n    this.#unsubscribeFocus = void 0;\n    this.#unsubscribeOnline?.();\n    this.#unsubscribeOnline = void 0;\n  }\n  isFetching(filters) {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: \"fetching\" }).length;\n  }\n  isMutating(filters) {\n    return this.#mutationCache.findAll({ ...filters, status: \"pending\" }).length;\n  }\n  getQueryData(queryKey) {\n    const options = this.defaultQueryOptions({ queryKey });\n    return this.#queryCache.get(options.queryHash)?.state.data;\n  }\n  ensureQueryData(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n    const query = this.#queryCache.build(this, defaultedOptions);\n    const cachedData = query.state.data;\n    if (cachedData === void 0) {\n      return this.fetchQuery(options);\n    }\n    if (options.revalidateIfStale && query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))) {\n      void this.prefetchQuery(defaultedOptions);\n    }\n    return Promise.resolve(cachedData);\n  }\n  getQueriesData(filters) {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n  setQueryData(queryKey, updater, options) {\n    const defaultedOptions = this.defaultQueryOptions({ queryKey });\n    const query = this.#queryCache.get(\n      defaultedOptions.queryHash\n    );\n    const prevData = query?.state.data;\n    const data = functionalUpdate(updater, prevData);\n    if (data === void 0) {\n      return void 0;\n    }\n    return this.#queryCache.build(this, defaultedOptions).setData(data, { ...options, manual: true });\n  }\n  setQueriesData(filters, updater, options) {\n    return notifyManager.batch(\n      () => this.#queryCache.findAll(filters).map(({ queryKey }) => [\n        queryKey,\n        this.setQueryData(queryKey, updater, options)\n      ])\n    );\n  }\n  getQueryState(queryKey) {\n    const options = this.defaultQueryOptions({ queryKey });\n    return this.#queryCache.get(\n      options.queryHash\n    )?.state;\n  }\n  removeQueries(filters) {\n    const queryCache = this.#queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query);\n      });\n    });\n  }\n  resetQueries(filters, options) {\n    const queryCache = this.#queryCache;\n    const refetchFilters = {\n      type: \"active\",\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  cancelQueries(filters, cancelOptions = {}) {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions };\n    const promises = notifyManager.batch(\n      () => this.#queryCache.findAll(filters).map((query) => query.cancel(defaultedCancelOptions))\n    );\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n  invalidateQueries(filters, options = {}) {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate();\n      });\n      if (filters?.refetchType === \"none\") {\n        return Promise.resolve();\n      }\n      const refetchFilters = {\n        ...filters,\n        type: filters?.refetchType ?? filters?.type ?? \"active\"\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  refetchQueries(filters, options = {}) {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options.cancelRefetch ?? true\n    };\n    const promises = notifyManager.batch(\n      () => this.#queryCache.findAll(filters).filter((query) => !query.isDisabled()).map((query) => {\n        let promise = query.fetch(void 0, fetchOptions);\n        if (!fetchOptions.throwOnError) {\n          promise = promise.catch(noop);\n        }\n        return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n      })\n    );\n    return Promise.all(promises).then(noop);\n  }\n  fetchQuery(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n    if (defaultedOptions.retry === void 0) {\n      defaultedOptions.retry = false;\n    }\n    const query = this.#queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(\n      resolveStaleTime(defaultedOptions.staleTime, query)\n    ) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n  prefetchQuery(options) {\n    return this.fetchQuery(options).then(noop).catch(noop);\n  }\n  fetchInfiniteQuery(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.fetchQuery(options);\n  }\n  prefetchInfiniteQuery(options) {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n  }\n  ensureInfiniteQueryData(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.ensureQueryData(options);\n  }\n  resumePausedMutations() {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations();\n    }\n    return Promise.resolve();\n  }\n  getQueryCache() {\n    return this.#queryCache;\n  }\n  getMutationCache() {\n    return this.#mutationCache;\n  }\n  getDefaultOptions() {\n    return this.#defaultOptions;\n  }\n  setDefaultOptions(options) {\n    this.#defaultOptions = options;\n  }\n  setQueryDefaults(queryKey, options) {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options\n    });\n  }\n  getQueryDefaults(queryKey) {\n    const defaults = [...this.#queryDefaults.values()];\n    const result = {};\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        Object.assign(result, queryDefault.defaultOptions);\n      }\n    });\n    return result;\n  }\n  setMutationDefaults(mutationKey, options) {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options\n    });\n  }\n  getMutationDefaults(mutationKey) {\n    const defaults = [...this.#mutationDefaults.values()];\n    let result = {};\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result, ...queryDefault.defaultOptions };\n      }\n    });\n    return result;\n  }\n  defaultQueryOptions(options) {\n    if (options._defaulted) {\n      return options;\n    }\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      );\n    }\n    if (defaultedOptions.refetchOnReconnect === void 0) {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n    }\n    if (defaultedOptions.throwOnError === void 0) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n    }\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = \"offlineFirst\";\n    }\n    if (defaultedOptions.queryFn === skipToken) {\n      defaultedOptions.enabled = false;\n    }\n    return defaultedOptions;\n  }\n  defaultMutationOptions(options) {\n    if (options?._defaulted) {\n      return options;\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...options?.mutationKey && this.getMutationDefaults(options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n  clear() {\n    this.#queryCache.clear();\n    this.#mutationCache.clear();\n  }\n};\nexport {\n  QueryClient\n};\n//# sourceMappingURL=queryClient.js.map","// src/removable.ts\nimport { isServer, isValidTimeout } from \"./utils.js\";\nvar Removable = class {\n  #gcTimeout;\n  destroy() {\n    this.clearGcTimeout();\n  }\n  scheduleGc() {\n    this.clearGcTimeout();\n    if (isValidTimeout(this.gcTime)) {\n      this.#gcTimeout = setTimeout(() => {\n        this.optionalRemove();\n      }, this.gcTime);\n    }\n  }\n  updateGcTime(newGcTime) {\n    this.gcTime = Math.max(\n      this.gcTime || 0,\n      newGcTime ?? (isServer ? Infinity : 5 * 60 * 1e3)\n    );\n  }\n  clearGcTimeout() {\n    if (this.#gcTimeout) {\n      clearTimeout(this.#gcTimeout);\n      this.#gcTimeout = void 0;\n    }\n  }\n};\nexport {\n  Removable\n};\n//# sourceMappingURL=removable.js.map","// src/retryer.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { pendingThenable } from \"./thenable.js\";\nimport { isServer, sleep } from \"./utils.js\";\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1e3 * 2 ** failureCount, 3e4);\n}\nfunction canFetch(networkMode) {\n  return (networkMode ?? \"online\") === \"online\" ? onlineManager.isOnline() : true;\n}\nvar CancelledError = class extends Error {\n  constructor(options) {\n    super(\"CancelledError\");\n    this.revert = options?.revert;\n    this.silent = options?.silent;\n  }\n};\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  const thenable = pendingThenable();\n  const cancel = (cancelOptions) => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort?.();\n    }\n  };\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n  const canContinue = () => focusManager.isFocused() && (config.networkMode === \"always\" || onlineManager.isOnline()) && config.canRun();\n  const canStart = () => canFetch(config.networkMode) && config.canRun();\n  const resolve = (value) => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess?.(value);\n      continueFn?.();\n      thenable.resolve(value);\n    }\n  };\n  const reject = (value) => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError?.(value);\n      continueFn?.();\n      thenable.reject(value);\n    }\n  };\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved || canContinue()) {\n          continueResolve(value);\n        }\n      };\n      config.onPause?.();\n    }).then(() => {\n      continueFn = void 0;\n      if (!isResolved) {\n        config.onContinue?.();\n      }\n    });\n  };\n  const run = () => {\n    if (isResolved) {\n      return;\n    }\n    let promiseOrValue;\n    const initialPromise = failureCount === 0 ? config.initialPromise : void 0;\n    try {\n      promiseOrValue = initialPromise ?? config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n    Promise.resolve(promiseOrValue).then(resolve).catch((error) => {\n      if (isResolved) {\n        return;\n      }\n      const retry = config.retry ?? (isServer ? 0 : 3);\n      const retryDelay = config.retryDelay ?? defaultRetryDelay;\n      const delay = typeof retryDelay === \"function\" ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === \"number\" && failureCount < retry || typeof retry === \"function\" && retry(failureCount, error);\n      if (isRetryCancelled || !shouldRetry) {\n        reject(error);\n        return;\n      }\n      failureCount++;\n      config.onFail?.(failureCount, error);\n      sleep(delay).then(() => {\n        return canContinue() ? void 0 : pause();\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  };\n  return {\n    promise: thenable,\n    cancel,\n    continue: () => {\n      continueFn?.();\n      return thenable;\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      if (canStart()) {\n        run();\n      } else {\n        pause().then(run);\n      }\n      return thenable;\n    }\n  };\n}\nexport {\n  CancelledError,\n  canFetch,\n  createRetryer,\n  isCancelledError\n};\n//# sourceMappingURL=retryer.js.map","// src/subscribable.ts\nvar Subscribable = class {\n  constructor() {\n    this.listeners = /* @__PURE__ */ new Set();\n    this.subscribe = this.subscribe.bind(this);\n  }\n  subscribe(listener) {\n    this.listeners.add(listener);\n    this.onSubscribe();\n    return () => {\n      this.listeners.delete(listener);\n      this.onUnsubscribe();\n    };\n  }\n  hasListeners() {\n    return this.listeners.size > 0;\n  }\n  onSubscribe() {\n  }\n  onUnsubscribe() {\n  }\n};\nexport {\n  Subscribable\n};\n//# sourceMappingURL=subscribable.js.map","// src/thenable.ts\nfunction pendingThenable() {\n  let resolve;\n  let reject;\n  const thenable = new Promise((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  thenable.status = \"pending\";\n  thenable.catch(() => {\n  });\n  function finalize(data) {\n    Object.assign(thenable, data);\n    delete thenable.resolve;\n    delete thenable.reject;\n  }\n  thenable.resolve = (value) => {\n    finalize({\n      status: \"fulfilled\",\n      value\n    });\n    resolve(value);\n  };\n  thenable.reject = (reason) => {\n    finalize({\n      status: \"rejected\",\n      reason\n    });\n    reject(reason);\n  };\n  return thenable;\n}\nexport {\n  pendingThenable\n};\n//# sourceMappingURL=thenable.js.map","// src/utils.ts\nvar isServer = typeof window === \"undefined\" || \"Deno\" in globalThis;\nfunction noop() {\n}\nfunction functionalUpdate(updater, input) {\n  return typeof updater === \"function\" ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n  return typeof value === \"number\" && value >= 0 && value !== Infinity;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction resolveStaleTime(staleTime, query) {\n  return typeof staleTime === \"function\" ? staleTime(query) : staleTime;\n}\nfunction resolveEnabled(enabled, query) {\n  return typeof enabled === \"function\" ? enabled(query) : enabled;\n}\nfunction matchQuery(filters, query) {\n  const {\n    type = \"all\",\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale\n  } = filters;\n  if (queryKey) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false;\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false;\n    }\n  }\n  if (type !== \"all\") {\n    const isActive = query.isActive();\n    if (type === \"active\" && !isActive) {\n      return false;\n    }\n    if (type === \"inactive\" && isActive) {\n      return false;\n    }\n  }\n  if (typeof stale === \"boolean\" && query.isStale() !== stale) {\n    return false;\n  }\n  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {\n    return false;\n  }\n  if (predicate && !predicate(query)) {\n    return false;\n  }\n  return true;\n}\nfunction matchMutation(filters, mutation) {\n  const { exact, status, predicate, mutationKey } = filters;\n  if (mutationKey) {\n    if (!mutation.options.mutationKey) {\n      return false;\n    }\n    if (exact) {\n      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n        return false;\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false;\n    }\n  }\n  if (status && mutation.state.status !== status) {\n    return false;\n  }\n  if (predicate && !predicate(mutation)) {\n    return false;\n  }\n  return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n  const hashFn = options?.queryKeyHashFn || hashKey;\n  return hashFn(queryKey);\n}\nfunction hashKey(queryKey) {\n  return JSON.stringify(\n    queryKey,\n    (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n      result[key] = val[key];\n      return result;\n    }, {}) : val\n  );\n}\nfunction partialMatchKey(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n    return !Object.keys(b).some((key) => !partialMatchKey(a[key], b[key]));\n  }\n  return false;\n}\nfunction replaceEqualDeep(a, b) {\n  if (a === b) {\n    return a;\n  }\n  const array = isPlainArray(a) && isPlainArray(b);\n  if (array || isPlainObject(a) && isPlainObject(b)) {\n    const aItems = array ? a : Object.keys(a);\n    const aSize = aItems.length;\n    const bItems = array ? b : Object.keys(b);\n    const bSize = bItems.length;\n    const copy = array ? [] : {};\n    let equalItems = 0;\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i];\n      if ((!array && aItems.includes(key) || array) && a[key] === void 0 && b[key] === void 0) {\n        copy[key] = void 0;\n        equalItems++;\n      } else {\n        copy[key] = replaceEqualDeep(a[key], b[key]);\n        if (copy[key] === a[key] && a[key] !== void 0) {\n          equalItems++;\n        }\n      }\n    }\n    return aSize === bSize && equalItems === aSize ? a : copy;\n  }\n  return b;\n}\nfunction shallowEqualObjects(a, b) {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false;\n  }\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isPlainArray(value) {\n  return Array.isArray(value) && value.length === Object.keys(value).length;\n}\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  }\n  const ctor = o.constructor;\n  if (ctor === void 0) {\n    return true;\n  }\n  const prot = ctor.prototype;\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  }\n  if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n    return false;\n  }\n  if (Object.getPrototypeOf(o) !== Object.prototype) {\n    return false;\n  }\n  return true;\n}\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction sleep(timeout) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout);\n  });\n}\nfunction replaceData(prevData, data, options) {\n  if (typeof options.structuralSharing === \"function\") {\n    return options.structuralSharing(prevData, data);\n  } else if (options.structuralSharing !== false) {\n    if (process.env.NODE_ENV !== \"production\") {\n      try {\n        return replaceEqualDeep(prevData, data);\n      } catch (error) {\n        console.error(\n          `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`\n        );\n      }\n    }\n    return replaceEqualDeep(prevData, data);\n  }\n  return data;\n}\nfunction keepPreviousData(previousData) {\n  return previousData;\n}\nfunction addToEnd(items, item, max = 0) {\n  const newItems = [...items, item];\n  return max && newItems.length > max ? newItems.slice(1) : newItems;\n}\nfunction addToStart(items, item, max = 0) {\n  const newItems = [item, ...items];\n  return max && newItems.length > max ? newItems.slice(0, -1) : newItems;\n}\nvar skipToken = Symbol();\nfunction ensureQueryFn(options, fetchOptions) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (options.queryFn === skipToken) {\n      console.error(\n        `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`\n      );\n    }\n  }\n  if (!options.queryFn && fetchOptions?.initialPromise) {\n    return () => fetchOptions.initialPromise;\n  }\n  if (!options.queryFn || options.queryFn === skipToken) {\n    return () => Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`));\n  }\n  return options.queryFn;\n}\nexport {\n  addToEnd,\n  addToStart,\n  ensureQueryFn,\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  isPlainArray,\n  isPlainObject,\n  isServer,\n  isValidTimeout,\n  keepPreviousData,\n  matchMutation,\n  matchQuery,\n  noop,\n  partialMatchKey,\n  replaceData,\n  replaceEqualDeep,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  skipToken,\n  sleep,\n  timeUntilStale\n};\n//# sourceMappingURL=utils.js.map","\"use client\";\n\n// src/QueryClientProvider.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar QueryClientContext = React.createContext(\n  void 0\n);\nvar useQueryClient = (queryClient) => {\n  const client = React.useContext(QueryClientContext);\n  if (queryClient) {\n    return queryClient;\n  }\n  if (!client) {\n    throw new Error(\"No QueryClient set, use QueryClientProvider to set one\");\n  }\n  return client;\n};\nvar QueryClientProvider = ({\n  client,\n  children\n}) => {\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n  return /* @__PURE__ */ jsx(QueryClientContext.Provider, { value: client, children });\n};\nexport {\n  QueryClientContext,\n  QueryClientProvider,\n  useQueryClient\n};\n//# sourceMappingURL=QueryClientProvider.js.map","var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _AppReadyEvent_detail;\nlet wallets = undefined;\nconst registeredWalletsSet = new Set();\nfunction addRegisteredWallet(wallet) {\n    cachedWalletsArray = undefined;\n    registeredWalletsSet.add(wallet);\n}\nfunction removeRegisteredWallet(wallet) {\n    cachedWalletsArray = undefined;\n    registeredWalletsSet.delete(wallet);\n}\nconst listeners = {};\n/**\n * Get an API for {@link Wallets.get | getting}, {@link Wallets.on | listening for}, and\n * {@link Wallets.register | registering} {@link \"@wallet-standard/base\".Wallet | Wallets}.\n *\n * When called for the first time --\n *\n * This dispatches a {@link \"@wallet-standard/base\".WindowAppReadyEvent} to notify each Wallet that the app is ready\n * to register it.\n *\n * This also adds a listener for {@link \"@wallet-standard/base\".WindowRegisterWalletEvent} to listen for a notification\n * from each Wallet that the Wallet is ready to be registered by the app.\n *\n * This combination of event dispatch and listener guarantees that each Wallet will be registered synchronously as soon\n * as the app is ready whether the app loads before or after each Wallet.\n *\n * @return API for getting, listening for, and registering Wallets.\n *\n * @group App\n */\nexport function getWallets() {\n    if (wallets)\n        return wallets;\n    wallets = Object.freeze({ register, get, on });\n    if (typeof window === 'undefined')\n        return wallets;\n    const api = Object.freeze({ register });\n    try {\n        window.addEventListener('wallet-standard:register-wallet', ({ detail: callback }) => callback(api));\n    }\n    catch (error) {\n        console.error('wallet-standard:register-wallet event listener could not be added\\n', error);\n    }\n    try {\n        window.dispatchEvent(new AppReadyEvent(api));\n    }\n    catch (error) {\n        console.error('wallet-standard:app-ready event could not be dispatched\\n', error);\n    }\n    return wallets;\n}\nfunction register(...wallets) {\n    // Filter out wallets that have already been registered.\n    // This prevents the same wallet from being registered twice, but it also prevents wallets from being\n    // unregistered by reusing a reference to the wallet to obtain the unregister function for it.\n    wallets = wallets.filter((wallet) => !registeredWalletsSet.has(wallet));\n    // If there are no new wallets to register, just return a no-op unregister function.\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    if (!wallets.length)\n        return () => { };\n    wallets.forEach((wallet) => addRegisteredWallet(wallet));\n    listeners['register']?.forEach((listener) => guard(() => listener(...wallets)));\n    // Return a function that unregisters the registered wallets.\n    return function unregister() {\n        wallets.forEach((wallet) => removeRegisteredWallet(wallet));\n        listeners['unregister']?.forEach((listener) => guard(() => listener(...wallets)));\n    };\n}\nlet cachedWalletsArray;\nfunction get() {\n    if (!cachedWalletsArray) {\n        cachedWalletsArray = [...registeredWalletsSet];\n    }\n    return cachedWalletsArray;\n}\nfunction on(event, listener) {\n    listeners[event]?.push(listener) || (listeners[event] = [listener]);\n    // Return a function that removes the event listener.\n    return function off() {\n        listeners[event] = listeners[event]?.filter((existingListener) => listener !== existingListener);\n    };\n}\nfunction guard(callback) {\n    try {\n        callback();\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\nclass AppReadyEvent extends Event {\n    get detail() {\n        return __classPrivateFieldGet(this, _AppReadyEvent_detail, \"f\");\n    }\n    get type() {\n        return 'wallet-standard:app-ready';\n    }\n    constructor(api) {\n        super('wallet-standard:app-ready', {\n            bubbles: false,\n            cancelable: false,\n            composed: false,\n        });\n        _AppReadyEvent_detail.set(this, void 0);\n        __classPrivateFieldSet(this, _AppReadyEvent_detail, api, \"f\");\n    }\n    /** @deprecated */\n    preventDefault() {\n        throw new Error('preventDefault cannot be called');\n    }\n    /** @deprecated */\n    stopImmediatePropagation() {\n        throw new Error('stopImmediatePropagation cannot be called');\n    }\n    /** @deprecated */\n    stopPropagation() {\n        throw new Error('stopPropagation cannot be called');\n    }\n}\n_AppReadyEvent_detail = new WeakMap();\n/**\n * @deprecated Use {@link getWallets} instead.\n *\n * @group Deprecated\n */\nexport function DEPRECATED_getWallets() {\n    if (wallets)\n        return wallets;\n    wallets = getWallets();\n    if (typeof window === 'undefined')\n        return wallets;\n    const callbacks = window.navigator.wallets || [];\n    if (!Array.isArray(callbacks)) {\n        console.error('window.navigator.wallets is not an array');\n        return wallets;\n    }\n    const { register } = wallets;\n    const push = (...callbacks) => callbacks.forEach((callback) => guard(() => callback({ register })));\n    try {\n        Object.defineProperty(window.navigator, 'wallets', {\n            value: Object.freeze({ push }),\n        });\n    }\n    catch (error) {\n        console.error('window.navigator.wallets could not be set');\n        return wallets;\n    }\n    push(...callbacks);\n    return wallets;\n}\n//# sourceMappingURL=wallets.js.map"],"names":["focusManager","_subscribable_js__WEBPACK_IMPORTED_MODULE_0__","l","focused","cleanup","setup","_utils_js__WEBPACK_IMPORTED_MODULE_1__","sk","window","addEventListener","listener","onFocus","removeEventListener","onSubscribe","setEventListener","onUnsubscribe","hasListeners","setFocused","changed","isFocused","listeners","forEach","globalThis","document","visibilityState","Mutation","_removable_js__WEBPACK_IMPORTED_MODULE_0__","F","observers","mutationCache","retryer","config","mutationId","state","getDefaultState","setOptions","options","scheduleGc","updateGcTime","gcTime","meta","addObserver","observer","includes","push","clearGcTimeout","notify","type","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","execute","variables","_retryer_js__WEBPACK_IMPORTED_MODULE_1__","Mz","fn","mutationFn","Promise","reject","onFail","failureCount","error","dispatch","onPause","onContinue","retry","retryDelay","networkMode","canRun","restored","isPaused","canStart","onMutate","context","data","start","onSuccess","onSettled","onError","runNext","action","reducer","failureReason","submittedAt","Date","now","_notifyManager_js__WEBPACK_IMPORTED_MODULE_2__","V","batch","onMutationUpdate","notifyManager","createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","scheduleFn","setTimeout","cb","schedule","flush","originalQueue","result","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","setScheduler","onlineManager","online","onlineListener","onOnline","offlineListener","setOnline","bind","isOnline","Query","initialState","revertState","cache","defaultOptions","abortSignalConsumed","queryKey","queryHash","initialData","hasData","initialDataUpdatedAt","dataUpdateCount","dataUpdatedAt","errorUpdateCount","errorUpdatedAt","fetchFailureCount","fetchFailureReason","fetchMeta","isInvalidated","fetchStatus","promise","setData","newData","oE","updatedAt","manual","setState","setStateOptions","cancel","then","ZT","catch","resolve","destroy","silent","reset","isActive","some","Nc","enabled","isDisabled","getObserversCount","queryFn","CN","isStale","getCurrentResult","isStaleByTime","staleTime","Kp","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","shouldFetchOnReconnect","query","revert","cancelRetry","invalidate","fetch","fetchOptions","continueRetry","abortController","AbortController","addSignalProperty","Object","defineProperty","object","enumerable","get","signal","fetchFn","cG","queryFnContext","persister","behavior","onFetch","_retryer_js__WEBPACK_IMPORTED_MODULE_2__","DV","initialPromise","abort","fetchState","_notifyManager_js__WEBPACK_IMPORTED_MODULE_3__","onQueryUpdate","Kw","QueryCache","subscribable","constructor","queries","Map","build","client","utils","Rm","modern_query","A","defaultQueryOptions","getQueryDefaults","add","has","set","queryInMap","delete","clear","getAll","values","filters","defaultedFilters","exact","_x","findAll","keys","event","MutationCache","mutations","Set","scopes","modern_mutation","m","defaultMutationOptions","scope","scopeFor","scopedMutations","index","indexOf","splice","mutationsWithSameScope","firstPendingMutation","foundMutation","Array","from","X7","resumePausedMutations","pausedMutations","all","map","id","infiniteQueryBehavior","pages","direction","fetchMore","oldPages","oldPageParams","pageParams","currentPage","cancelled","aborted","fetchPage","param","previous","pageParam","page","maxPages","addTo","Ht","VX","pageParamFn","getPreviousPageParam","getNextPageParam","oldData","remainingPages","initialPageParam","lastIndex","QueryClient","queryCache","queryDefaults","mutationDefaults","mountCount","unsubscribeFocus","unsubscribeOnline","mount","j","subscribe","N","unmount","isFetching","isMutating","getQueryData","ensureQueryData","defaultedOptions","cachedData","fetchQuery","revalidateIfStale","KC","prefetchQuery","getQueriesData","setQueryData","updater","prevData","SE","setQueriesData","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","cancelOptions","defaultedCancelOptions","promises","invalidateQueries","refetchType","throwOnError","fetchInfiniteQuery","prefetchInfiniteQuery","ensureInfiniteQueryData","getQueryCache","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","Ym","defaults","to","queryDefault","assign","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","refetchOnReconnect","suspense","Removable","gcTimeout","_utils_js__WEBPACK_IMPORTED_MODULE_0__","PN","newGcTime","Math","max","Infinity","clearTimeout","defaultRetryDelay","min","canFetch","_onlineManager_js__WEBPACK_IMPORTED_MODULE_0__","CancelledError","Error","isCancelledError","value","createRetryer","continueFn","isRetryCancelled","isResolved","thenable","_thenable_js__WEBPACK_IMPORTED_MODULE_1__","O","canContinue","_focusManager_js__WEBPACK_IMPORTED_MODULE_2__","pause","continueResolve","run","promiseOrValue","_utils_js__WEBPACK_IMPORTED_MODULE_3__","delay","shouldRetry","_v","Subscribable","size","pendingThenable","_resolve","_reject","finalize","reason","isServer","noop","functionalUpdate","input","isValidTimeout","timeUntilStale","resolveStaleTime","resolveEnabled","matchQuery","predicate","stale","hashQueryKeyByOptions","partialMatchKey","matchMutation","hashKey","hashFn","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","sort","reduce","key","a","b","shallowEqualObjects","isPlainArray","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","getPrototypeOf","toString","call","sleep","timeout","replaceData","structuralSharing","replaceEqualDeep","array","aItems","aSize","bItems","bSize","copy","equalItems","i","addToEnd","items","item","newItems","slice","addToStart","skipToken","Symbol","ensureQueryFn","QueryClientContext","react__WEBPACK_IMPORTED_MODULE_0__","createContext","useQueryClient","useContext","queryClient","QueryClientProvider","children","useEffect","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","Provider","cachedWalletsArray","wallets","_AppReadyEvent_detail","__classPrivateFieldGet","receiver","kind","f","__classPrivateFieldSet","registeredWalletsSet","getWallets","freeze","register","on","api","detail","console","dispatchEvent","AppReadyEvent","wallet","undefined","guard","existingListener","Event","bubbles","cancelable","composed","preventDefault","stopImmediatePropagation","stopPropagation","DEPRECATED_getWallets","callbacks","navigator","WeakMap"],"sourceRoot":""}