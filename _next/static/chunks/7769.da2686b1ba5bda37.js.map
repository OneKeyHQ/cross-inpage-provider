{"version":3,"file":"static/chunks/7769.da2686b1ba5bda37.js","mappings":"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","sources":["webpack://_N_E/./components/DAppList.tsx","webpack://_N_E/./components/InfoLayout.tsx","webpack://_N_E/./components/chains/solana/builder.ts","webpack://_N_E/./components/chains/solana/params.ts","webpack://_N_E/./components/chains/solanaStandard/OffchainMessage.ts","webpack://_N_E/./components/chains/solanaStandard/dapps.config.ts","webpack://_N_E/./components/chains/solanaStandard/example.tsx","webpack://_N_E/./lib/api.ts","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/bn.js/lib|buffer","webpack://_N_E/<anon>"],"sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport { Card, CardContent, CardTitle } from './ui/card';\n\nexport type Dapp = {\n  name: string;\n  url: string;\n};\n\nexport type DappListProps = {\n  dapps: Dapp[];\n};\n\nconst DappList: React.FC<DappListProps> = ({ dapps }) => {\n  return (\n    <Card>\n      <CardTitle className=\"text-xl\">Dapp Bookmarks</CardTitle>\n      <CardContent className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3\">\n        {dapps.map((dapp, index) => (\n          <div key={index} className=\"border p-2 rounded-lg shadow-sm hover:shadow-md\">\n            <Link href={dapp.url} legacyBehavior>\n              <a className=\"text-blue-500 hover:underline text-lg block\">{dapp.name} →</a>\n            </Link>\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default DappList;\n","import { Card, CardContent, CardHeader } from './ui/card';\n\nexport type InfoLayoutProps = {\n  title?: string;\n  children?: React.ReactNode;\n};\n\nexport default function InfoLayout({ title, children }: InfoLayoutProps) {\n  return (\n    <Card>\n      {title && <CardHeader className=\"font-medium\">{title}</CardHeader>}\n      <CardContent className=\"flex flex-col flex-wrap gap-3 break-all\">{children}</CardContent>\n    </Card>\n  );\n}\n","import {\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionMessage,\n  VersionedMessage,\n  VersionedTransaction,\n  Connection,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID, createTransferInstruction, getAssociatedTokenAddress } from '@solana/spl-token';\n\nexport const createTransferTransaction = (\n  publicKey: PublicKey,\n  receiverPublicKey: string,\n  recentBlockhash: string,\n  amount: number,\n) => {\n  const receiver = new PublicKey(receiverPublicKey);\n\n  const transaction = new Transaction().add(\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: receiver,\n      lamports: amount,\n    }),\n  );\n  transaction.feePayer = publicKey;\n\n  transaction.recentBlockhash = recentBlockhash;\n  return transaction;\n};\n\nexport const hasVersionedTx = (tx: Transaction | VersionedTransaction) => {\n  return 'version' in tx;\n};\n\nexport const createVersionedLegacyTransaction = (\n  publicKey: PublicKey,\n  receiverPublicKey: string,\n  recentBlockhash: string,\n  amount: number,\n) => {\n  const receiver = new PublicKey(receiverPublicKey);\n\n  const instructions = [\n    SystemProgram.createAccount({\n      fromPubkey: publicKey,\n      newAccountPubkey: receiver,\n      lamports: amount,\n      space: 0,\n      programId: SystemProgram.programId,\n    }),\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: receiver,\n      lamports: amount,\n    }),\n  ];\n\n  const messageV0 = new TransactionMessage({\n    payerKey: publicKey,\n    recentBlockhash: recentBlockhash,\n    instructions,\n  }).compileToLegacyMessage();\n\n  const transaction = new VersionedTransaction(messageV0);\n  return transaction;\n};\n\nexport const createVersionedTransaction = (\n  publicKey: PublicKey,\n  receiverPublicKey: string,\n  recentBlockhash: string,\n  amount: number,\n) => {\n  const receiver = new PublicKey(receiverPublicKey);\n\n  const instructions = [\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: receiver,\n      lamports: amount,\n    }),\n  ];\n\n  const messageV0 = new TransactionMessage({\n    payerKey: publicKey,\n    recentBlockhash: recentBlockhash,\n    instructions,\n  }).compileToV0Message();\n\n  const transaction = new VersionedTransaction(messageV0);\n  return transaction;\n};\n\n// 将 async function 改为箭头函数形式的导出\nexport const createTokenTransferTransaction = async (\n  connection: Connection,\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  tokenMint: PublicKey,\n  recentBlockhash: string,\n  amount: number,\n  decimals: number\n): Promise<Transaction> => {\n  const transaction = new Transaction();\n\n  const fromTokenAccount = await getAssociatedTokenAddress(\n    tokenMint,\n    fromPubkey\n  );\n\n  const toTokenAccount = await getAssociatedTokenAddress(\n    tokenMint,\n    toPubkey\n  );\n\n  transaction.add(\n    createTransferInstruction(\n      fromTokenAccount,\n      toTokenAccount,\n      fromPubkey,\n      BigInt(amount * Math.pow(10, decimals)),\n    )\n  );\n\n  transaction.feePayer = fromPubkey;\n  transaction.recentBlockhash = recentBlockhash;\n\n  return transaction;\n};\n","const TOKEN_LIST = [\n  {\n    symbol: 'USDT',\n    tokenMint: 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',\n    decimals: 6\n  },\n  {\n    symbol: 'USDC',\n    tokenMint: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    decimals: 6\n  },\n  // {\n  //   symbol: 'RNDR',\n  //   tokenMint: '7atgF8KQo4wJrD5ATGX7t1V2zVvykPJbFfNeVf1icFv1',\n  //   decimals: 8\n  // },\n];\nexport default {\n  signMessage: [\n    {\n      id: 'signMessage',\n      name: 'signMessage',\n      value: 'Hello OneKey',\n    },\n  ],\n  signAndSendTransaction: (publicKey: string) => [\n    {\n      id: 'signAndSendTransaction',\n      name: 'Normal Transaction',\n      value: JSON.stringify({\n        toPubkey: publicKey,\n        amount: 100,\n      }),\n    },\n  ],\n  signAndSendTokenTransaction: (publicKey: string) => \n    TOKEN_LIST.map(token => ({\n      id: `signAndSendTokenTransaction_${token.symbol}`,\n      name: `Send ${token.symbol} Token`,\n      value: JSON.stringify({\n        tokenMint: token.tokenMint,\n        toPubkey: publicKey,\n        amount: 0.000001,\n        decimals: token.decimals\n      }),\n    })),\n  signMultipleTransaction: (publicKey: string) => [\n    {\n      id: 'signMultipleTransaction',\n      name: 'Sign Multiple Transaction',\n      value: JSON.stringify([\n        {\n          toPubkey: publicKey,\n          amount: 100,\n        },\n        {\n          toPubkey: publicKey,\n          amount: 100,\n        },\n      ]),\n    },\n  ],\n  signRawTransaction: [\n    {\n      id: 'sign raw tx Transaction',\n      name: 'stake io',\n      value: JSON.stringify({\n        message:\n          '78NZKdHqXG3dk1M3BzEuRStNSqZs7R7HpJqDC4XseXJdjvXCyY637Gpod7K2qSccnHkBiNoNLbjtDp5CAXzZNhY35qhfdW6imBpT8UwJJArJukctXz9uGFezAMpmHC8qyeUKeeW9DL9UpVLPrjRcq8UXxv4NaoGLsTenuziN76voXyd5Lo44EsLysFNBGELtHKzGXGznAhmabQnqnBJn64HadjRfZvjprcNiy6nbcrvjQQEZnDEXZ4WunuR7zfCZZPk1TUW2KFDymfyLYcY44cJvYi9L5VZdxvG1ifHRrxXefagfwAjL5a1wTRConmZTcVx5ayZ2SYDGxVdkrGDqLaFonGHxrzJmk1gs1mrLjqiQvQn79EQdxyvZyUDgUEMzV18yjm6nya57VXQfvei93zPDesRQTYs3yQzD1aYSjy2up3cgFNhRPt9vYZFHNBFnd9v1kPzffGbyMeNbeK8M3TPBbCxP6NEgzxmDsihB2s9bajKb3tpgaVUKQQrJiK8c5AvXWcewVFfSWBk6R7whTunRfUVXotR4d9VRfCoYgVUFZoUpSHGh111kKd4aygt4q9vh2MzoNkyoPJU32WtA899rXZ1baNKrkoeLmS7FxaSBa6jJLr1F3BHMLCnzWvPG2EE3y1afpjwkKz7Hf59rfSQFMghkHYc9DJPkbLiE4DcZiBf4q1gAva32ZZaSBruzFwLMjkm5roBx7CsmQ5tFnBtcYrF5eTke9TNNRxSLeZwU6ht1yMBsScKogN9Kmgq5uXFyAQ8BXnero7UaV7CYxeYjzeCSvsv3R',\n      }),\n    },\n  ],\n};\n","/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */\n\n// Max off-chain message length supported by Ledger\nconst OFFCM_MAX_LEDGER_LEN = 1212;\n// Max length of version 0 off-chain message\nconst OFFCM_MAX_V0_LEN = 65515;\n\nfunction isValidUTF8(data: Uint8Array): boolean {\n    const length = data.length;\n    let i = 0;\n\n    while (i < length) {\n        if (data[i] < 0x80) {\n            /* 0xxxxxxx */\n            ++i;\n        } else if ((data[i] & 0xe0) == 0xc0) {\n            /* 110XXXXx 10xxxxxx */\n            if (i + 1 >= length || (data[i + 1] & 0xc0) != 0x80 ||\n                (data[i] & 0xfe) == 0xc0) /* overlong? */ {\n                return false;\n            } else {\n                i += 2;\n            }\n        } else if ((data[i] & 0xf0) == 0xe0) {\n            /* 1110XXXX 10Xxxxxx 10xxxxxx */\n            if (i + 2 >= length || (data[i + 1] & 0xc0) != 0x80 || (data[i + 2] & 0xc0) != 0x80 ||\n                (data[i] == 0xe0 && (data[i + 1] & 0xe0) == 0x80) || /* overlong? */\n                (data[i] == 0xed && (data[i + 1] & 0xe0) == 0xa0) || /* surrogate? */\n                (data[i] == 0xef && data[i + 1] == 0xbf &&\n                 (data[i + 2] & 0xfe) == 0xbe)) /* U+FFFE or U+FFFF? */ {\n                return false;\n            } else {\n                i += 3;\n            }\n        } else if ((data[i] & 0xf8) == 0xf0) {\n            /* 11110XXX 10XXxxxx 10xxxxxx 10xxxxxx */\n            if (i + 3 >= length || (data[i + 1] & 0xc0) != 0x80 || (data[i + 2] & 0xc0) != 0x80 ||\n                (data[i + 3] & 0xc0) != 0x80 ||\n                (data[i] == 0xf0 && (data[i + 1] & 0xf0) == 0x80) || /* overlong? */\n                (data[i] == 0xf4 && data[i + 1] > 0x8f) || data[i] > 0xf4) /* > U+10FFFF? */ {\n                return false;\n            } else {\n                i += 4;\n            }\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport class OffchainMessage {\n    version: number;\n    messageFormat: number | undefined;\n    message: Buffer | undefined;\n\n    /**\n     * Constructs a new OffchainMessage\n     * @param {version: number, messageFormat: number, message: string | Buffer} opts - Constructor parameters\n     */\n    constructor(opts: { version?: number; messageFormat?: number; message: Buffer }) {\n        this.version = 0;\n        this.messageFormat = undefined;\n        this.message = undefined;\n\n        if (!opts) {\n            return;\n        }\n        if (opts.version) {\n            this.version = opts.version;\n        }\n        if (opts.messageFormat) {\n            this.messageFormat = opts.messageFormat;\n        }\n        if (opts.message) {\n            this.message = Buffer.from(opts.message);\n            if (this.version === 0) {\n                if (!this.messageFormat) {\n                    this.messageFormat = OffchainMessage.guessMessageFormat(this.message);\n                }\n            }\n        }\n    }\n\n    static guessMessageFormat(message: Buffer) {\n        if (Object.prototype.toString.call(message) !== '[object Uint8Array]') {\n            return undefined;\n        }\n        if (message.length <= OFFCM_MAX_LEDGER_LEN) {\n            if (OffchainMessage.isPrintableASCII(message)) {\n                return 0;\n            } else if (OffchainMessage.isUTF8(message)) {\n                return 1;\n            }\n        } else if (message.length <= OFFCM_MAX_V0_LEN) {\n            if (OffchainMessage.isUTF8(message)) {\n                return 2;\n            }\n        }\n        return undefined;\n    }\n\n    static isPrintableASCII(buffer: Buffer) {\n        return (\n            buffer &&\n            buffer.every((element) => {\n                return element >= 0x20 && element <= 0x7e;\n            })\n        );\n    }\n\n    static isUTF8(buffer: Buffer) {\n        return buffer && isValidUTF8(buffer);\n    }\n\n    isValid() {\n        if (this.version !== 0) {\n            return false;\n        }\n        if (!this.message) {\n            return false;\n        }\n        const format = OffchainMessage.guessMessageFormat(this.message);\n        return format != null && format === this.messageFormat;\n    }\n\n    isLedgerSupported(allowBlindSigning: boolean) {\n        return this.isValid() && (this.messageFormat === 0 || (this.messageFormat === 1 && allowBlindSigning));\n    }\n\n    serialize() {\n        if (!this.isValid()) {\n            throw new Error(`Invalid OffchainMessage: ${JSON.stringify(this)}`);\n        }\n        const buffer = Buffer.alloc(4);\n        let offset = buffer.writeUInt8(this.version);\n        offset = buffer.writeUInt8(this.messageFormat, offset);\n        offset = buffer.writeUInt16LE(this.message.length, offset);\n        return Buffer.concat([Buffer.from([255]), Buffer.from('solana offchain'), buffer, this.message]);\n    }\n}","export const dapps = [\n  {\n    name: 'Magic Eden',\n    url: 'https://magiceden.io/',\n  },\n  {\n    name: 'Mean Finance',\n    url: 'https://app.meanfi.com/',\n  },\n  {\n    name: 'Saber',\n    url: 'https://app.saber.so/',\n  },\n  {\n    name: 'ORCA',\n    url: 'https://www.orca.so/',\n  },\n  {\n    name: 'Rarible',\n    url: 'https://rarible.com/connect',\n  },\n  {\n    name: 'Raydium',\n    url: 'https://raydium.io/swap/',\n  },\n];\n","/* eslint-disable no-unsafe-optional-chaining */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-return */\nrequire('@solana/wallet-adapter-react-ui/styles.css');\nimport { dapps } from './dapps.config';\nimport { useEffect, useMemo } from 'react';\nimport { ApiPayload, ApiGroup } from '../../ApiActuator';\nimport { useWallet } from '../../../components/connect/WalletContext';\nimport DappList from '../../../components/DAppList';\nimport params from '../solana/params';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { useConnection, useWallet as useSolWallet } from '@solana/wallet-adapter-react';\nimport InfoLayout from '../../../components/InfoLayout';\nimport { createTransferTransaction, createVersionedLegacyTransaction, createVersionedTransaction, hasVersionedTx } from '../solana/builder';\nimport { verifySignIn } from '@solana/wallet-standard-util';\nimport nacl from 'tweetnacl';\nimport { Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { OffchainMessage } from './OffchainMessage';\nimport { getApiKey } from '../../../lib/api';\n\nfunction Example() {\n  const { setProvider } = useWallet();\n\n  const { connection } = useConnection();\n  const {\n    connected,\n    publicKey,\n    wallet,\n    disconnect,\n    signMessage,\n    signTransaction,\n    signAllTransactions,\n    sendTransaction,\n    signIn,\n  } = useSolWallet();\n\n  useEffect(() => {\n    if (connected) {\n      setProvider(true);\n    } else {\n      setProvider(false);\n    }\n  }, [connected, setProvider]);\n\n  useEffect(() => {\n    // @ts-expect-error\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    wallet?.adapter?.wallet?.features?.['standard:events']?.on('connect', (e: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      console.log('sol connect event', e);\n    });\n    // @ts-expect-error\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    wallet?.adapter?.wallet?.features?.['standard:events']?.on('disconnect', (e) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      console.log('sol disconnect event', e);\n    });\n    // @ts-expect-error\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    wallet?.adapter?.wallet?.features?.['standard:events']?.on('accountChanged', (e) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      console.log('sol accountChanged event', e);\n    });\n    // @ts-expect-error\n  }, [wallet?.adapter?.wallet]);\n\n  return (\n    <>\n      <WalletMultiButton />\n\n      <InfoLayout title=\"Base Info\">\n        {publicKey && <p>PublicKey: {publicKey.toBase58()}</p>}\n        {wallet?.adapter && <p>Wallet Name: {wallet?.adapter?.name}</p>}\n        {/* {wallet?.adapter && (\n          <p>Wallet Name: {wallet?.adapter?.wallet?.features}</p>\n        )} */}\n        {wallet?.adapter && (\n          // @ts-expect-error\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n          <p>Wallet Api Version: {wallet?.adapter?.wallet?.version?.toString()}</p>\n        )}\n        {wallet?.adapter && (\n          // @ts-expect-error\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n          <p>Accounts: {JSON.stringify(wallet?.adapter?.wallet?.accounts ?? [])}</p>\n        )}\n        {wallet?.adapter && (\n          // @ts-expect-error\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n          <p>Support chains: {JSON.stringify(wallet?.adapter?.wallet?.chains ?? [])}</p>\n        )}\n        {wallet?.adapter && (\n          <p>\n            Wallet Icon: <img src={wallet?.adapter.icon} />\n          </p>\n        )}\n      </InfoLayout>\n\n      <ApiGroup title=\"Basic Info\">\n        <ApiPayload\n          title=\"disconnect\"\n          description=\"断开链接\"\n          disableRequestContent\n          onExecute={async () => {\n            const res = await disconnect();\n            return JSON.stringify(res);\n          }}\n        />\n      </ApiGroup>\n      <ApiGroup title=\"Sign Message\">\n        <ApiPayload\n          title=\"signMessage\"\n          description=\"签名消息\"\n          presupposeParams={params.signMessage}\n          onExecute={async (request: string) => {\n            return await signMessage(Buffer.from(request, 'utf8'));\n          }}\n          onValidate={(request: string, result: string) => {\n            const signatureObj = new Uint8Array(JSON.parse(result));\n            const isValidSignature = nacl.sign.detached.verify(\n              Buffer.from(request, 'utf8'),\n              signatureObj,\n              publicKey.toBytes(),\n            );\n\n            if (isValidSignature) {\n              return Promise.resolve('Phantom: true (软件钱包标准)');\n            } else {\n              const offchainMessage = new OffchainMessage({\n                message: Buffer.from(request, 'utf8'),\n              });\n              const isValidSignature = nacl.sign.detached.verify(\n                offchainMessage.serialize(),\n                signatureObj,\n                publicKey.toBytes(),\n              );\n              if (isValidSignature) {\n                return Promise.resolve('OffchainMessage: true (Ledger 硬件钱包标准)');\n              }\n            }\n\n            return Promise.resolve('false');\n          }}\n        />\n        <ApiPayload\n          title=\"signIn\"\n          description=\"(暂不支持) Sign In With Solana EIP-4361\"\n          onGenerateRequest={() => {\n            const now: Date = new Date();\n            const currentDateTime = now.toISOString();\n\n            const uri = window.location.href;\n            const currentUrl = new URL(uri);\n            const domain = currentUrl.host;\n\n            return Promise.resolve(\n              JSON.stringify({\n                domain: domain,\n                statement: 'Approve this wallet is owned by you.',\n                version: '1',\n                nonce: 'oBbLoEldZs',\n                chainId: 'solana:mainnet',\n                issuedAt: currentDateTime,\n                resources: ['https://onekey.so'],\n              }),\n            );\n          }}\n          onExecute={async (request: string) => {\n            const signInData = JSON.parse(request);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            const res = await signIn(signInData);\n            return JSON.stringify(res);\n          }}\n          onValidate={async (request: string, result: string) => {\n            const backendInput = JSON.parse(request);\n            const output = JSON.parse(result);\n\n            const backendOutput = {\n              account: {\n                publicKey: publicKey.toBuffer(),\n              },\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n              signature: new Uint8Array(Buffer.from(output.signature.data)),\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n              signedMessage: new Uint8Array(Buffer.from(output.signedMessage.data)),\n            };\n\n            // @ts-expect-error\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            const res = verifySignIn(backendInput, backendOutput);\n            return Promise.resolve(res.toString());\n          }}\n        />\n      </ApiGroup>\n      <ApiGroup title=\"Transfer\">\n        <ApiPayload\n          title=\"signAndSendTransaction\"\n          description=\"签署并发送交易\"\n          presupposeParams={params.signAndSendTransaction(publicKey?.toBase58() || '')}\n          onExecute={async (request: string) => {\n            const {\n              toPubkey,\n              amount,\n            }: {\n              toPubkey: string;\n              amount: number;\n            } = JSON.parse(request);\n            const recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n\n            const transafe = createTransferTransaction(\n              publicKey,\n              toPubkey,\n              recentBlockhash,\n              amount,\n            );\n            const res = await sendTransaction(transafe, connection);\n            return JSON.stringify(res);\n          }}\n        />\n        <ApiPayload\n          title=\"signTransaction\"\n          description=\"签署交易\"\n          presupposeParams={params.signAndSendTransaction(publicKey?.toBase58() || '')}\n          onExecute={async (request: string) => {\n            const {\n              toPubkey,\n              amount,\n            }: {\n              toPubkey: string;\n              amount: number;\n            } = JSON.parse(request);\n            const recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n\n            const transafe = createTransferTransaction(\n              publicKey,\n              toPubkey,\n              recentBlockhash,\n              amount,\n            );\n            const res = await signTransaction(transafe);\n            if(hasVersionedTx(res)) {\n              return 'error: Tx is VersionedTransaction';\n            }\n            return Buffer.from(res.serialize()).toString('hex');\n          }}\n          onValidate={async (request: string, result: string) => {\n            const tx = Transaction.from(Buffer.from(result, 'hex'));\n            const verified = tx.verifySignatures();\n\n            const res = await connection.simulateTransaction(tx);\n            return {\n              success: res.value.err === null,\n              verified,\n              tryRun: res,\n              tx,\n            };\n          }}\n        />\n        <ApiPayload\n          title=\"signTransaction (Versioned)\"\n          description=\"签署 Versioned 交易\"\n          presupposeParams={params.signAndSendTransaction(publicKey?.toBase58())}\n          onExecute={async (request: string) => {\n            const {\n              toPubkey,\n              amount,\n            }: {\n              toPubkey: string;\n              amount: number;\n            } = JSON.parse(request);\n            const recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n\n            const transfer = createVersionedTransaction(\n              publicKey,\n              toPubkey,\n              recentBlockhash,\n              amount,\n            );\n            const res = await signTransaction(transfer);\n            if(!hasVersionedTx(res)) {\n              return 'error: Tx is legacy Transaction';\n            }\n            return Buffer.from(res.serialize()).toString('hex');\n          }}\n          onValidate={async (request: string, result: string) => {\n            const tx = VersionedTransaction.deserialize(Buffer.from(result, 'hex'));\n\n            const res = await connection.simulateTransaction(tx);\n            return {\n              success: res.value.err === null,\n              tryRun: res,\n              tx,\n            };\n          }}\n        />\n        <ApiPayload\n          title=\"signTransaction (Versioned legacy)\"\n          description=\"签署 Versioned legacy 交易, legacy 旧版本交易，但是返回值是 Versioned 的 Tx\"\n          presupposeParams={params.signAndSendTransaction(publicKey?.toBase58())}\n          onExecute={async (request: string) => {\n            const {\n              toPubkey,\n              amount,\n            }: {\n              toPubkey: string;\n              amount: number;\n            } = JSON.parse(request);\n            const recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n\n            const transfer = createVersionedLegacyTransaction(\n              publicKey,\n              toPubkey,\n              recentBlockhash,\n              amount,\n            );\n            console.log('transfer', transfer);\n            const res = await signTransaction(transfer);\n            console.log('res', res);\n            if(!hasVersionedTx(res)) {\n              return 'error:Tx is legacy Transaction';\n            }\n            return Buffer.from(res.serialize()).toString('hex');\n          }}\n          onValidate={async (request: string, result: string) => {\n            const tx = VersionedTransaction.deserialize(Buffer.from(result, 'hex'));\n\n            const res = await connection.simulateTransaction(tx);\n            return {\n              success: res.value.err === null,\n              tryRun: res,\n              tx,\n            };\n          }}\n        />\n        {/* <ApiPayload\n          title=\"signTransaction Raw Tx\"\n          description=\"签署 Raw Tx 交易\"\n          presupposeParams={params.signRawTransaction}\n          onExecute={async (request: string) => {\n            const { message } = JSON.parse(request);\n            const txByte = base58.decode(message);\n            let tx\n            try {\n              tx = Transaction.from(txByte);\n            } catch (e) {\n              tx = VersionedTransaction.deserialize(txByte);\n            }\n\n            const res = await signTransaction(tx);\n            return res;\n          }}\n        /> */}\n        <ApiPayload\n          title=\"signAllTransactions\"\n          description=\"签署多个交易\"\n          presupposeParams={params.signMultipleTransaction(publicKey?.toBase58() || '')}\n          onExecute={async (request: string) => {\n            const params: {\n              toPubkey: string;\n              amount: number;\n            }[] = JSON.parse(request);\n            const recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n\n            const trans = params.map((param) => {\n              return createTransferTransaction(\n                publicKey,\n                param.toPubkey,\n                recentBlockhash,\n                param.amount,\n              );\n            });\n            const res = await signAllTransactions(trans);\n            return res.map((r) => Buffer.from(r.serialize()).toString('hex'));\n          }}\n          onValidate={async (request: string, result: string) => {\n            const txArray = JSON.parse(result) as string[];\n            const txs = txArray.map((r) => Transaction.from(Buffer.from(r, 'hex')));\n            const verifiedResult = [];\n            for (const tx of txs) {\n              const verified = tx.verifySignatures();\n              const res = await connection.simulateTransaction(tx);\n              verifiedResult.push({\n                success: res.value.err === null,\n                verified,\n                tryRun: res,\n              });\n            }\n            return verifiedResult;\n          }}\n        />\n      </ApiGroup>\n\n      <DappList dapps={dapps} />\n    </>\n  );\n}\n\nexport default function App() {\n  const network = WalletAdapterNetwork.Mainnet;\n\n  // You can also provide a custom RPC endpoint.\n  const endpoint = useMemo(() => `https://go.getblock.io/${getApiKey(\"DEwWFkUCHktXRF8YWw1QCQQcEgQWTE1QDlgKRRVDRw8=\")}`, []);\n\n  const wallets = useMemo(\n    () => [],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [network],\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect localStorageKey=\"onekey_sol_dapp_example\">\n        <WalletModalProvider>\n          <Example />\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n","const DEFAULT_API = 'https://api.onekeytest.com'\n\nfunction getApiKey(apiKey:string, fromBase64 = true) {\n    if (fromBase64) {\n        const key = Buffer.from(apiKey, 'base64').toString();\n        return getApiKey(key, false);\n    }\n    let result = '';\n    for (let i = 0; i < apiKey.length; i++) {\n      const textChar = apiKey.charCodeAt(i);\n      const keyChar = DEFAULT_API.charCodeAt(i % DEFAULT_API.length);\n      result += String.fromCharCode(textChar ^ keyChar);\n    }\n\n    return result;\n}\n\nfunction getBase64ApiKey(apiKey:string) {\n    const key = getApiKey(apiKey, false);\n    return Buffer.from(key).toString('base64');\n}\n\nexport { getApiKey, getBase64ApiKey };","/* (ignored) */"],"names":["__webpack_exports__","Z","dapps","param","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Card","jsx","CardTitle","className","CardContent","map","dapp","index","div","Link","href","url","legacyBehavior","a","name","InfoLayout","title","children","CardHeader","createTransferTransaction","publicKey","receiverPublicKey","recentBlockhash","amount","receiver","PublicKey","transaction","Transaction","add","SystemProgram","transfer","fromPubkey","toPubkey","lamports","feePayer","hasVersionedTx","tx","createVersionedLegacyTransaction","instructions","createAccount","newAccountPubkey","space","programId","messageV0","TransactionMessage","payerKey","compileToLegacyMessage","VersionedTransaction","createVersionedTransaction","compileToV0Message","createTokenTransferTransaction","connection","tokenMint","decimals","fromTokenAccount","getAssociatedTokenAddress","toTokenAccount","createTransferInstruction","BigInt","Math","pow","TOKEN_LIST","symbol","signMessage","id","value","signAndSendTransaction","JSON","stringify","signAndSendTokenTransaction","token","concat","signMultipleTransaction","signRawTransaction","message","OffchainMessage","guessMessageFormat","Object","prototype","toString","call","length","isPrintableASCII","isUTF8","buffer","every","element","isValidUTF8","data","i","isValid","version","format","messageFormat","isLedgerSupported","allowBlindSigning","serialize","Buffer","alloc","offset","writeUInt8","writeUInt16LE","from","constructor","opts","undefined","Example","wallet","setProvider","useWallet","useConnection","connected","disconnect","signTransaction","signAllTransactions","sendTransaction","signIn","useSolWallet","useEffect","adapter","features","on","console","log","e","jsx_runtime","Fragment","WalletMultiButton","p","toBase58","accounts","chains","img","src","icon","ApiGroup","ApiPayload","description","disableRequestContent","onExecute","res","presupposeParams","params","request","onValidate","result","signatureObj","Uint8Array","parse","isValidSignature","nacl","detached","verify","toBytes","Promise","resolve","offchainMessage","onGenerateRequest","now","Date","currentDateTime","toISOString","uri","window","location","currentUrl","URL","domain","host","statement","nonce","chainId","issuedAt","resources","signInData","backendInput","output","backendOutput","account","toBuffer","signature","signedMessage","verifySignIn","getLatestBlockhash","blockhash","transafe","verified","verifySignatures","simulateTransaction","success","err","tryRun","deserialize","trans","r","txArray","txs","verifiedResult","push","DappList","App","network","WalletAdapterNetwork","Mainnet","endpoint","useMemo","getApiKey","wallets","ConnectionProvider","WalletProvider","autoConnect","localStorageKey","WalletModalProvider","require","apiKey","fromBase64","key","textChar","charCodeAt","keyChar","DEFAULT_API","String","fromCharCode"],"sourceRoot":""}