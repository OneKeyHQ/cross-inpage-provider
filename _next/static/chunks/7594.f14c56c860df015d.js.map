{"version":3,"file":"static/chunks/7594.f14c56c860df015d.js","mappings":"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","sources":["webpack://_N_E/./node_modules/bignumber.js/bignumber.js","webpack://_N_E/<anon>"],"sourcesContent":[";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, -1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    // If any number is NaN, return NaN.\r\n    function maxOrMin(args, n) {\r\n      var k, y,\r\n        i = 1,\r\n        x = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        y = new BigNumber(args[i]);\r\n        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n          x = y;\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n"],"names":["__WEBPACK_AMD_DEFINE_RESULT__","globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","POWS_TEN","bitFloor","n","i","coeffToString","a","s","z","j","length","r","LOG_BASE","charCodeAt","slice","compare","x","y","b","xc","c","yc","k","e","l","intCheck","min","max","name","Error","String","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","div","convertBase","parseNumeric","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","normalise","pop","sd","d","ni","rd","out","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","call","maximum","arguments","minimum","random","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","m","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","gt","isGreaterThanOrEqualTo","gte","isLessThan","lt","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","BASE","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","undefined","exports","__webpack_require__","module"],"sourceRoot":""}