{"version":3,"file":"static/chunks/5160.f7f644c6e4eb8cf9.js","mappings":"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","sources":["webpack://_N_E/./node_modules/bcrypto/lib/bn-browser.js","webpack://_N_E/./node_modules/bcrypto/lib/chacha20-browser.js","webpack://_N_E/./node_modules/bcrypto/lib/internal/assert.js","webpack://_N_E/./node_modules/bcrypto/lib/internal/custom-browser.js","webpack://_N_E/./node_modules/bcrypto/lib/internal/hmac.js","webpack://_N_E/./node_modules/bcrypto/lib/js/batch-rng.js","webpack://_N_E/./node_modules/bcrypto/lib/js/bn.js","webpack://_N_E/./node_modules/bcrypto/lib/js/chacha20.js","webpack://_N_E/./node_modules/bcrypto/lib/js/keccak.js","webpack://_N_E/./node_modules/bcrypto/lib/js/random.js","webpack://_N_E/./node_modules/bcrypto/lib/js/schnorr.js","webpack://_N_E/./node_modules/bcrypto/lib/js/sha256.js","webpack://_N_E/./node_modules/bcrypto/lib/keccak-browser.js","webpack://_N_E/./node_modules/bcrypto/lib/random-browser.js","webpack://_N_E/./node_modules/bcrypto/lib/schnorr-browser.js","webpack://_N_E/./node_modules/bcrypto/lib/sha256-browser.js","webpack://_N_E/./node_modules/bcrypto/lib/shake.js","webpack://_N_E/./node_modules/bcrypto/lib/shake256.js","webpack://_N_E/./node_modules/@radix-ui/react-dialog/dist/index.mjs","webpack://_N_E/<anon>"],"sourcesContent":["/*!\n * bn.js - big numbers for bcrypto\n * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n\n'use strict';\n\nmodule.exports = require('./js/bn');\n","/*!\n * chacha20.js - chacha20 for bcrypto\n * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n\n'use strict';\n\nmodule.exports = require('./js/chacha20');\n","/*!\n * assert.js - assert for bcrypto\n * Copyright (c) 2020, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n\n'use strict';\n\n/*\n * Assert\n */\n\nfunction assert(val, msg) {\n  if (!val) {\n    const err = new Error(msg || 'Assertion failed');\n\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(err, assert);\n\n    throw err;\n  }\n}\n\n/*\n * Expose\n */\n\nmodule.exports = assert;\n","/*!\n * custom.js - custom inspect symbol for bcrypto\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n\n'use strict';\n\nexports.custom = 'inspect';\n","/*!\n * hmac.js - hmac for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/hash.js:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/hash.js\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/HMAC\n *   https://tools.ietf.org/html/rfc2104\n *   https://github.com/indutny/hash.js/blob/master/lib/hash/hmac.js\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\n\n/**\n * HMAC\n */\n\nclass HMAC {\n  /**\n   * Create an HMAC.\n   * @param {Function} Hash\n   * @param {Number} size\n   * @param {Array} [x=[]]\n   * @param {Array} [y=[]]\n   */\n\n  constructor(Hash, size, x = [], y = []) {\n    assert(typeof Hash === 'function');\n    assert((size >>> 0) === size);\n    assert(Array.isArray(x));\n    assert(Array.isArray(y));\n\n    this.hash = Hash;\n    this.size = size;\n    this.x = x;\n    this.y = y;\n\n    this.inner = new Hash();\n    this.outer = new Hash();\n  }\n\n  /**\n   * Initialize HMAC context.\n   * @param {Buffer} data\n   */\n\n  init(key) {\n    assert(Buffer.isBuffer(key));\n\n    // Shorten key\n    if (key.length > this.size) {\n      const Hash = this.hash;\n      const h = new Hash();\n\n      h.init(...this.x);\n      h.update(key);\n\n      key = h.final(...this.y);\n\n      assert(key.length <= this.size);\n    }\n\n    // Pad key\n    const pad = Buffer.alloc(this.size);\n\n    for (let i = 0; i < key.length; i++)\n      pad[i] = key[i] ^ 0x36;\n\n    for (let i = key.length; i < pad.length; i++)\n      pad[i] = 0x36;\n\n    this.inner.init(...this.x);\n    this.inner.update(pad);\n\n    for (let i = 0; i < key.length; i++)\n      pad[i] = key[i] ^ 0x5c;\n\n    for (let i = key.length; i < pad.length; i++)\n      pad[i] = 0x5c;\n\n    this.outer.init(...this.x);\n    this.outer.update(pad);\n\n    return this;\n  }\n\n  /**\n   * Update HMAC context.\n   * @param {Buffer} data\n   */\n\n  update(data) {\n    this.inner.update(data);\n    return this;\n  }\n\n  /**\n   * Finalize HMAC context.\n   * @returns {Buffer}\n   */\n\n  final() {\n    this.outer.update(this.inner.final(...this.y));\n    return this.outer.final(...this.y);\n  }\n}\n\n/*\n * Expose\n */\n\nmodule.exports = HMAC;\n","/*!\n * batch-rng.js - batch rng for bcrypto\n * Copyright (c) 2019-2020, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on ElementsProject/secp256k1-zkp:\n *   Copyright (c) 2013, Pieter Wuille.\n *   https://github.com/ElementsProject/secp256k1-zkp\n *\n * Resources:\n *   https://github.com/ElementsProject/secp256k1-zkp/blob/11af701/src/modules/schnorrsig/main_impl.h#L166\n *   https://github.com/ElementsProject/secp256k1-zkp/blob/11af701/src/scalar_4x64_impl.h#L972\n *   https://github.com/ElementsProject/secp256k1-zkp/blob/11af701/src/scalar_8x32_impl.h#L747\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\nconst BN = require('../bn');\nconst ChaCha20 = require('../chacha20');\nconst SHA256 = require('../sha256');\n\n/**\n * BatchRNG\n */\n\nclass BatchRNG {\n  constructor(curve, encode = key => key) {\n    this.curve = curve;\n    this.encode = encode;\n    this.hash = new SHA256();\n    this.chacha = new ChaCha20();\n    this.key = Buffer.alloc(32, 0x00);\n    this.iv = Buffer.alloc(8, 0x00);\n    this.cache = [new BN(1), new BN(1)];\n  }\n\n  init(batch) {\n    assert(Array.isArray(batch));\n\n    this.hash.init();\n\n    for (const [msg, sig, key] of batch) {\n      this.hash.update(SHA256.digest(msg));\n      this.hash.update(sig);\n      this.hash.update(this.encode(key));\n    }\n\n    this.key = this.hash.final();\n    this.cache[0] = new BN(1);\n    this.cache[1] = new BN(1);\n\n    return this;\n  }\n\n  encrypt(counter) {\n    const size = this.curve.scalarSize * 2;\n    const data = Buffer.alloc(size, 0x00);\n    const left = data.slice(0, this.curve.scalarSize);\n    const right = data.slice(this.curve.scalarSize);\n\n    this.chacha.init(this.key, this.iv, counter);\n    this.chacha.encrypt(data);\n\n    return [\n      this.curve.decodeScalar(left),\n      this.curve.decodeScalar(right)\n    ];\n  }\n\n  refresh(counter) {\n    let overflow = 0;\n\n    for (;;) {\n      // First word is always zero.\n      this.iv[4] = overflow;\n      this.iv[5] = overflow >>> 8;\n      this.iv[6] = overflow >>> 16;\n      this.iv[7] = overflow >>> 24;\n\n      overflow += 1;\n\n      const [s1, s2] = this.encrypt(counter);\n\n      if (s1.isZero() || s1.cmp(this.curve.n) >= 0)\n        continue;\n\n      if (s2.isZero() || s2.cmp(this.curve.n) >= 0)\n        continue;\n\n      this.cache[0] = s1;\n      this.cache[1] = s2;\n\n      break;\n    }\n  }\n\n  generate(index) {\n    assert((index >>> 0) === index);\n\n    if (index & 1)\n      this.refresh(index >>> 1);\n\n    return this.cache[index & 1];\n  }\n}\n\n/*\n * Expose\n */\n\nmodule.exports = BatchRNG;\n","/*!\n * bn.js - big numbers for bcrypto\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/bn.js:\n *   Copyright (c) 2015, Fedor Indutny (MIT License).\n *   https://github.com/indutny/bn.js\n *\n * Parts of this software are based on golang/go:\n *   Copyright (c) 2009, The Go Authors. All rights reserved.\n *   https://github.com/golang/go\n *\n * Parts of this software are based on openssl/openssl:\n *   Copyright (c) 1998-2018, The OpenSSL Project (Apache License v2.0).\n *   Copyright (c) 1995-1998, Eric A. Young, Tim J. Hudson. All rights reserved.\n *   https://github.com/openssl/openssl\n *\n * Parts of this software are based on libgmp:\n *   Copyright (c) 1991-1997, 1999-2014, Free Software Foundation, Inc.\n *   https://gmplib.org/\n *\n * Parts of this software are based on v8/v8:\n *   Copyright (c) 2017, The V8 Project Authors (BSD-Style License).\n *   https://github.com/v8/v8\n *\n * Resources:\n *   https://github.com/indutny/bn.js/blob/master/lib/bn.js\n *   https://github.com/indutny/miller-rabin/blob/master/lib/mr.js\n *   https://github.com/golang/go/blob/master/src/math/big/int.go\n *   https://github.com/golang/go/blob/master/src/math/big/nat.go\n *   https://github.com/golang/go/blob/master/src/math/big/prime.go\n *   https://github.com/openssl/openssl/tree/master/crypto/bn\n *   https://github.com/openssl/openssl/blob/master/crypto/bn/bn_kron.c\n *   https://github.com/gnutls/nettle/blob/master/mini-gmp.c\n *   https://github.com/v8/v8/blob/master/src/objects/bigint.cc\n */\n\n/* eslint valid-typeof: \"off\" */\n\n'use strict';\n\nconst {custom} = require('../internal/custom');\n\n/*\n * Constants\n */\n\nconst zeros = [\n  '',\n  '0',\n  '00',\n  '000',\n  '0000',\n  '00000',\n  '000000',\n  '0000000',\n  '00000000',\n  '000000000',\n  '0000000000',\n  '00000000000',\n  '000000000000',\n  '0000000000000',\n  '00000000000000',\n  '000000000000000',\n  '0000000000000000',\n  '00000000000000000',\n  '000000000000000000',\n  '0000000000000000000',\n  '00000000000000000000',\n  '000000000000000000000',\n  '0000000000000000000000',\n  '00000000000000000000000',\n  '000000000000000000000000',\n  '0000000000000000000000000'\n];\n\nconst groupSizes = [\n  0x00, 0x19, 0x10, 0x0c, 0x0b, 0x0a,\n  0x09, 0x08, 0x08, 0x07, 0x07, 0x07,\n  0x07, 0x06, 0x06, 0x06, 0x06, 0x06,\n  0x06, 0x06, 0x05, 0x05, 0x05, 0x05,\n  0x05, 0x05, 0x05, 0x05, 0x05, 0x05,\n  0x05, 0x05, 0x05, 0x05, 0x05, 0x05\n];\n\nconst groupBases = [\n  0x00000000, 0x02000000, 0x0290d741, 0x01000000,\n  0x02e90edd, 0x039aa400, 0x0267bf47, 0x01000000,\n  0x0290d741, 0x00989680, 0x012959c3, 0x0222c000,\n  0x03bd7765, 0x0072e440, 0x00adcea1, 0x01000000,\n  0x01704f61, 0x0206fc40, 0x02cddcf9, 0x03d09000,\n  0x003e5185, 0x004ea360, 0x006235f7, 0x00798000,\n  0x009502f9, 0x00b54ba0, 0x00daf26b, 0x01069c00,\n  0x0138f9ad, 0x0172c9e0, 0x01b4d89f, 0x02000000,\n  0x025528a1, 0x02b54a20, 0x03216b93, 0x039aa400\n];\n\nconst primes = {\n  p192: null,\n  p224: null,\n  p521: null,\n  k256: null,\n  p251: null,\n  p25519: null,\n  p448: null\n};\n\nconst modes = {\n  NONE: 0,\n  QUO: 1,\n  REM: 2,\n  BOTH: 3,\n  EUCLID: 4,\n  ALL: 7\n};\n\nconst WND_WIDTH = 4;\nconst WND_SIZE = 1 << (WND_WIDTH - 1);\n\nconst HAS_BIGINT = typeof BigInt === 'function';\n\n/**\n * BN\n */\n\nclass BN {\n  constructor(num, base, endian) {\n    this.words = [0];\n    this.length = 1;\n    this.negative = 0;\n    this.red = null;\n    this.from(num, base, endian);\n  }\n\n  /*\n   * Addition Engine\n   */\n\n  _iadd(a, b) {\n    let carry = 0;\n    let i = 0;\n\n    // a.length > b.length\n    if (a.length < b.length)\n      [a, b] = [b, a];\n\n    if (a !== this)\n      this._alloc(a.length);\n\n    for (; i < b.length; i++) {\n      const r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n\n      this.words[i] = r & 0x3ffffff;\n\n      carry = r >>> 26;\n    }\n\n    for (; carry !== 0 && i < a.length; i++) {\n      const r = (a.words[i] | 0) + carry;\n\n      this.words[i] = r & 0x3ffffff;\n\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n\n    if (carry !== 0) {\n      this._alloc(this.length + 1);\n      this.words[this.length++] = carry;\n    } else if (a !== this) {\n      // Copy the rest of the words.\n      for (; i < a.length; i++)\n        this.words[i] = a.words[i];\n    }\n\n    // Note: we shouldn't need to strip here.\n    return this;\n  }\n\n  _iaddn(num) {\n    this.words[0] += num;\n\n    if (this.words[0] < 0x4000000)\n      return this;\n\n    // Carry.\n    let i = 0;\n\n    this._alloc(this.length + 1);\n\n    this.words[this.length] = 0;\n\n    for (; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      this.words[i + 1] += 1;\n    }\n\n    this.length = Math.max(this.length, i + 1);\n\n    // Note: we shouldn't need to strip here.\n    return this;\n  }\n\n  /*\n   * Addition\n   */\n\n  iadd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.negative === num.negative) {\n      // x + y == x + y\n      // (-x) + (-y) == -(x + y)\n      this._iadd(this, num);\n    } else {\n      // x + (-y) == x - y == -(y - x)\n      // (-x) + y == y - x == -(x - y)\n      const cmp = this.ucmp(num);\n\n      // x + (-x) == (-x) + x == 0\n      if (cmp === 0) {\n        this.words[0] = 0;\n        this.length = 1;\n        this.negative = 0;\n        return this;\n      }\n\n      if (cmp < 0) {\n        this._isub(num, this);\n        this.negative ^= 1;\n      } else {\n        this._isub(this, num);\n      }\n    }\n\n    return this;\n  }\n\n  iaddn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    const negative = (num < 0) | 0;\n\n    if (negative)\n      num = -num;\n\n    if (this.negative === negative) {\n      // x + y == x + y\n      // (-x) + (-y) == -(x + y)\n      this._iaddn(num);\n    } else {\n      // x + (-y) == x - y == -(y - x)\n      // (-x) + y == y - x == -(x - y)\n      if (this.length === 1 && this.words[0] < num) {\n        this.words[0] = num - this.words[0];\n        this.negative ^= 1;\n      } else {\n        this._isubn(num);\n      }\n    }\n\n    return this;\n  }\n\n  add(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (num.length > this.length)\n      return num.clone().iadd(this);\n\n    return this.clone().iadd(num);\n  }\n\n  addn(num) {\n    return this.clone().iaddn(num);\n  }\n\n  /*\n   * Subtraction Engine\n   */\n\n  _isub(a, b) {\n    let carry = 0;\n    let i = 0;\n\n    // a > b\n    assert(a.length >= b.length);\n\n    if (a !== this)\n      this._alloc(a.length);\n\n    for (; i < b.length; i++) {\n      const r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n\n      carry = r >> 26;\n\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    for (; carry !== 0 && i < a.length; i++) {\n      const r = (a.words[i] | 0) + carry;\n\n      carry = r >> 26;\n\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    assert(carry === 0);\n\n    // Copy rest of the words.\n    if (a !== this) {\n      for (; i < a.length; i++)\n        this.words[i] = a.words[i];\n    }\n\n    this.length = Math.max(this.length, i);\n\n    return this._strip();\n  }\n\n  _isubn(num) {\n    this.words[0] -= num;\n\n    if (this.words[0] >= 0)\n      return this._normalize();\n\n    assert(this.length !== 1);\n\n    // Carry.\n    this._alloc(this.length + 1);\n\n    for (let i = 0; i < this.length && this.words[i] < 0; i++) {\n      this.words[i] += 0x4000000;\n      this.words[i + 1] -= 1;\n    }\n\n    this.words[this.length] = 0;\n\n    return this._strip();\n  }\n\n  /*\n   * Subtraction\n   */\n\n  isub(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.negative !== num.negative) {\n      // x - (-y) == x + y\n      // (-x) - y == -(x + y)\n      this._iadd(this, num);\n    } else {\n      // x - y == x - y == -(y - x)\n      // (-x) - (-y) == y - x == -(x - y)\n      const cmp = this.ucmp(num);\n\n      // x - x == 0\n      if (cmp === 0) {\n        this.words[0] = 0;\n        this.length = 1;\n        this.negative = 0;\n        return this;\n      }\n\n      if (cmp < 0) {\n        this._isub(num, this);\n        this.negative ^= 1;\n      } else {\n        this._isub(this, num);\n      }\n    }\n\n    return this;\n  }\n\n  isubn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    const negative = (num < 0) | 0;\n\n    if (negative)\n      num = -num;\n\n    if (this.negative !== negative) {\n      // x - (-y) == x + y\n      // (-x) - y == -(x + y)\n      this._iaddn(num);\n    } else {\n      // x - y == x - y == -(y - x)\n      // (-x) - (-y) == y - x == -(x - y)\n      if (this.length === 1 && this.words[0] < num) {\n        this.words[0] = num - this.words[0];\n        this.negative ^= 1;\n      } else {\n        this._isubn(num);\n      }\n    }\n\n    return this;\n  }\n\n  sub(num) {\n    return this.clone().isub(num);\n  }\n\n  subn(num) {\n    return this.clone().isubn(num);\n  }\n\n  /*\n   * Multiplication Engine\n   */\n\n  _mul(num, out) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    enforce(BN.isBN(out), 'out', 'bignum');\n\n    if (this.length === 10 && num.length === 10)\n      return comb10MulTo(this, num, out);\n\n    const len = this.length + num.length;\n\n    if (len < 63)\n      return smallMulTo(this, num, out);\n\n    if (len < 1024)\n      return bigMulTo(this, num, out);\n\n    return jumboMulTo(this, num, out);\n  }\n\n  /*\n   * Multiplication\n   */\n\n  imul(num) {\n    return this.mul(num)._move(this);\n  }\n\n  imuln(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    const neg = (num < 0) | 0;\n\n    if (neg)\n      num = -num;\n\n    // Carry.\n    let carry = 0;\n\n    for (let i = 0; i < this.length; i++) {\n      const w = this.words[i] * num;\n      const lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      carry += lo >>> 26;\n\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    this.negative ^= neg;\n\n    if (carry !== 0) {\n      this._alloc(this.length + 1);\n      this.words[this.length++] = carry;\n    } else {\n      this._strip();\n    }\n\n    return this;\n  }\n\n  mul(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    const len = this.length + num.length;\n    const out = new BN();\n\n    out.words = new Array(len);\n\n    for (let i = 0; i < len; i ++)\n      out.words[i] = 0;\n\n    return this._mul(num, out);\n  }\n\n  muln(num) {\n    return this.clone().imuln(num);\n  }\n\n  /*\n   * Multiplication + Shift\n   */\n\n  mulShift(num, bits) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n\n    const r = this.mul(num);\n    const b = r.utestn(bits - 1);\n\n    r.iushrn(bits);\n\n    if (this.negative ^ num.negative)\n      return r.isubn(b);\n\n    return r.iaddn(b);\n  }\n\n  /*\n   * Division Engine\n   */\n\n  _div(num, flags) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    assert((flags & modes.ALL) === flags);\n    assert(flags !== modes.NONE);\n\n    const a = this;\n    const b = num;\n\n    nonzero(!b.isZero());\n\n    if (a.isZero())\n      return [new BN(0), new BN(0)];\n\n    const as = a.negative;\n    const bs = b.negative;\n\n    a.negative = 0;\n    b.negative = 0;\n\n    let q = null;\n    let r = null;\n\n    if (a.ucmp(b) < 0) {\n      if (flags & modes.QUO)\n        q = new BN(0);\n\n      if (flags & modes.REM)\n        r = a.clone();\n    } else if (b.length === 1) {\n      if (flags & modes.QUO)\n        q = a.quon(b.words[0]);\n\n      if (flags & modes.REM)\n        r = a.remn(b.words[0]);\n    } else {\n      [q, r] = a._wordDiv(b, flags);\n    }\n\n    a.negative = as;\n    b.negative = bs;\n\n    if (flags & modes.QUO) {\n      q.negative = a.negative ^ b.negative;\n      q._normalize();\n    }\n\n    if (flags & modes.REM) {\n      r.negative = a.negative;\n      r._normalize();\n    }\n\n    if (flags & modes.EUCLID) {\n      if (flags & modes.QUO) {\n        assert((flags & modes.REM) !== 0);\n\n        if (r.negative !== 0) {\n          if (b.negative !== 0)\n            q.iaddn(1);\n          else\n            q.isubn(1);\n        }\n      }\n\n      if (flags & modes.REM) {\n        if (r.negative !== 0) {\n          if (b.negative !== 0)\n            r.isub(b);\n          else\n            r.iadd(b);\n        }\n      }\n    }\n\n    return [q, r];\n  }\n\n  _wordDiv(num, flags) {\n    let a = this.clone();\n    let b = num;\n    let q = null;\n    let hi;\n\n    // Normalize.\n    const word = b.words[b.length - 1] | 0;\n    const shift = 26 - countBits(word);\n\n    if (shift !== 0) {\n      b = b.clone();\n\n      a.iushln(shift);\n      b.iushln(shift);\n\n      hi = b.words[b.length - 1] | 0;\n    } else {\n      hi = word;\n    }\n\n    // Initialize quotient.\n    const m = a.length - b.length;\n\n    assert(m >= 0);\n\n    if (flags & modes.QUO) {\n      q = new BN(0);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n\n      for (let i = 0; i < q.length; i++)\n        q.words[i] = 0;\n    }\n\n    // Diff.\n    const d = a.clone();\n\n    d._ishlnsubmul(b, 1, m);\n\n    if (d.negative === 0) {\n      if (q)\n        q.words[m] = 1;\n\n      a = d;\n    }\n\n    // Divide.\n    for (let j = m - 1; j >= 0; j--) {\n      const ahi = a.words[b.length + j];\n      const alo = a.words[b.length + j - 1];\n      const quo = ((ahi * 0x4000000 + alo) / hi) | 0;\n\n      let qj = Math.min(quo, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n\n      while (a.negative !== 0) {\n        qj -= 1;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        a.ineg();\n      }\n\n      if (q)\n        q.words[j] = qj;\n    }\n\n    // Strip.\n    if (q)\n      q._strip();\n\n    // Denormalize.\n    // Note: we shouldn't need to strip `a` here.\n    if ((flags & modes.REM) && shift !== 0)\n      a.iushrn(shift);\n\n    return [q, a];\n  }\n\n  _ishlnsubmul(num, mul, shift) {\n    let carry = 0;\n    let i = 0;\n\n    this._expand(num.length + shift);\n\n    for (; i < num.length; i++) {\n      const k = (this.words[i + shift] | 0) + carry;\n      const r = num.words[i] * mul;\n      const w = k - (r & 0x3ffffff);\n\n      carry = (w >> 26) - ((r / 0x4000000) | 0);\n\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    for (; i < this.length - shift; i++) {\n      const w = (this.words[i + shift] | 0) + carry;\n\n      carry = w >> 26;\n\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0)\n      return this._strip();\n\n    // Subtraction overflow.\n    assert(carry === -1);\n\n    carry = 0;\n\n    for (let i = 0; i < this.length; i++) {\n      const w = -(this.words[i] | 0) + carry;\n\n      carry = w >> 26;\n\n      this.words[i] = w & 0x3ffffff;\n    }\n\n    this.negative = 1;\n\n    return this._strip();\n  }\n\n  /*\n   * Truncation Division + Modulo\n   */\n\n  quorem(num) {\n    return this._div(num, modes.BOTH);\n  }\n\n  /*\n   * Truncation Division\n   */\n\n  iquo(num) {\n    return this.quo(num)._move(this);\n  }\n\n  iquon(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    nonzero(num !== 0);\n\n    const neg = (num < 0) | 0;\n\n    if (neg)\n      num = -num;\n\n    let carry = 0;\n\n    for (let i = this.length - 1; i >= 0; i--) {\n      const w = (this.words[i] | 0) + carry * 0x4000000;\n\n      this.words[i] = (w / num) | 0;\n\n      carry = w % num;\n    }\n\n    this.negative ^= neg;\n\n    return this._strip();\n  }\n\n  quo(num) {\n    return this._div(num, modes.QUO)[0];\n  }\n\n  quon(num) {\n    return this.clone().iquon(num);\n  }\n\n  /*\n   * Truncation Modulo\n   */\n\n  irem(num) {\n    return this.rem(num)._move(this);\n  }\n\n  iremn(num) {\n    let m = this.remrn(num);\n\n    if (m < 0)\n      m = -m;\n\n    this.words[0] = m;\n    this.length = 1;\n\n    return this._normalize();\n  }\n\n  rem(num) {\n    return this._div(num, modes.REM)[1];\n  }\n\n  remn(num) {\n    return this.clone().iremn(num);\n  }\n\n  remrn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    nonzero(num !== 0);\n\n    if (num < 0)\n      num = -num;\n\n    const p = (1 << 26) % num;\n\n    let acc = 0;\n\n    for (let i = this.length - 1; i >= 0; i--)\n      acc = (p * acc + (this.words[i] | 0)) % num;\n\n    return this.negative !== 0 ? (-acc | 0) : acc;\n  }\n\n  /*\n   * Euclidean Division + Modulo\n   */\n\n  divmod(num) {\n    return this._div(num, modes.BOTH | modes.EUCLID);\n  }\n\n  /*\n   * Euclidean Division\n   */\n\n  idiv(num) {\n    return this.div(num)._move(this);\n  }\n\n  idivn(num) {\n    if (this.negative === 0)\n      return this.iquon(num);\n\n    const r = this.remrn(num);\n\n    this.iquon(num);\n\n    if (r < 0) {\n      if (num < 0)\n        this.iaddn(1);\n      else\n        this.isubn(1);\n    }\n\n    return this;\n  }\n\n  div(num) {\n    return this._div(num, modes.BOTH | modes.EUCLID)[0];\n  }\n\n  divn(num) {\n    return this.clone().idivn(num);\n  }\n\n  /*\n   * Euclidean Modulo\n   */\n\n  imod(num) {\n    if (this.ucmp(num) < 0) {\n      if (this.negative !== 0) {\n        this._isub(num, this);\n        this.negative = 0;\n      }\n      return this;\n    }\n\n    return this.mod(num)._move(this);\n  }\n\n  imodn(num) {\n    this.words[0] = this.modrn(num);\n    this.length = 1;\n    this.negative = 0;\n    return this;\n  }\n\n  mod(num) {\n    return this._div(num, modes.REM | modes.EUCLID)[1];\n  }\n\n  modn(num) {\n    return this.clone().imodn(num);\n  }\n\n  modrn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    let r = this.remrn(num);\n\n    if (r < 0) {\n      if (num < 0)\n        r -= num;\n      else\n        r += num;\n    }\n\n    return r;\n  }\n\n  /*\n   * Round Division\n   */\n\n  divRound(num) {\n    const [q, r] = this.quorem(num);\n\n    // Fast case - exact division.\n    if (r.isZero())\n      return q;\n\n    const bit = num.words[0] & 1;\n\n    num.iushrn(1);\n\n    const cmp = r.ucmp(num);\n\n    num.iushln(1);\n\n    num.words[0] |= bit;\n\n    // Round down.\n    if (cmp < 0 || (num.isOdd() && cmp === 0))\n      return q;\n\n    // Round up.\n    if (this.negative ^ num.negative)\n      return q.isubn(1);\n\n    return q.iaddn(1);\n  }\n\n  /*\n   * Exponentiation\n   */\n\n  ipow(num) {\n    return this.pow(num)._move(this);\n  }\n\n  ipown(num) {\n    return this.pown(num)._move(this);\n  }\n\n  pow(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    let b = countBits(num.words[num.length - 1]);\n    let r = new BN(1);\n\n    for (let i = num.length - 1; i >= 0; i--) {\n      const word = num.words[i];\n\n      for (let j = b - 1; j >= 0; j--) {\n        r = r.sqr();\n\n        if ((word >> j) & 1)\n          r = r.mul(this);\n      }\n\n      b = 26;\n    }\n\n    return r;\n  }\n\n  pown(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if (num < 0)\n      num = -num;\n\n    if (num === 0)\n      return new BN(1);\n\n    if (num === 1)\n      return this.clone();\n\n    const bits = countBits(num);\n\n    let r = this;\n\n    for (let i = bits - 2; i >= 0; i--) {\n      r = r.sqr();\n\n      if ((num >> i) & 1)\n        r = r.mul(this);\n    }\n\n    return r;\n  }\n\n  isqr() {\n    return this.imul(this);\n  }\n\n  sqr() {\n    return this.mul(this);\n  }\n\n  /*\n   * Roots Engine\n   */\n\n  _rootrem(pow, rem) {\n    enforce((pow >>> 0) === pow, 'num', 'uint32');\n\n    if (pow === 0)\n      throw new RangeError('Zeroth root.');\n\n    if (~pow & this.negative)\n      throw new RangeError('Negative with even root.');\n\n    if (this.ucmpn(1) <= 0)\n      return [this.clone(), new BN(0)];\n\n    let u = new BN(0);\n    let t = BN.shift(1, this.bitLength() / pow + 1 | 0);\n    let v, r;\n\n    if (this.negative !== 0)\n      t.ineg();\n\n    if (pow === 2) {\n      do {\n        u = t;\n        t = this.quo(u);\n        t.iadd(u);\n        t.iushrn(1);\n      } while (t.ucmp(u) < 0);\n    } else {\n      do {\n        u = t;\n        t = u.pown(pow - 1);\n        t = this.quo(t);\n        v = u.muln(pow - 1);\n        t.iadd(v);\n        t = t.quon(pow);\n      } while (t.ucmp(u) < 0);\n    }\n\n    if (rem) {\n      t = u.pown(pow);\n      r = this.sub(t);\n    }\n\n    return [u, r];\n  }\n\n  /*\n   * Roots\n   */\n\n  rootrem(pow) {\n    return this._rootrem(pow, 1);\n  }\n\n  iroot(pow) {\n    return this.root(pow)._move(this);\n  }\n\n  root(pow) {\n    return this._rootrem(pow, 0)[0];\n  }\n\n  isPower(pow) {\n    enforce((pow >>> 0) === pow, 'num', 'uint32');\n\n    if (pow === 0 || (~pow & this.negative))\n      return false;\n\n    const [, r] = this.rootrem(pow);\n\n    return r.sign() === 0;\n  }\n\n  sqrtrem() {\n    return this.rootrem(2);\n  }\n\n  isqrt() {\n    return this.sqrt()._move(this);\n  }\n\n  sqrt() {\n    return this.root(2);\n  }\n\n  isSquare() {\n    return this.isPower(2);\n  }\n\n  /*\n   * AND\n   */\n\n  iand(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    let x = this;\n    let y = num;\n\n    if (x === y)\n      return x;\n\n    if ((x.negative | y.negative) === 0)\n      return x.iuand(y);\n\n    if ((x.negative & y.negative) === 1) {\n      // (-x) & (-y) == ~(x-1) & ~(y-1)\n      //             == ~((x-1) | (y-1))\n      //             == -(((x-1) | (y-1)) + 1)\n      x.iaddn(1);\n      y.iaddn(1);\n      x.iuor(y);\n      x.isubn(1);\n      y.isubn(1);\n      return x;\n    }\n\n    // Assume x is the positive number.\n    if (x.negative !== 0)\n      [x, y] = [y.clone(), x];\n\n    // x & (-y) == x & ~(y-1)\n    //          == x & ~(y-1)\n    const width = x.bitLength();\n\n    y.iaddn(1);\n    y.inotn(width);\n    x.iuand(y);\n    y.inotn(width);\n    y.isubn(1);\n\n    return x._move(this);\n  }\n\n  iandn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if ((this.negative | (num < 0)) !== 0)\n      return this.iand(new BN(num));\n\n    this.words[0] &= num;\n    this.length = 1;\n\n    return this;\n  }\n\n  and(num) {\n    return this.clone().iand(num);\n  }\n\n  andn(num) {\n    return this.clone().iandn(num);\n  }\n\n  andrn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if ((this.negative | (num < 0)) !== 0) {\n      const n = this.iand(new BN(num));\n\n      if (n.length > 1)\n        throw new RangeError('Number exceeds 26 bits.');\n\n      return n.negative !== 0 ? -n.words[0] : n.words[0];\n    }\n\n    return this.words[0] & num;\n  }\n\n  /*\n   * Unsigned AND\n   */\n\n  iuand(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    this.length = Math.min(this.length, num.length);\n\n    for (let i = 0; i < this.length; i++)\n      this.words[i] &= num.words[i];\n\n    return this._strip();\n  }\n\n  iuandn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    this.words[0] &= Math.abs(num);\n    this.length = 1;\n\n    return this._normalize();\n  }\n\n  uand(num) {\n    return this.clone().iuand(num);\n  }\n\n  uandn(num) {\n    return this.clone().iuandn(num);\n  }\n\n  uandrn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    const n = this.words[0] & Math.abs(num);\n\n    return this.negative !== 0 ? (-n | 0) : n;\n  }\n\n  /*\n   * OR\n   */\n\n  ior(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    let x = this;\n    let y = num;\n\n    if (x === y)\n      return x;\n\n    if ((x.negative | y.negative) === 0)\n      return x.iuor(y);\n\n    if ((x.negative & y.negative) === 1) {\n      // (-x) | (-y) == ~(x-1) | ~(y-1)\n      //             == ~((x-1) & (y-1))\n      //             == -(((x-1) & (y-1)) + 1)\n      x.iaddn(1);\n      y.iaddn(1);\n      x.iuand(y);\n      x.isubn(1);\n      y.isubn(1);\n      return x;\n    }\n\n    // Assume x is the positive number.\n    y = y.clone();\n\n    if (x.negative !== 0)\n      [x, y] = [y, x];\n\n    // x | (-y) == x | ~(y-1)\n    //          == ~((y-1) & ~x)\n    //          == -(((y-1) & ~x) + 1)\n    y.iaddn(1);\n    x.inotn(y.bitLength());\n    y.iuand(x);\n    y.isubn(1);\n\n    return y._move(this);\n  }\n\n  iorn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if ((this.negative | (num < 0)) !== 0)\n      return this.ior(new BN(num));\n\n    this.words[0] |= num;\n\n    return this;\n  }\n\n  or(num) {\n    return this.clone().ior(num);\n  }\n\n  orn(num) {\n    return this.clone().iorn(num);\n  }\n\n  /*\n   * Unsigned OR\n   */\n\n  iuor(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    this._expand(num.length);\n\n    for (let i = 0; i < num.length; i++)\n      this.words[i] |= num.words[i];\n\n    // Note: we shouldn't need to strip here.\n    return this;\n  }\n\n  iuorn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    this.words[0] |= Math.abs(num);\n\n    return this;\n  }\n\n  uor(num) {\n    return this.clone().iuor(num);\n  }\n\n  uorn(num) {\n    return this.clone().iuorn(num);\n  }\n\n  /*\n   * XOR\n   */\n\n  ixor(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    let x = this;\n    let y = num;\n\n    if (x === y) {\n      x.words[0] = 0;\n      x.length = 1;\n      x.negative = 0;\n      return x;\n    }\n\n    if ((x.negative | y.negative) === 0)\n      return x.iuxor(y);\n\n    if ((x.negative & y.negative) === 1) {\n      // (-x) ^ (-y) == ~(x-1) ^ ~(y-1)\n      //             == (x-1) ^ (y-1)\n      x.iaddn(1);\n      y.iaddn(1);\n      x.iuxor(y);\n      x.ineg();\n      y.isubn(1);\n      return x;\n    }\n\n    // Assume x is the positive number.\n    if (x.negative !== 0)\n      [x, y] = [y.clone(), x];\n\n    // x ^ (-y) == x ^ ~(y-1)\n    //          == ~(x ^ (y-1))\n    //          == -((x ^ (y-1)) + 1)\n    y.iaddn(1);\n    x.iuxor(y);\n    x.iaddn(1);\n    x.ineg();\n    y.isubn(1);\n\n    return x._move(this);\n  }\n\n  ixorn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if ((this.negative | (num < 0)) !== 0)\n      return this.ixor(new BN(num));\n\n    this.words[0] ^= num;\n\n    return this;\n  }\n\n  xor(num) {\n    return this.clone().ixor(num);\n  }\n\n  xorn(num) {\n    return this.clone().ixorn(num);\n  }\n\n  /*\n   * Unsigned XOR\n   */\n\n  iuxor(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    let a = this;\n    let b = num;\n\n    if (a.length < b.length)\n      [a, b] = [b, a];\n\n    let i = 0;\n\n    for (; i < b.length; i++)\n      this.words[i] = a.words[i] ^ b.words[i];\n\n    if (a !== this) {\n      this._alloc(a.length);\n\n      for (; i < a.length; i++)\n        this.words[i] = a.words[i];\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  }\n\n  iuxorn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    this.words[0] ^= Math.abs(num);\n\n    return this._normalize();\n  }\n\n  uxor(num) {\n    return this.clone().iuxor(num);\n  }\n\n  uxorn(num) {\n    return this.clone().iuxorn(num);\n  }\n\n  /*\n   * NOT\n   */\n\n  inot() {\n    if (this.negative !== 0) {\n      // ~(-x) == ~(~(x-1)) == x-1\n      this.ineg().isubn(1);\n    } else {\n      // ~x == -x-1 == -(x+1)\n      this.iaddn(1).ineg();\n    }\n    return this;\n  }\n\n  not() {\n    return this.clone().inot();\n  }\n\n  inotn(width) {\n    enforce((width >>> 0) === width, 'width', 'uint32');\n\n    const r = width % 26;\n\n    let s = Math.ceil(width / 26);\n    let i = 0;\n\n    // Extend the buffer with leading zeroes.\n    this._expand(s);\n\n    if (r > 0)\n      s -= 1;\n\n    // Handle complete words.\n    for (; i < s; i++)\n      this.words[i] ^= 0x3ffffff;\n\n    // Handle the residue.\n    if (r > 0)\n      this.words[i] ^= (1 << r) - 1;\n\n    // And remove leading zeroes.\n    return this._strip();\n  }\n\n  notn(width) {\n    return this.clone().inotn(width);\n  }\n\n  /*\n   * Left Shift\n   */\n\n  ishl(num) {\n    enforce(BN.isBN(num), 'bits', 'bignum');\n    enforce(num.bitLength() <= 32, 'bits', 'uint32');\n    return this.ishln(num.toNumber());\n  }\n\n  ishln(bits) {\n    return this.iushln(bits);\n  }\n\n  shl(num) {\n    return this.clone().ishl(num);\n  }\n\n  shln(bits) {\n    return this.clone().ishln(bits);\n  }\n\n  /*\n   * Unsigned Left Shift\n   */\n\n  iushl(num) {\n    enforce(BN.isBN(num), 'bits', 'bignum');\n    enforce(num.bitLength() <= 32, 'bits', 'uint32');\n    return this.iushln(num.toNumber());\n  }\n\n  iushln(bits) {\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n\n    const r = bits % 26;\n    const s = (bits - r) / 26;\n    const mask = ((1 << r) - 1) << (26 - r);\n\n    if (r !== 0) {\n      let carry = 0;\n\n      for (let i = 0; i < this.length; i++) {\n        const ncarry = this.words[i] & mask;\n        const c = ((this.words[i] | 0) - ncarry) << r;\n\n        this.words[i] = c | carry;\n\n        carry = ncarry >>> (26 - r);\n      }\n\n      if (carry !== 0) {\n        this._alloc(this.length + 1);\n        this.words[this.length++] = carry;\n      }\n    }\n\n    if (s !== 0) {\n      this._alloc(this.length + s);\n\n      for (let i = this.length - 1; i >= 0; i--)\n        this.words[i + s] = this.words[i];\n\n      for (let i = 0; i < s; i++)\n        this.words[i] = 0;\n\n      this.length += s;\n    }\n\n    return this._strip();\n  }\n\n  ushl(num) {\n    return this.clone().iushl(num);\n  }\n\n  ushln(bits) {\n    return this.clone().iushln(bits);\n  }\n\n  /*\n   * Right Shift Engine\n   */\n\n  _split(bits, output) {\n    const r = bits % 26;\n    const s = Math.min((bits - r) / 26, this.length);\n    const mask = (1 << r) - 1;\n\n    // Extended mode, copy masked part.\n    if (output) {\n      output._alloc(s);\n\n      for (let i = 0; i < s; i++)\n        output.words[i] = this.words[i];\n\n      output.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all.\n    } else if (this.length > s) {\n      this.length -= s;\n      for (let i = 0; i < this.length; i++)\n        this.words[i] = this.words[i + s];\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    let carry = 0;\n\n    if (r !== 0) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        const word = this.words[i] | 0;\n\n        this.words[i] = (carry << (26 - r)) | (word >>> r);\n\n        carry = word & mask;\n      }\n    }\n\n    // Push carried bits as a mask.\n    if (output) {\n      if (carry !== 0) {\n        output._alloc(output.length + 1);\n        output.words[output.length++] = carry;\n      } else {\n        if (output.length === 0)\n          output.words[output.length++] = 0;\n\n        output._strip();\n      }\n    }\n\n    return this._strip();\n  }\n\n  /*\n   * Right Shift\n   */\n\n  ishr(num) {\n    enforce(BN.isBN(num), 'bits', 'bignum');\n    enforce(num.bitLength() <= 32, 'bits', 'uint32');\n    return this.ishrn(num.toNumber());\n  }\n\n  ishrn(bits) {\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n\n    if (this.negative !== 0) {\n      // (-x) >> y == ~(x-1) >> y\n      //           == ~((x-1) >> y)\n      //           == -(((x-1) >> y) + 1)\n      this.iaddn(1);\n      this.iushrn(bits);\n      this.isubn(1);\n      return this;\n    }\n\n    return this.iushrn(bits);\n  }\n\n  shr(num) {\n    return this.clone().ishr(num);\n  }\n\n  shrn(bits) {\n    return this.clone().ishrn(bits);\n  }\n\n  /*\n   * Unsigned Right Shift\n   */\n\n  iushr(num) {\n    enforce(BN.isBN(num), 'bits', 'bignum');\n    enforce(num.bitLength() <= 32, 'bits', 'uint32');\n    return this.iushrn(num.toNumber());\n  }\n\n  iushrn(bits) {\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n    return this._split(bits, null);\n  }\n\n  ushr(num) {\n    return this.clone().iushr(num);\n  }\n\n  ushrn(bits) {\n    return this.clone().iushrn(bits);\n  }\n\n  /*\n   * Bit Manipulation\n   */\n\n  setn(bit, val) {\n    enforce((bit >>> 0) === bit, 'bit', 'uint32');\n\n    if (this.negative !== 0) {\n      this.iaddn(1);\n      this.usetn(bit, !val);\n      this.isubn(1);\n      return this;\n    }\n\n    return this.usetn(bit, val);\n  }\n\n  usetn(bit, val) {\n    enforce((bit >>> 0) === bit, 'bit', 'uint32');\n\n    const r = bit % 26;\n    const s = (bit - r) / 26;\n\n    this._expand(s + 1);\n\n    if (val)\n      this.words[s] |= (1 << r);\n    else\n      this.words[s] &= ~(1 << r);\n\n    return this._strip();\n  }\n\n  testn(bit) {\n    enforce((bit >>> 0) === bit, 'bit', 'uint32');\n\n    const r = bit % 26;\n    const s = (bit - r) / 26;\n\n    // Fast case: bit is much higher than all existing words.\n    if (this.length <= s)\n      return this.negative;\n\n    // Check bit and return.\n    const w = this.words[s];\n    const val = (w >> r) & 1;\n\n    if (this.negative !== 0) {\n      if (r > 0 && (w & ((1 << r) - 1)))\n        return val ^ 1;\n\n      let j = s;\n\n      while (j--) {\n        if (this.words[j] > 0)\n          return val ^ 1;\n      }\n    }\n\n    return val;\n  }\n\n  utestn(bit) {\n    enforce((bit >>> 0) === bit, 'bit', 'uint32');\n\n    const r = bit % 26;\n    const s = (bit - r) / 26;\n\n    // Fast case: bit is much higher than all existing words.\n    if (this.length <= s)\n      return 0;\n\n    // Check bit and return.\n    return (this.words[s] >> r) & 1;\n  }\n\n  imaskn(bits) {\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n\n    if (this.negative !== 0) {\n      this.iaddn(1);\n      this.inotn(bits + 1);\n      this.ineg();\n    }\n\n    return this.iumaskn(bits);\n  }\n\n  maskn(bits) {\n    return this.clone().imaskn(bits);\n  }\n\n  iumaskn(bits) {\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n\n    const r = bits % 26;\n\n    let s = (bits - r) / 26;\n\n    if (this.length <= s)\n      return this;\n\n    if (r !== 0)\n      s += 1;\n\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0)\n      this.words[this.length - 1] &= (1 << r) - 1;\n\n    if (this.length === 0)\n      this.words[this.length++] = 0;\n\n    return this._strip();\n  }\n\n  umaskn(bits) {\n    return this.clone().iumaskn(bits);\n  }\n\n  andln(num) {\n    return this.words[0] & num;\n  }\n\n  bit(pos) {\n    return this.utestn(pos);\n  }\n\n  bits(pos, width) {\n    enforce((pos >>> 0) === pos, 'pos', 'uint32');\n    enforce((width >>> 0) === width, 'width', 'uint32');\n    enforce(width <= 26, 'width', 'width');\n\n    const shift = pos % 26;\n    const index = (pos - shift) / 26;\n\n    if (index >= this.length)\n      return 0;\n\n    let bits = (this.words[index] >> shift) & ((1 << width) - 1);\n\n    if (shift + width > 26 && index + 1 < this.length) {\n      const more = shift + width - 26;\n      const next = this.words[index + 1] & ((1 << more) - 1);\n\n      bits |= next << (26 - shift);\n    }\n\n    return bits;\n  }\n\n  /*\n   * Negation\n   */\n\n  ineg() {\n    if (!this.isZero())\n      this.negative ^= 1;\n\n    return this;\n  }\n\n  neg() {\n    return this.clone().ineg();\n  }\n\n  iabs() {\n    this.negative = 0;\n    return this;\n  }\n\n  abs() {\n    return this.clone().iabs();\n  }\n\n  /*\n   * Comparison\n   */\n\n  cmp(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.negative !== num.negative)\n      return num.negative - this.negative;\n\n    const res = this.ucmp(num);\n\n    if (this.negative !== 0)\n      return -res | 0;\n\n    return res;\n  }\n\n  cmpn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    const negative = (num < 0) | 0;\n\n    if (this.negative !== negative)\n      return negative - this.negative;\n\n    const res = this.ucmpn(num);\n\n    if (this.negative !== 0)\n      return -res | 0;\n\n    return res;\n  }\n\n  eq(num) {\n    return this.cmp(num) === 0;\n  }\n\n  eqn(num) {\n    return this.cmpn(num) === 0;\n  }\n\n  gt(num) {\n    return this.cmp(num) > 0;\n  }\n\n  gtn(num) {\n    return this.cmpn(num) > 0;\n  }\n\n  gte(num) {\n    return this.cmp(num) >= 0;\n  }\n\n  gten(num) {\n    return this.cmpn(num) >= 0;\n  }\n\n  lt(num) {\n    return this.cmp(num) < 0;\n  }\n\n  ltn(num) {\n    return this.cmpn(num) < 0;\n  }\n\n  lte(num) {\n    return this.cmp(num) <= 0;\n  }\n\n  lten(num) {\n    return this.cmpn(num) <= 0;\n  }\n\n  sign() {\n    if (this.negative !== 0)\n      return -1;\n\n    if (this.length === 1 && this.words[0] === 0)\n      return 0;\n\n    return 1;\n  }\n\n  isZero() {\n    return this.length === 1 && this.words[0] === 0;\n  }\n\n  isNeg() {\n    return this.negative !== 0;\n  }\n\n  isPos() {\n    return this.negative === 0;\n  }\n\n  isOdd() {\n    return (this.words[0] & 1) === 1;\n  }\n\n  isEven() {\n    return (this.words[0] & 1) === 0;\n  }\n\n  /*\n   * Unsigned Comparison\n   */\n\n  ucmp(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.length < num.length)\n      return -1;\n\n    if (this.length > num.length)\n      return 1;\n\n    for (let i = this.length - 1; i >= 0; i--) {\n      const a = this.words[i] | 0;\n      const b = num.words[i] | 0;\n\n      if (a === b)\n        continue;\n\n      return (a > b) - (a < b);\n    }\n\n    return 0;\n  }\n\n  ucmpn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n\n    if (this.length > 1)\n      return 1;\n\n    const w = this.words[0] | 0;\n\n    if (num < 0)\n      num = -num;\n\n    return (w > num) - (w < num);\n  }\n\n  /*\n   * Number Theoretic Functions\n   */\n\n  legendre(num) {\n    const red = HAS_BIGINT ? BN.red(num) : BN.mont(num);\n    return this.toRed(red).redLegendre();\n  }\n\n  jacobi(num) {\n    // See: A Binary Algorithm for the Jacobi Symbol\n    //   J. Shallit, J. Sorenson\n    //   Page 3, Section 3\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (num.isZero() || num.isEven())\n      throw new Error('jacobi: `num` must be odd.');\n\n    let a = this._cloneNormal();\n    let b = num.clone();\n    let j = 1;\n\n    if (b.isNeg()) {\n      if (a.isNeg())\n        j = -1;\n      b.ineg();\n    }\n\n    if (a.isNeg() || a.ucmp(b) >= 0)\n      a.imod(b);\n\n    while (!a.isZero()) {\n      const bits = a._makeOdd();\n\n      if (bits & 1) {\n        const bmod8 = b.andln(7);\n\n        if (bmod8 === 3 || bmod8 === 5)\n          j = -j;\n      }\n\n      if (a.ucmp(b) < 0) {\n        [a, b] = [b, a];\n\n        if (a.andln(3) === 3 && b.andln(3) === 3)\n          j = -j;\n      }\n\n      a._isub(a, b).iushrn(1);\n\n      const bmod8 = b.andln(7);\n\n      if (bmod8 === 3 || bmod8 === 5)\n        j = -j;\n    }\n\n    if (b.cmpn(1) !== 0)\n      return 0;\n\n    return j;\n  }\n\n  kronecker(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.isZero())\n      return num.ucmpn(1) === 0 ? 1 : 0;\n\n    if (num.isZero())\n      return this.ucmpn(1) === 0 ? 1 : 0;\n\n    if (((this.words[0] | num.words[0]) & 1) === 0)\n      return 0;\n\n    const x = this;\n    const y = num.clone();\n    const bits = y._makeOdd();\n    const table = [0, 1, 0, -1, 0, -1, 0, 1];\n\n    let k = x.jacobi(y);\n\n    if (bits & 1)\n      k *= table[x.andln(7)];\n\n    return k | 0;\n  }\n\n  igcd(num) {\n    return this.gcd(num)._move(this);\n  }\n\n  gcd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.isZero())\n      return num.abs();\n\n    if (num.isZero())\n      return this.abs();\n\n    let a = this.clone();\n    let b = num.clone();\n\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two.\n    const shift = a._factor2(b);\n\n    if (shift !== 0) {\n      a.iushrn(shift);\n      b.iushrn(shift);\n    }\n\n    for (;;) {\n      a._makeOdd();\n      b._makeOdd();\n\n      const cmp = a.ucmp(b);\n\n      if (cmp < 0) {\n        // a > b\n        [a, b] = [b, a];\n      } else if (cmp === 0 || b.ucmpn(1) === 0) {\n        // Break if a == b.\n        // Break if b == 1 to avoid repeated subtraction.\n        break;\n      }\n\n      a._isub(a, b);\n    }\n\n    return b.iushln(shift);\n  }\n\n  ilcm(num) {\n    return this.lcm(num)._move(this);\n  }\n\n  lcm(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.isZero() || num.isZero())\n      return new BN(0);\n\n    return this.quo(this.gcd(num)).mul(num).iabs();\n  }\n\n  egcd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    if (this.isZero()) {\n      return [\n        new BN(0),\n        new BN(num.sign()),\n        num.abs()\n      ];\n    }\n\n    if (num.isZero()) {\n      return [\n        new BN(this.sign()),\n        new BN(0),\n        this.abs()\n      ];\n    }\n\n    const x = this.clone();\n    const y = num.clone();\n\n    x.negative = 0;\n    y.negative = 0;\n\n    // A * x + B * y = x\n    const A = new BN(1);\n    const B = new BN(0);\n\n    // C * x + D * y = y\n    const C = new BN(0);\n    const D = new BN(1);\n\n    // Remove common factor of two.\n    const g = x._factor2(y);\n\n    if (g > 0) {\n      x.iushrn(g);\n      y.iushrn(g);\n    }\n\n    const xp = x.clone();\n    const yp = y.clone();\n\n    while (!x.isZero()) {\n      let i = x._makeOdd();\n      let j = y._makeOdd();\n\n      while (i--) {\n        if (A.isOdd() || B.isOdd()) {\n          A.iadd(yp);\n          B.isub(xp);\n        }\n\n        A.iushrn(1);\n        B.iushrn(1);\n      }\n\n      while (j--) {\n        if (C.isOdd() || D.isOdd()) {\n          C.iadd(yp);\n          D.isub(xp);\n        }\n\n        C.iushrn(1);\n        D.iushrn(1);\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    if (this.negative !== 0)\n      C.ineg();\n\n    if (num.negative !== 0)\n      D.ineg();\n\n    return [C, D, y.iushln(g)];\n  }\n\n  iinvert(num) {\n    return this.invert(num)._move(this);\n  }\n\n  invert(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    range(num.sign() > 0, 'invert');\n\n    if (num.isOdd())\n      return this._invertp(num);\n\n    if (num.cmpn(1) === 0)\n      throw new RangeError('Not invertible.');\n\n    const [s,, g] = this.egcd(num);\n\n    if (g.cmpn(1) !== 0)\n      throw new RangeError('Not invertible.');\n\n    return s.imod(num);\n  }\n\n  ifermat(num) {\n    return this.fermat(num)._move(this);\n  }\n\n  fermat(num) {\n    const red = HAS_BIGINT ? BN.red(num) : BN.mont(num);\n    return this.toRed(red).redFermat().fromRed();\n  }\n\n  ipowm(y, m, mont) {\n    return this.powm(y, m, mont)._move(this);\n  }\n\n  powm(y, m, mont) {\n    const red = !HAS_BIGINT && mont ? BN.mont(m) : BN.red(m);\n    return this.toRed(red).redPow(y).fromRed();\n  }\n\n  ipowmn(y, m, mont) {\n    return this.powmn(y, m, mont)._move(this);\n  }\n\n  powmn(y, m, mont) {\n    const red = mont ? BN.mont(m) : BN.red(m);\n    return this.toRed(red).redPown(y).fromRed();\n  }\n\n  isqrtm(p) {\n    return this.sqrtm(p)._move(this);\n  }\n\n  sqrtm(p) {\n    enforce(BN.isBN(p), 'p', 'bignum');\n\n    let red;\n\n    if (p.andln(3) === 3 || p.andln(7) === 5) {\n      // Probably not worth the setup.\n      red = BN.red(p);\n    } else {\n      red = BN.mont(p);\n    }\n\n    return this.toRed(red).redSqrt().fromRed();\n  }\n\n  isqrtpq(p, q) {\n    return this.sqrtpq(p, q)._move(this);\n  }\n\n  sqrtpq(p, q) {\n    const sp = this.sqrtm(p);\n    const sq = this.sqrtm(q);\n    const [mp, mq] = p.egcd(q);\n    const lhs = sq.mul(mp).mul(p);\n    const rhs = sp.mul(mq).mul(q);\n    const n = p.mul(q);\n\n    return lhs.iadd(rhs).imod(n);\n  }\n\n  /*\n   * Primality Testing\n   */\n\n  isPrime(rng, reps, limit) {\n    enforce((reps >>> 0) === reps, 'reps', 'uint32');\n\n    if (!this.isPrimeMR(rng, reps + 1, true))\n      return false;\n\n    if (!this.isPrimeLucas(limit))\n      return false;\n\n    return true;\n  }\n\n  isPrimeMR(rng, reps, force2 = false) {\n    enforce((reps >>> 0) === reps, 'reps', 'uint32');\n    enforce(reps > 0, 'reps', 'integer');\n    enforce(typeof force2 === 'boolean', 'force2', 'boolean');\n\n    const n = this;\n\n    if (n.cmpn(7) < 0) {\n      return n.cmpn(2) === 0\n          || n.cmpn(3) === 0\n          || n.cmpn(5) === 0;\n    }\n\n    if (n.isEven())\n      return false;\n\n    const nm1 = n.subn(1);\n    const nm3 = nm1.subn(2);\n    const k = nm1.zeroBits();\n    const q = nm1.ushrn(k);\n\n    const red = BN.red(n);\n    const rnm1 = nm1.toRed(red);\n    const rone = new BN(1).toRed(red);\n\nnext:\n    for (let i = 0; i < reps; i++) {\n      let x;\n\n      if (i === reps - 1 && force2) {\n        x = new BN(2);\n      } else {\n        x = BN.random(rng, 0, nm3);\n        x.iaddn(2);\n      }\n\n      let y = x.toRed(red).redPow(q);\n\n      if (y.cmp(rone) === 0 || y.cmp(rnm1) === 0)\n        continue;\n\n      for (let j = 1; j < k; j++) {\n        y = y.redSqr();\n\n        if (y.cmp(rnm1) === 0)\n          continue next;\n\n        if (y.cmp(rone) === 0)\n          return false;\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  isPrimeLucas(limit = 0) {\n    enforce((limit >>> 0) === limit, 'limit', 'uint32');\n\n    const n = this;\n\n    // Ignore 0 and 1.\n    if (n.cmpn(1) <= 0)\n      return false;\n\n    // Two is the only even prime.\n    if (n.isEven())\n      return n.cmpn(2) === 0;\n\n    let p = 3;\n\n    for (;;) {\n      if (p > 10000) {\n        // Thought to be impossible.\n        throw new Error(`Cannot find (D/n) = -1 for ${n.toString(10)}.`);\n      }\n\n      if (limit !== 0 && p > limit) {\n        // Optional DoS limit.\n        return false;\n      }\n\n      const d = new BN(p * p - 4);\n      const j = d.jacobi(n);\n\n      if (j === -1)\n        break;\n\n      if (j === 0)\n        return n.cmpn(p + 2) === 0;\n\n      if (p === 40) {\n        if (n.isSquare())\n          return false;\n      }\n\n      p += 1;\n    }\n\n    const s = n.addn(1);\n    const r = s._makeOdd();\n\n    let vk = new BN(2);\n    let vk1 = new BN(p);\n\n    for (let i = s.bitLength(); i >= 0; i--) {\n      if (s.utestn(i)) {\n        vk = vk.mul(vk1).isubn(p).imod(n);\n        vk1 = vk1.sqr().isubn(2).imod(n);\n      } else {\n        vk1 = vk1.mul(vk).isubn(p).imod(n);\n        vk = vk.sqr().isubn(2).imod(n);\n      }\n    }\n\n    if (vk.cmpn(2) === 0 || vk.cmp(n.subn(2)) === 0) {\n      const a = vk.muln(p).imod(n);\n      const b = vk1.ushln(1).imod(n);\n\n      if (a.cmp(b) === 0)\n        return true;\n    }\n\n    for (let t = 0; t < r - 1; t++) {\n      if (vk.isZero())\n        return true;\n\n      if (vk.cmpn(2) === 0)\n        return false;\n\n      vk = vk.sqr().isubn(2).imod(n);\n    }\n\n    return false;\n  }\n\n  /*\n   * Twos Complement\n   */\n\n  toTwos(width) {\n    if (this.negative !== 0)\n      return this.abs().inotn(width).iaddn(1);\n\n    return this.clone();\n  }\n\n  fromTwos(width) {\n    enforce((width >>> 0) === width, 'width', 'uint32');\n    range(width > 0, 'width');\n\n    if (this.testn(width - 1))\n      return this.notn(width).iaddn(1).ineg();\n\n    return this.clone();\n  }\n\n  /*\n   * Reduction Context\n   */\n\n  toRed(ctx) {\n    enforce(ctx instanceof Red, 'ctx', 'reduction context');\n\n    if (this.red)\n      throw new Error('Already in reduction context.');\n\n    return ctx.convertTo(this);\n  }\n\n  fromRed() {\n    red(this.red, 'fromRed');\n    return this.red.convertFrom(this);\n  }\n\n  forceRed(ctx) {\n    enforce(ctx instanceof Red, 'ctx', 'reduction context');\n\n    if (this.red) {\n      if (!ctx.m.eq(this.red.m) || ctx.mont !== this.red.mont)\n        throw new Error('Already in reduction context.');\n    } else {\n      range(this.negative === 0, 'red');\n      range(this.ucmp(ctx.m) < 0, 'red');\n    }\n\n    return this.clone()._forceRed(ctx);\n  }\n\n  redIAdd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIAdd');\n    return this.red.iadd(this, num);\n  }\n\n  redAdd(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redAdd');\n    return this.red.add(this, num);\n  }\n\n  redIAddn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redIAddn');\n    return this.red.iaddn(this, num);\n  }\n\n  redAddn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redAddn');\n    return this.red.addn(this, num);\n  }\n\n  redISub(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redISub');\n    return this.red.isub(this, num);\n  }\n\n  redSub(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redSub');\n    return this.red.sub(this, num);\n  }\n\n  redISubn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redISubn');\n    return this.red.isubn(this, num);\n  }\n\n  redSubn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redSubn');\n    return this.red.subn(this, num);\n  }\n\n  redIMul(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIMul');\n    return this.red.imul(this, num);\n  }\n\n  redMul(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redMul');\n    return this.red.mul(this, num);\n  }\n\n  redIMuln(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redIMuln');\n    return this.red.imuln(this, num);\n  }\n\n  redMuln(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redMuln');\n    return this.red.muln(this, num);\n  }\n\n  redIDiv(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIDiv');\n    return this.red.idiv(this, num);\n  }\n\n  redDiv(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redDiv');\n    return this.red.div(this, num);\n  }\n\n  redIDivn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redIDivn');\n    return this.red.idivn(this, num);\n  }\n\n  redDivn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redDivn');\n    return this.red.divn(this, num);\n  }\n\n  redIPow(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIPow');\n    nonred(!num.red, 'redIPow');\n    return this.red.ipow(this, num);\n  }\n\n  redPow(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redPow');\n    nonred(!num.red, 'redPow');\n    return this.red.pow(this, num);\n  }\n\n  redIPown(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redIPown');\n    return this.red.ipown(this, num);\n  }\n\n  redPown(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redPown');\n    return this.red.pown(this, num);\n  }\n\n  redISqr() {\n    red(this.red, 'redISqr');\n    return this.red.isqr(this);\n  }\n\n  redSqr() {\n    red(this.red, 'redSqr');\n    return this.red.sqr(this);\n  }\n\n  redISqrt() {\n    red(this.red, 'redISqrt');\n    return this.red.isqrt(this);\n  }\n\n  redSqrt() {\n    red(this.red, 'redSqrt');\n    return this.red.sqrt(this);\n  }\n\n  redIDivSqrt(v) {\n    red(this.red, 'redIDivSqrt');\n    return this.red.idivsqrt(this, v);\n  }\n\n  redDivSqrt(v) {\n    red(this.red, 'redDivSqrt');\n    return this.red.divsqrt(this, v);\n  }\n\n  redIsSquare() {\n    red(this.red, 'redIsSquare');\n    return this.red.isSquare(this);\n  }\n\n  redIShl(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redIShl');\n    nonred(!num.red, 'redIShl');\n    return this.red.ishl(this, num);\n  }\n\n  redShl(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redShl');\n    nonred(!num.red, 'redShl');\n    return this.red.shl(this, num);\n  }\n\n  redIShln(num) {\n    enforce((num >>> 0) === num, 'num', 'uint32');\n    red(this.red, 'redIShln');\n    return this.red.ishln(this, num);\n  }\n\n  redShln(num) {\n    enforce((num >>> 0) === num, 'num', 'uint32');\n    red(this.red, 'redShln');\n    return this.red.shln(this, num);\n  }\n\n  redINeg() {\n    red(this.red, 'redINeg');\n    return this.red.ineg(this);\n  }\n\n  redNeg() {\n    red(this.red, 'redNeg');\n    return this.red.neg(this);\n  }\n\n  redEq(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n    red(this.red, 'redEq');\n    return this.red.eq(this, num);\n  }\n\n  redEqn(num) {\n    enforce(isSMI(num), 'num', 'smi');\n    red(this.red, 'redEqn');\n    return this.red.eqn(this, num);\n  }\n\n  redIsHigh() {\n    red(this.red, 'redIsHigh');\n    return this.red.isHigh(this);\n  }\n\n  redIsLow() {\n    red(this.red, 'redIsLow');\n    return this.red.isLow(this);\n  }\n\n  redIsOdd() {\n    red(this.red, 'redIsOdd');\n    return this.red.isOdd(this);\n  }\n\n  redIsEven() {\n    red(this.red, 'redIsEven');\n    return this.red.isEven(this);\n  }\n\n  redLegendre() {\n    red(this.red, 'redLegendre');\n    return this.red.legendre(this);\n  }\n\n  redJacobi() {\n    red(this.red, 'redJacobi');\n    return this.red.jacobi(this);\n  }\n\n  redKronecker() {\n    red(this.red, 'redKronecker');\n    return this.red.kronecker(this);\n  }\n\n  redIInvert() {\n    red(this.red, 'redIInvert');\n    return this.red.iinvert(this);\n  }\n\n  redInvert() {\n    red(this.red, 'redInvert');\n    return this.red.invert(this);\n  }\n\n  redIFermat() {\n    red(this.red, 'redIFermat');\n    return this.red.ifermat(this);\n  }\n\n  redFermat() {\n    red(this.red, 'redFermat');\n    return this.red.fermat(this);\n  }\n\n  /*\n   * Internal\n   */\n\n  _move(dest) {\n    dest.words = this.words;\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n    return dest;\n  }\n\n  _alloc(size) {\n    while (this.words.length < size)\n      this.words.push(0);\n\n    return this;\n  }\n\n  _expand(size) {\n    this._alloc(size);\n\n    while (this.length < size)\n      this.words[this.length++] = 0;\n\n    return this;\n  }\n\n  _strip() {\n    while (this.length > 1 && this.words[this.length - 1] === 0)\n      this.length -= 1;\n\n    return this._normalize();\n  }\n\n  _normalize() {\n    assert(this.length > 0);\n\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0)\n      this.negative = 0;\n\n    return this;\n  }\n\n  _check() {\n    // We never have a zero length number.\n    assert(this.length > 0);\n\n    // Cannot exceed array bounds.\n    assert(this.length <= this.words.length);\n\n    if (this.length === 1) {\n      // Must be normalized.\n      if (this.words[0] === 0)\n        assert(this.negative === 0);\n      return this;\n    }\n\n    // Must be stripped.\n    assert(this.words[this.length - 1] !== 0);\n\n    return this;\n  }\n\n  _invertp(p) {\n    // Penk's right shift binary EGCD.\n    //\n    // See: The Art of Computer Programming,\n    //      Volume 2, Seminumerical Algorithms\n    //   Donald E. Knuth\n    //   Exercise 4.5.2.39\n    enforce(BN.isBN(p), 'p', 'bignum');\n    range(p.sign() > 0, 'invert');\n    assert(p.isOdd());\n\n    if (p.cmpn(1) === 0)\n      throw new RangeError('Not invertible.');\n\n    const a = this.clone();\n    const b = p.clone();\n    const u = new BN(1);\n    const v = new BN(0);\n\n    if (a.isNeg() || a.ucmp(b) >= 0)\n      a.imod(b);\n\n    while (!a.isZero()) {\n      let i = a._makeOdd();\n      let j = b._makeOdd();\n\n      while (i--) {\n        if (u.isOdd())\n          u._iadd(u, p);\n\n        u.iushrn(1);\n      }\n\n      while (j--) {\n        if (v.isOdd())\n          v._iadd(v, p);\n\n        v.iushrn(1);\n      }\n\n      if (a.ucmp(b) >= 0) {\n        a._isub(a, b);\n        if (u.ucmp(v) < 0) {\n          u._isub(v, u);\n          u._isub(p, u);\n        } else {\n          u._isub(u, v);\n        }\n      } else {\n        b._isub(b, a);\n        if (v.ucmp(u) < 0) {\n          v._isub(u, v);\n          v._isub(p, v);\n        } else {\n          v._isub(v, u);\n        }\n      }\n    }\n\n    if (b.cmpn(1) !== 0)\n      throw new RangeError('Not invertible.');\n\n    assert(v.negative === 0);\n    assert(v.ucmp(p) < 0);\n\n    return v;\n  }\n\n  _makeOdd() {\n    const shift = this.zeroBits();\n\n    if (shift > 0)\n      this.iushrn(shift);\n\n    return shift;\n  }\n\n  _factor2(num) {\n    // Find common factor of two.\n    // Expects inputs to be non-zero.\n    if ((this.words[0] | num.words[0]) & 1)\n      return 0;\n\n    const len = Math.min(this.length, num.length);\n\n    let r = 0;\n\n    for (let i = 0; i < len; i++) {\n      const b = zeroBits(this.words[i] | num.words[i]);\n\n      r += b;\n\n      if (b !== 26)\n        break;\n    }\n\n    return r;\n  }\n\n  _cloneNormal() {\n    return this.red ? this.fromRed() : this.clone();\n  }\n\n  _forceRed(ctx) {\n    this.red = ctx;\n    return this;\n  }\n\n  /*\n   * Helpers\n   */\n\n  clone() {\n    const copy = new BN();\n\n    copy.words = new Array(this.length);\n\n    for (let i = 0; i < this.length; i++)\n      copy.words[i] = this.words[i];\n\n    copy.length = this.length;\n    copy.negative = this.negative;\n    copy.red = this.red;\n\n    return copy;\n  }\n\n  inject(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    this._alloc(num.length);\n\n    for (let i = 0; i < num.length; i++)\n      this.words[i] = num.words[i];\n\n    this.length = num.length;\n    this.negative = num.negative;\n    this.red = num.red;\n\n    return this;\n  }\n\n  set(num, endian) {\n    return this.fromNumber(num, endian);\n  }\n\n  swap(num) {\n    enforce(BN.isBN(num), 'num', 'bignum');\n\n    const x = this;\n    const y = num;\n\n    [x.words, y.words] = [y.words, x.words];\n    [x.length, y.length] = [y.length, x.length];\n    [x.negative, y.negative] = [y.negative, x.negative];\n    [x.red, y.red] = [y.red, x.red];\n\n    return x;\n  }\n\n  reverse() {\n    const neg = this.negative;\n\n    this.fromBuffer(this.toBuffer('be'), 'le');\n    this.negative = neg;\n\n    return this;\n  }\n\n  byteLength() {\n    return Math.ceil(this.bitLength() / 8);\n  }\n\n  bitLength() {\n    const w = this.words[this.length - 1];\n    const hi = countBits(w);\n    return (this.length - 1) * 26 + hi;\n  }\n\n  zeroBits() {\n    if (this.isZero())\n      return 0;\n\n    if (this.isOdd())\n      return 0;\n\n    let r = 0;\n\n    for (let i = 0; i < this.length; i++) {\n      const b = zeroBits(this.words[i]);\n\n      r += b;\n\n      if (b !== 26)\n        break;\n    }\n\n    return r;\n  }\n\n  isSafe() {\n    if (this.length <= 2)\n      return true;\n\n    if (this.length === 3 && this.words[2] === 0x01)\n      return true;\n\n    return false;\n  }\n\n  word(pos) {\n    enforce((pos >>> 0) === pos, 'pos', 'uint32');\n\n    if (pos >= this.length)\n      return 0;\n\n    return this.words[pos];\n  }\n\n  [custom]() {\n    let prefix = 'BN';\n\n    if (this.red)\n      prefix = 'BN-R';\n\n    return `<${prefix}: ${this.toString(10)}>`;\n  }\n\n  /*\n   * Conversion\n   */\n\n  toNumber() {\n    let num = this.words[0];\n\n    if (this.length === 2) {\n      num += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // Note: at this stage it is known that the top bit is set.\n      num += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      throw new RangeError('Number can only safely store up to 53 bits.');\n    }\n\n    return this.negative !== 0 ? -num : num;\n  }\n\n  toDouble() {\n    let num = 0;\n\n    for (let i = this.length - 1; i >= 0; i--)\n      num = (num * 0x4000000) + this.words[i];\n\n    return this.negative !== 0 ? -num : num;\n  }\n\n  valueOf() {\n    return this.toDouble();\n  }\n\n  toBigInt() {\n    if (!HAS_BIGINT)\n      throw new Error('BigInt is not supported!');\n\n    const s52 = BigInt(52);\n    const s26 = BigInt(26);\n\n    let i = this.length - 1;\n    let num = BigInt(0);\n\n    for (; i >= 1; i -= 2) {\n      const hi = this.words[i] * 0x4000000;\n      const lo = this.words[i - 1];\n\n      num = (num << s52) | BigInt(hi + lo);\n    }\n\n    if (i >= 0)\n      num = (num << s26) | BigInt(this.words[0]);\n\n    return this.negative !== 0 ? -num : num;\n  }\n\n  toBool() {\n    return !this.isZero();\n  }\n\n  toString(base, padding) {\n    base = getBase(base);\n\n    if (padding == null)\n      padding = 0;\n\n    if (padding === 0)\n      padding = 1;\n\n    enforce((base >>> 0) === base, 'base', 'uint32');\n    enforce((padding >>> 0) === padding, 'padding', 'uint32');\n\n    if (base < 2 || base > 36)\n      throw new RangeError('Base ranges between 2 and 36.');\n\n    this._check();\n\n    if (base === 16) {\n      let out = '';\n      let off = 0;\n      let carry = 0;\n\n      for (let i = 0; i < this.length; i++) {\n        const w = this.words[i];\n        const word = (((w << off) | carry) & 0xffffff).toString(16);\n\n        carry = (w >>> (24 - off)) & 0xffffff;\n\n        if (carry !== 0 || i !== this.length - 1)\n          out = zeros[6 - word.length] + word + out;\n        else\n          out = word + out;\n\n        off += 2;\n\n        if (off >= 26) {\n          off -= 26;\n          i -= 1;\n        }\n      }\n\n      if (carry !== 0)\n        out = carry.toString(16) + out;\n\n      while (out.length % padding !== 0)\n        out = '0' + out;\n\n      if (this.negative !== 0)\n        out = '-' + out;\n\n      return out;\n    }\n\n    const groupSize = groupSizes[base - 1];\n    const groupBase = groupBases[base - 1];\n    const c = this.clone();\n\n    let out = '';\n\n    c.negative = 0;\n\n    while (!c.isZero()) {\n      const r = c.remrn(groupBase).toString(base);\n\n      c.iquon(groupBase);\n\n      if (!c.isZero())\n        out = zeros[groupSize - r.length] + r + out;\n      else\n        out = r + out;\n    }\n\n    if (this.isZero())\n      out = '0';\n\n    while (out.length % padding !== 0)\n      out = '0' + out;\n\n    if (this.negative !== 0)\n      out = '-' + out;\n\n    return out;\n  }\n\n  toJSON() {\n    return this.toString(16, 2);\n  }\n\n  toArray(endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  }\n\n  toBuffer(endian, length) {\n    return this.toArrayLike(Buffer, endian, length);\n  }\n\n  toArrayLike(ArrayType, endian, length) {\n    if (endian == null)\n      endian = 'be';\n\n    if (length == null)\n      length = 0;\n\n    enforce(typeof ArrayType === 'function', 'ArrayType', 'function');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n    enforce((length >>> 0) === length, 'length', 'uint32');\n\n    this._check();\n\n    const bytes = this.byteLength();\n    const size = length || Math.max(1, bytes);\n\n    if (bytes > size)\n      throw new RangeError('Byte array longer than desired length.');\n\n    const res = allocate(ArrayType, size);\n\n    // See: https://github.com/indutny/bn.js/pull/222\n    if (endian === 'be') {\n      let pos = res.length - 1;\n      let carry = 0;\n\n      for (let i = 0; i < this.length; i++) {\n        const shift = (i & 3) << 1;\n        const word = (this.words[i] << shift) | carry;\n\n        res[pos--] = word & 0xff;\n\n        if (pos >= 0)\n          res[pos--] = (word >>> 8) & 0xff;\n\n        if (pos >= 0)\n          res[pos--] = (word >>> 16) & 0xff;\n\n        if (shift === 6) {\n          if (pos >= 0)\n            res[pos--] = (word >>> 24) & 0xff;\n\n          carry = 0;\n        } else {\n          carry = word >>> 24;\n        }\n      }\n\n      if (pos >= 0) {\n        res[pos--] = carry;\n\n        while (pos >= 0)\n          res[pos--] = 0;\n\n        carry = 0;\n      }\n\n      assert(carry === 0);\n    } else {\n      let pos = 0;\n      let carry = 0;\n\n      for (let i = 0; i < this.length; i++) {\n        const shift = (i & 3) << 1;\n        const word = (this.words[i] << shift) | carry;\n\n        res[pos++] = word & 0xff;\n\n        if (pos < res.length)\n          res[pos++] = (word >>> 8) & 0xff;\n\n        if (pos < res.length)\n          res[pos++] = (word >>> 16) & 0xff;\n\n        if (shift === 6) {\n          if (pos < res.length)\n            res[pos++] = (word >>> 24) & 0xff;\n\n          carry = 0;\n        } else {\n          carry = word >>> 24;\n        }\n      }\n\n      if (pos < res.length) {\n        res[pos++] = carry;\n\n        while (pos < res.length)\n          res[pos++] = 0;\n\n        carry = 0;\n      }\n\n      assert(carry === 0);\n    }\n\n    return res;\n  }\n\n  encode(endian, length) {\n    return this.toBuffer(endian, length);\n  }\n\n  /*\n   * Instantiation\n   */\n\n  of(num, endian) {\n    return this.fromNumber(num, endian);\n  }\n\n  fromNumber(num, endian) {\n    if (endian == null)\n      endian = 'be';\n\n    enforce(isInteger(num), 'num', 'integer');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n\n    const neg = (num < 0) | 0;\n\n    if (neg)\n      num = -num;\n\n    if (num < 0x4000000) {\n      this.words[0] = num & 0x3ffffff;\n      this.length = 1;\n    } else if (num < 0x10000000000000) {\n      this.words = [\n        num & 0x3ffffff,\n        (num / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      this.words = [\n        num & 0x3ffffff,\n        (num / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    this.negative = neg;\n\n    if (endian === 'le')\n      this.reverse();\n\n    return this;\n  }\n\n  fromDouble(num, endian) {\n    if (endian == null)\n      endian = 'be';\n\n    enforce(typeof num === 'number', 'num', 'double');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n\n    if (!isFinite(num))\n      num = 0;\n\n    const neg = (num <= -1) | 0;\n\n    if (num < 0)\n      num = -num;\n\n    num = Math.floor(num);\n\n    this.words = [];\n\n    while (num > 0) {\n      const lo = num % 0x4000000;\n      const hi = (num - lo) / 0x4000000;\n\n      this.words.push(lo);\n\n      num = hi;\n    }\n\n    if (this.words.length === 0)\n      this.words.push(0);\n\n    this.length = this.words.length;\n    this.negative = neg;\n\n    if (endian === 'le')\n      this.reverse();\n\n    return this;\n  }\n\n  fromBigInt(num, endian) {\n    if (endian == null)\n      endian = 'be';\n\n    enforce(typeof num === 'bigint', 'num', 'bigint');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n\n    if (!HAS_BIGINT)\n      throw new Error('BigInt is not supported!');\n\n    // You know the implementation has a\n    // problem when strings are twice\n    // as fast as bigints.\n    const start = (num < BigInt(0)) | 0;\n\n    this._fromHex(num.toString(16), start);\n    this.negative = start;\n\n    if (endian === 'le')\n      this.reverse();\n\n    return this;\n  }\n\n  fromBool(value) {\n    enforce(typeof value === 'boolean', 'value', 'boolean');\n\n    this.words[0] = value | 0;\n    this.length = 1;\n    this.negative = 0;\n\n    return this;\n  }\n\n  fromString(str, base, endian) {\n    if (base === 'le' || base === 'be')\n      [base, endian] = [endian, base];\n\n    base = getBase(base);\n\n    if (endian == null)\n      endian = 'be';\n\n    enforce(typeof str === 'string', 'string', 'string');\n    enforce((base >>> 0) === base, 'base', 'uint32');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n\n    if (base < 2 || base > 36)\n      throw new Error('Base ranges between 2 and 36.');\n\n    str = str.replace(/\\s+/g, '');\n\n    let start = 0;\n\n    if (str.length > 0 && str.charCodeAt(0) === 0x2d)\n      start = 1;\n\n    if (base === 16)\n      this._fromHex(str, start);\n    else\n      this._fromBase(str, base, start);\n\n    this.negative = start;\n\n    this._normalize();\n\n    if (endian === 'le')\n      this.reverse();\n\n    return this;\n  }\n\n  _fromHex(str, start) {\n    this.length = Math.max(2, Math.ceil((str.length - start) / 6));\n    this.words = new Array(this.length);\n\n    for (let i = 0; i < this.length; i++)\n      this.words[i] = 0;\n\n    // Scan 24-bit chunks and add them to the number.\n    let off = 0;\n    let i = str.length - 6;\n    let j = 0;\n\n    for (; i >= start; i -= 6) {\n      const w = parseHex(str, i, i + 6);\n\n      this.words[j] |= (w << off) & 0x3ffffff;\n\n      // `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb.\n      this.words[j + 1] |= (w >>> (26 - off)) & 0x3fffff;\n\n      off += 24;\n\n      if (off >= 26) {\n        off -= 26;\n        j += 1;\n      }\n    }\n\n    if (i + 6 !== start) {\n      const w = parseHex(str, start, i + 6);\n\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= (w >>> (26 - off)) & 0x3fffff;\n    }\n\n    return this._strip();\n  }\n\n  _fromBase(str, base, start) {\n    // Initialize as zero.\n    this.words[0] = 0;\n    this.length = 1;\n    this.negative = 0;\n\n    // Find length of limb in base.\n    let limbLen = 0;\n    let limbPow = 1;\n\n    for (; limbPow <= 0x3ffffff; limbPow *= base)\n      limbLen += 1;\n\n    limbLen -= 1;\n    limbPow = (limbPow / base) | 0;\n\n    const total = str.length - start;\n    const mod = total % limbLen;\n    const end = Math.min(total, total - mod) + start;\n\n    let i = start;\n\n    for (; i < end; i += limbLen) {\n      const word = parseBase(str, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      this._iaddn(word);\n    }\n\n    if (mod !== 0) {\n      const pow = Math.pow(base, mod);\n      const word = parseBase(str, i, str.length, base);\n\n      this.imuln(pow);\n      this._iaddn(word);\n    }\n\n    return this;\n  }\n\n  fromJSON(json) {\n    if (BN.isBN(json)) {\n      if (json.red)\n        return json.fromRed();\n\n      return json.clone();\n    }\n\n    if (Array.isArray(json)) {\n      for (const chunk of json)\n        enforce(typeof chunk === 'string', 'chunk', 'string');\n\n      json = json.join('');\n    }\n\n    return this.fromString(json, 16);\n  }\n\n  fromBN(num) {\n    return this.inject(num);\n  }\n\n  fromArray(data, endian) {\n    enforce(Array.isArray(data), 'data', 'array');\n    return this.fromArrayLike(data, endian);\n  }\n\n  fromBuffer(data, endian) {\n    enforce(Buffer.isBuffer(data), 'data', 'buffer');\n    return this.fromArrayLike(data, endian);\n  }\n\n  fromArrayLike(data, endian) {\n    if (endian == null)\n      endian = 'be';\n\n    enforce(data && (data.length >>> 0) === data.length, 'data', 'array-like');\n    enforce(endian === 'be' || endian === 'le', 'endian', 'endianness');\n\n    if (data.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n      this.negative = 0;\n      return this;\n    }\n\n    this.length = Math.max(2, Math.ceil(data.length / 3));\n    this.words = new Array(this.length);\n    this.negative = 0;\n\n    for (let i = 0; i < this.length; i++)\n      this.words[i] = 0;\n\n    const left = data.length % 3;\n\n    let off = 0;\n    let j = 0;\n    let w = 0;\n\n    if (endian === 'be') {\n      for (let i = data.length - 1; i >= 2; i -= 3) {\n        const w = data[i] | (data[i - 1] << 8) | (data[i - 2] << 16);\n\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n\n        off += 24;\n\n        if (off >= 26) {\n          off -= 26;\n          j += 1;\n        }\n      }\n\n      switch (left) {\n        case 2:\n          w = data[1] | (data[0] << 8);\n          break;\n        case 1:\n          w = data[0];\n          break;\n      }\n    } else {\n      const len = data.length - left;\n\n      for (let i = 0; i < len; i += 3) {\n        const w = data[i] | (data[i + 1] << 8) | (data[i + 2] << 16);\n\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n\n        off += 24;\n\n        if (off >= 26) {\n          off -= 26;\n          j += 1;\n        }\n      }\n\n      switch (left) {\n        case 2:\n          w = data[len] | (data[len + 1] << 8);\n          break;\n        case 1:\n          w = data[len];\n          break;\n      }\n    }\n\n    if (left > 0) {\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n    }\n\n    return this._strip();\n  }\n\n  decode(data, endian) {\n    return this.fromBuffer(data, endian);\n  }\n\n  from(num, base, endian) {\n    if (num == null)\n      return this;\n\n    if (base === 'le' || base === 'be')\n      [base, endian] = [endian, base];\n\n    if (typeof num === 'number')\n      return this.fromNumber(num, endian);\n\n    if (typeof num === 'bigint')\n      return this.fromBigInt(num, endian);\n\n    if (typeof num === 'string')\n      return this.fromString(num, base, endian);\n\n    if (typeof num === 'object') {\n      if (BN.isBN(num))\n        return this.fromBN(num, endian);\n\n      if ((num.length >>> 0) === num.length)\n        return this.fromArrayLike(num, endian);\n    }\n\n    if (typeof num === 'boolean')\n      return this.fromBool(num);\n\n    throw new TypeError('Non-numeric object passed to BN.');\n  }\n\n  /*\n   * Static Methods\n   */\n\n  static min(...args) {\n    let min = null;\n\n    for (const num of args) {\n      enforce(BN.isBN(num), 'num', 'bignum');\n\n      if (!min || num.cmp(min) < 0)\n        min = num;\n    }\n\n    return min || new BN(0);\n  }\n\n  static max(...args) {\n    let max = null;\n\n    for (const num of args) {\n      enforce(BN.isBN(num), 'num', 'bignum');\n\n      if (!max || num.cmp(max) > 0)\n        max = num;\n    }\n\n    return max || new BN(0);\n  }\n\n  static cmp(a, b) {\n    enforce(BN.isBN(a), 'a', 'bignum');\n    return a.cmp(b);\n  }\n\n  static ucmp(a, b) {\n    enforce(BN.isBN(a), 'a', 'bignum');\n    return a.ucmp(b);\n  }\n\n  static red(num) {\n    return new Red(num);\n  }\n\n  static barrett(num) {\n    return new Barrett(num);\n  }\n\n  static mont(num) {\n    return new Mont(num);\n  }\n\n  static _prime(name) {\n    if (primes[name])\n      return primes[name];\n\n    let prime;\n\n    if (name === 'p192')\n      prime = new P192();\n    else if (name === 'p224')\n      prime = new P224();\n    else if (name === 'p521')\n      prime = new P521();\n    else if (name === 'k256')\n      prime = new K256();\n    else if (name === 'p251')\n      prime = new P251();\n    else if (name === 'p25519')\n      prime = new P25519();\n    else if (name === 'p448')\n      prime = new P448();\n    else\n      throw new Error(`Unknown prime: \"${name}\".`);\n\n    primes[name] = prime;\n\n    return prime;\n  }\n\n  static prime(name) {\n    return BN._prime(name).p.clone();\n  }\n\n  static pow(num, exp) {\n    if (num === 2)\n      return BN.shift(1, exp);\n\n    return new BN().fromNumber(num).pown(exp);\n  }\n\n  static shift(num, bits) {\n    if (num === 1)\n      return new BN(0).usetn(bits, 1);\n\n    return new BN().fromNumber(num).ishln(bits);\n  }\n\n  static mask(bits) {\n    return BN.shift(1, bits).isubn(1);\n  }\n\n  static randomBits(rng, bits) {\n    enforce(rng != null, 'rng', 'rng');\n    enforce((bits >>> 0) === bits, 'bits', 'uint32');\n\n    if (typeof rng === 'object') {\n      enforce(typeof rng.randomBytes === 'function', 'rng', 'rng');\n\n      const size = (bits + 7) >>> 3;\n      const total = size * 8;\n      const bytes = rng.randomBytes(size);\n\n      enforce(Buffer.isBuffer(bytes), 'bytes', 'buffer');\n\n      if (bytes.length !== size)\n        throw new RangeError('Invalid number of bytes returned from RNG.');\n\n      const num = BN.fromBuffer(bytes);\n\n      if (total > bits)\n        num.iushrn(total - bits);\n\n      return num;\n    }\n\n    enforce(typeof rng === 'function', 'rng', 'rng');\n\n    const num = rng(bits);\n\n    enforce(BN.isBN(num), 'num', 'bignum');\n    range(num.negative === 0, 'RNG');\n    nonred(!num.red, 'RNG');\n\n    if (num.bitLength() > bits)\n      throw new RangeError('Invalid number of bits returned from RNG.');\n\n    return num;\n  }\n\n  static random(rng, min, max) {\n    min = BN.cast(min, 16);\n    max = BN.cast(max, 16);\n\n    if (min.cmp(max) > 0)\n      throw new RangeError('Minimum cannot be greater than maximum.');\n\n    const space = max.sub(min).iabs();\n    const bits = space.bitLength();\n\n    if (bits === 0)\n      return min.clone();\n\n    for (;;) {\n      const num = BN.randomBits(rng, bits);\n\n      // Maximum is _exclusive_!\n      if (num.cmp(space) >= 0)\n        continue;\n\n      // Minimum is _inclusive_!\n      num.iadd(min);\n\n      return num;\n    }\n  }\n\n  static of(num, endian) {\n    return new BN().of(num, endian);\n  }\n\n  static fromNumber(num, endian) {\n    return new BN().fromNumber(num, endian);\n  }\n\n  static fromDouble(num, endian) {\n    return new BN().fromDouble(num, endian);\n  }\n\n  static fromBigInt(num, endian) {\n    return new BN().fromBigInt(num, endian);\n  }\n\n  static fromBool(value) {\n    return new BN().fromBool(value);\n  }\n\n  static fromString(str, base, endian) {\n    return new BN().fromString(str, base, endian);\n  }\n\n  static fromJSON(json) {\n    return new BN().fromJSON(json);\n  }\n\n  static fromBN(num) {\n    return new BN().fromBN(num);\n  }\n\n  static fromArray(data, endian) {\n    return new BN().fromArray(data, endian);\n  }\n\n  static fromBuffer(data, endian) {\n    return new BN().fromBuffer(data, endian);\n  }\n\n  static fromArrayLike(data, endian) {\n    return new BN().fromArrayLike(data, endian);\n  }\n\n  static decode(data, endian) {\n    return new BN().decode(data, endian);\n  }\n\n  static from(num, base, endian) {\n    return new BN().from(num, base, endian);\n  }\n\n  static cast(num, base, endian) {\n    if (BN.isBN(num))\n      return num;\n\n    return new BN(num, base, endian);\n  }\n\n  static isBN(obj) {\n    return obj instanceof BN;\n  }\n}\n\n/*\n * Static\n */\n\nBN.BN = BN;\nBN.wordSize = 26;\nBN.native = 0;\n\n/**\n * Prime\n */\n\nclass Prime {\n  constructor(name, p) {\n    // P = 2^N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = BN.shift(1, this.n).isub(this.p);\n    this.lo = this.p.clone();\n    this.one = this.p.clone();\n  }\n\n  ireduce(num) {\n    // Assumes that `num` is less than `P^2`:\n    // num = HI * (2^N - K) + HI * K + LO = HI * K + LO (mod P)\n    const neg = num.negative !== 0;\n\n    // Track bits.\n    let bits = num.bitLength();\n\n    // Must be less than P^2.\n    assert(bits <= this.n * 2);\n\n    // Ensure positive.\n    num.negative = 0;\n\n    // Reduce.\n    while (bits > this.n) {\n      // lo = num & ((1 << n) - 1)\n      // num = num >> n\n      this.split(num, this.lo);\n\n      // num = num * K\n      this.imulK(num);\n\n      // num = num + lo\n      num._iadd(num, this.lo);\n\n      // bits = bitlen(num)\n      bits = num.bitLength();\n    }\n\n    // Final reduction.\n    const cmp = bits < this.n ? -1 : num.ucmp(this.p);\n\n    if (cmp === 0) {\n      num.words[0] = 0;\n      num.length = 1;\n    } else if (cmp > 0) {\n      num._isub(num, this.p);\n    } else {\n      // Note: we shouldn't need to strip here.\n    }\n\n    // Adjust sign.\n    if (neg && !num.isZero())\n      num._isub(this.p, num);\n\n    return num;\n  }\n\n  split(input, out) {\n    input._split(this.n, out);\n  }\n\n  imulK(num) {\n    return num.imul(this.k);\n  }\n\n  pm2(x1) {\n    // Exponent: p - 2\n    throw new Error('Not implemented.');\n  }\n\n  fermat(x) {\n    return this.pm2(x);\n  }\n}\n\n/**\n * Prime (3 mod 4)\n */\n\nclass Prime34 extends Prime {\n  constructor(name, p) {\n    super(name, p);\n  }\n\n  pm3d4(x1) {\n    // Exponent: (p - 3) / 4\n    throw new Error('Not implemented.');\n  }\n\n  pp1d4(x1) {\n    // Exponent: (p + 1) / 4\n    throw new Error('Not implemented.');\n  }\n\n  sqrt(x) {\n    // r = x^((p + 1) / 4) mod p\n    const {red} = x;\n    const r = this.pp1d4(x);\n\n    if (!red.sqr(r).eq(x))\n      throw new SquareRootError(r);\n\n    return r;\n  }\n\n  divsqrt(u, v) {\n    // x = u^3 * v * (u^5 * v^3)^((p - 3) / 4) mod p\n    const {red} = u;\n    const u2 = red.sqr(u);\n    const u3 = red.mul(u2, u);\n    const u5 = red.mul(u3, u2);\n    const v3 = red.mul(red.sqr(v), v);\n    const p = this.pm3d4(red.mul(u5, v3));\n    const x = red.mul(red.mul(u3, v), p);\n    const c = red.mul(v, red.sqr(x));\n\n    if (c.eq(u))\n      return x;\n\n    throw new SquareRootError(x);\n  }\n}\n\n/**\n * Prime (5 mod 8)\n */\n\nclass Prime58 extends Prime {\n  constructor(name, p, sm1) {\n    super(name, p);\n\n    this.sm1 = new BN(sm1, 16);\n  }\n\n  pm5d8(x1) {\n    // Exponent: (p - 5) / 8\n    throw new Error('Not implemented.');\n  }\n\n  pp3d8(x1) {\n    // Exponent: (p + 3) / 8\n    throw new Error('Not implemented.');\n  }\n\n  sqrt(x) {\n    // r = x^((p + 3) / 8) mod p\n    const {red} = x;\n    const sm1 = this.sm1._forceRed(red);\n    const r = this.pp3d8(x);\n\n    if (red.sqr(r).eq(x))\n      return r;\n\n    const c = red.mul(r, sm1);\n\n    if (red.sqr(c).eq(x))\n      return c;\n\n    throw new SquareRootError(r);\n  }\n\n  divsqrt(u, v) {\n    // x = u * v^3 * (u * v^7)^((p - 5) / 8) mod p\n    const {red} = u;\n    const sm1 = this.sm1._forceRed(red);\n    const v3 = red.mul(red.sqr(v), v);\n    const v7 = red.mul(red.sqr(v3), v);\n    const p = this.pm5d8(red.mul(u, v7));\n    const x = red.mul(red.mul(u, v3), p);\n    const c = red.mul(v, red.sqr(x));\n\n    if (c.eq(u))\n      return x;\n\n    const mc = red.ineg(c);\n\n    if (mc.eq(u))\n      return red.mul(x, sm1);\n\n    if (mc.eq(red.mul(u, sm1)))\n      throw new SquareRootError(red.mul(x, sm1));\n\n    throw new SquareRootError(x);\n  }\n}\n\n/**\n * Prime (1 mod 16)\n */\n\nclass Prime116 extends Prime {\n  constructor(name, p, g) {\n    super(name, p);\n\n    this.g = new BN(g, 16);\n    this.z = this.p.subn(1).zeroBits();\n  }\n\n  powS(x1) {\n    // Exponent: (p - 1) / 2^k\n    throw new Error('Not implemented.');\n  }\n\n  powE(x1) {\n    // Exponent: (s + 1) / 2\n    throw new Error('Not implemented.');\n  }\n\n  sqrt(x) {\n    // Tonelli-Shanks (variable time).\n    //\n    // Constants:\n    //\n    //   k = factors of 2 for (p - 1)\n    //   s = (p - 1) / 2^k\n    //   e = (s + 1) / 2\n    //   n = first non-square in F(p)\n    //\n    // Algorithm:\n    //\n    //   g = n^s mod p\n    //   y = x^e mod p\n    //   b = x^s mod p\n    //\n    //   loop:\n    //     t = b\n    //     m = 0\n    //\n    //     while t != 1:\n    //       t = t^2 mod p\n    //       m += 1\n    //\n    //     if m == 0:\n    //       break\n    //\n    //     if m >= k:\n    //       fail\n    //\n    //     t = g^(2^(k - m - 1)) mod p\n    //     g = t^2 mod p\n    //     y = y * t mod p\n    //     b = b * g mod p\n    //     k = m\n    //\n    //   return y\n    //\n    const {red} = x;\n\n    switch (red.jacobi(x)) {\n      case -1:\n        throw new SquareRootError(x);\n      case 0:\n        return x.clone();\n      case 1:\n        break;\n    }\n\n    let g = this.g._forceRed(red);\n    let y = this.powE(x);\n    let b = this.powS(x);\n    let k = this.z;\n\n    for (;;) {\n      let t = b;\n      let m = 0;\n\n      while (t.cmpn(1) !== 0 && m < k) {\n        t = red.sqr(t);\n        m += 1;\n      }\n\n      if (m === 0)\n        break;\n\n      assert(m < k);\n\n      t = red.sqrn(g, k - m - 1);\n      g = red.sqr(t);\n      y = red.mul(y, t);\n      b = red.mul(b, g);\n      k = m;\n    }\n\n    return y;\n  }\n\n  divsqrt(u, v) {\n    const {red} = u;\n\n    if (v.isZero())\n      throw new SquareRootError(v);\n\n    return this.sqrt(red.div(u, v));\n  }\n}\n\n/**\n * P192\n */\n\nclass P192 extends Prime34 {\n  constructor() {\n    // 2^192 - 2^64 - 1 (= 3 mod 4)\n    super('p192', 'ffffffff ffffffff ffffffff fffffffe'\n                + 'ffffffff ffffffff');\n  }\n\n  imulK(num) {\n    // K = 0x10000000000000001\n    // K = 2^64 + 1\n    const one = this.one.inject(num);\n    return num.iushln(64)._iadd(num, one);\n  }\n\n  core(x1) {\n    // Exponent: (p - 3) / 4\n    // Bits: 127x1 1x0 62x1\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const x3 = red.sqrnmul(x2, 1, x1);\n    const x6 = red.sqrnmul(x3, 3, x3);\n    const x12 = red.sqrnmul(x6, 6, x6);\n    const x24 = red.sqrnmul(x12, 12, x12);\n    const x30 = red.sqrnmul(x24, 6, x6);\n    const x31 = red.sqrnmul(x30, 1, x1);\n    const x62 = red.sqrnmul(x31, 31, x31);\n    const x124 = red.sqrnmul(x62, 62, x62);\n    const x127 = red.sqrnmul(x124, 3, x3);\n    const r0 = red.sqrn(x127, 1);\n    const r1 = red.sqrnmul(r0, 62, x62);\n\n    return r1;\n  }\n\n  pm3d4(x1) {\n    // Exponent: (p - 3) / 4\n    // Bits: 127x1 1x0 62x1\n    return this.core(x1);\n  }\n\n  pm2(x1) {\n    // Exponent: p - 2\n    // Bits: 127x1 1x0 62x1 1x0 1x1\n    const {red} = x1;\n    const r0 = this.core(x1);\n    const r1 = red.sqrn(r0, 1);\n    const r2 = red.sqrnmul(r1, 1, x1);\n\n    return r2;\n  }\n\n  pp1d4(x1) {\n    // Exponent: (p + 1) / 4\n    // Bits: 128x1 62x0\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const x4 = red.sqrnmul(x2, 2, x2);\n    const x8 = red.sqrnmul(x4, 4, x4);\n    const x16 = red.sqrnmul(x8, 8, x8);\n    const x32 = red.sqrnmul(x16, 16, x16);\n    const x64 = red.sqrnmul(x32, 32, x32);\n    const x128 = red.sqrnmul(x64, 64, x64);\n    const r0 = red.sqrn(x128, 62);\n\n    return r0;\n  }\n}\n\n/**\n * P224\n */\n\nclass P224 extends Prime116 {\n  constructor() {\n    // 2^224 - 2^96 + 1 (1 mod 16)\n    super('p224', 'ffffffff ffffffff ffffffff ffffffff'\n                + '00000000 00000000 00000001',\n                  '6a0fec67 8598a792 0c55b2d4 0b2d6ffb'\n                + 'bea3d8ce f3fb3632 dc691b74');\n  }\n\n  imulK(num) {\n    // K = 0xffffffffffffffffffffffff\n    // K = 2^96 - 1\n    const one = this.one.inject(num);\n    return num.iushln(96)._isub(num, one);\n  }\n\n  powS(x1) {\n    // Exponent: 2^128 - 1\n    // Bits: 128x1\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const x4 = red.sqrnmul(x2, 2, x2);\n    const x8 = red.sqrnmul(x4, 4, x4);\n    const x16 = red.sqrnmul(x8, 8, x8);\n    const x32 = red.sqrnmul(x16, 16, x16);\n    const x64 = red.sqrnmul(x32, 32, x32);\n    const x128 = red.sqrnmul(x64, 64, x64);\n\n    return x128;\n  }\n\n  powE(x1) {\n    // Exponent: 2^127\n    // Bits: 1x1 127x0\n    const {red} = x1;\n    const r0 = red.sqrn(x1, 127);\n\n    return r0;\n  }\n\n  pm2(x1) {\n    // Exponent: p - 2\n    // Bits: 127x1 1x0 96x1\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const x3 = red.sqrnmul(x2, 1, x1);\n    const x6 = red.sqrnmul(x3, 3, x3);\n    const x12 = red.sqrnmul(x6, 6, x6);\n    const x24 = red.sqrnmul(x12, 12, x12);\n    const x48 = red.sqrnmul(x24, 24, x24);\n    const x96 = red.sqrnmul(x48, 48, x48);\n    const x120 = red.sqrnmul(x96, 24, x24);\n    const x126 = red.sqrnmul(x120, 6, x6);\n    const x127 = red.sqrnmul(x126, 1, x1);\n    const r0 = red.sqrn(x127, 1);\n    const r1 = red.sqrnmul(r0, 96, x96);\n\n    return r1;\n  }\n}\n\n/**\n * P521\n */\n\nclass P521 extends Prime34 {\n  constructor() {\n    // 2^521 - 1 (= 3 mod 4)\n    super('p521', '000001ff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff');\n  }\n\n  imulK(num) {\n    // K = 0x01\n    return num;\n  }\n\n  core(x1) {\n    // Exponent: 2^519 - 1\n    // Bits: 519x1\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const x3 = red.sqrnmul(x2, 1, x1);\n    const x6 = red.sqrnmul(x3, 3, x3);\n    const x7 = red.sqrnmul(x6, 1, x1);\n    const x8 = red.sqrnmul(x7, 1, x1);\n    const x16 = red.sqrnmul(x8, 8, x8);\n    const x32 = red.sqrnmul(x16, 16, x16);\n    const x64 = red.sqrnmul(x32, 32, x32);\n    const x128 = red.sqrnmul(x64, 64, x64);\n    const x256 = red.sqrnmul(x128, 128, x128);\n    const x512 = red.sqrnmul(x256, 256, x256);\n    const x519 = red.sqrnmul(x512, 7, x7);\n\n    return x519;\n  }\n\n  pm3d4(x1) {\n    // Exponent: 2^519 - 1\n    // Bits: 519x1\n    return this.core(x1);\n  }\n\n  pm2(x1) {\n    // Exponent: p - 2\n    // Bits: 519x1 1x0 1x1\n    const {red} = x1;\n    const r0 = this.core(x1);\n    const r1 = red.sqrn(r0, 1);\n    const r2 = red.sqrnmul(r1, 1, x1);\n\n    return r2;\n  }\n\n  pp1d4(x1) {\n    // Exponent: (p + 1) / 4\n    // Bits: 1x1 519x0\n    const {red} = x1;\n    const r0 = red.sqrn(x1, 519);\n\n    return r0;\n  }\n}\n\n/**\n * K256\n */\n\nclass K256 extends Prime34 {\n  constructor() {\n    // 2^256 - 2^32 - 977 (= 3 mod 4)\n    super('k256', 'ffffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff fffffffe fffffc2f');\n  }\n\n  split(input, output) {\n    // 256 = 9 * 26 + 22\n    const mask = 0x3fffff;\n    const len = Math.min(input.length, 9);\n\n    output._alloc(len + 1);\n\n    for (let i = 0; i < len; i++)\n      output.words[i] = input.words[i];\n\n    output.length = len;\n\n    if (input.length <= 9) {\n      output._strip();\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs.\n    let prev = input.words[9];\n    let i = 10;\n\n    output.words[output.length++] = prev & mask;\n    output._strip();\n\n    for (; i < input.length; i++) {\n      const next = input.words[i] | 0;\n\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n\n      prev = next;\n    }\n\n    prev >>>= 22;\n\n    input.words[i - 10] = prev;\n\n    if (prev === 0 && input.length > 10)\n      input.length -= 10;\n    else\n      input.length -= 9;\n\n    input._strip(); // Unsure if we need this.\n  }\n\n  imulK(num) {\n    // K = 0x1000003d1 = [0x40, 0x3d1]\n    // K = 2^32 + 977\n    num._expand(num.length + 2);\n\n    // Bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    let lo = 0;\n\n    for (let i = 0; i < num.length; i++) {\n      const w = num.words[i];\n\n      lo += w * 0x3d1;\n\n      num.words[i] = lo & 0x3ffffff;\n\n      lo = w * 0x40 + Math.floor(lo / 0x4000000);\n    }\n\n    // Fast length reduction.\n    if (num.words[num.length - 1] === 0) {\n      num.length -= 1;\n      if (num.words[num.length - 1] === 0)\n        num.length -= 1;\n    }\n\n    // Note: we shouldn't need to strip here.\n    return num;\n  }\n\n  core(x1, x2) {\n    // Exponent: (p - 47) / 64\n    // Bits: 223x1 1x0 22x1 4x0\n    const {red} = x1;\n    const x3 = red.sqrnmul(x2, 1, x1);\n    const x6 = red.sqrnmul(x3, 3, x3);\n    const x9 = red.sqrnmul(x6, 3, x3);\n    const x11 = red.sqrnmul(x9, 2, x2);\n    const x22 = red.sqrnmul(x11, 11, x11);\n    const x44 = red.sqrnmul(x22, 22, x22);\n    const x88 = red.sqrnmul(x44, 44, x44);\n    const x176 = red.sqrnmul(x88, 88, x88);\n    const x220 = red.sqrnmul(x176, 44, x44);\n    const x223 = red.sqrnmul(x220, 3, x3);\n    const r0 = red.sqrn(x223, 1);\n    const r1 = red.sqrnmul(r0, 22, x22);\n    const r2 = red.sqrn(r1, 4);\n\n    return r2;\n  }\n\n  pm3d4(x1) {\n    // Exponent: (p - 3) / 4\n    // Bits: 223x1 1x0 22x1 4x0 1x1 1x0 2x1\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const r2 = this.core(x1, x2);\n    const r3 = red.sqrnmul(r2, 1, x1);\n    const r4 = red.sqrn(r3, 1);\n    const r5 = red.sqrnmul(r4, 2, x2);\n\n    return r5;\n  }\n\n  pm2(x1) {\n    // Exponent: p - 2\n    // Bits: 223x1 1x0 22x1 4x0 1x1 1x0 2x1 1x0 1x1\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const r2 = this.core(x1, x2);\n    const r3 = red.sqrnmul(r2, 1, x1);\n    const r4 = red.sqrn(r3, 1);\n    const r5 = red.sqrnmul(r4, 2, x2);\n    const r6 = red.sqrn(r5, 1);\n    const r7 = red.sqrnmul(r6, 1, x1);\n\n    return r7;\n  }\n\n  pp1d4(x1) {\n    // Exponent: (p + 1) / 4\n    // Bits: 223x1 1x0 22x1 4x0 2x1 2x0\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const r2 = this.core(x1, x2);\n    const r3 = red.sqrnmul(r2, 2, x2);\n    const r4 = red.sqrn(r3, 2);\n\n    return r4;\n  }\n}\n\n/**\n * P251\n */\n\nclass P251 extends Prime34 {\n  constructor() {\n    // 2^251 - 9\n    super('p251', '07ffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff ffffffff fffffff7');\n  }\n\n  imulK(num) {\n    // K = 0x09\n    if (num.isZero())\n      return num;\n\n    let carry = 0;\n\n    for (let i = 0; i < num.length; i++) {\n      const w = num.words[i] * 0x09 + carry;\n\n      carry = w >>> 26;\n\n      num.words[i] = w & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      num._alloc(num.length + 1);\n      num.words[num.length++] = carry;\n    }\n\n    // Note: we shouldn't need to strip here.\n    return num;\n  }\n\n  core(x1) {\n    // Exponent: 2^247 - 1\n    // Bits: 247x1\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const x3 = red.sqrnmul(x2, 1, x1);\n    const x6 = red.sqrnmul(x3, 3, x3);\n    const x12 = red.sqrnmul(x6, 6, x6);\n    const x24 = red.sqrnmul(x12, 12, x12);\n    const x48 = red.sqrnmul(x24, 24, x24);\n    const x96 = red.sqrnmul(x48, 48, x48);\n    const x192 = red.sqrnmul(x96, 96, x96);\n    const x240 = red.sqrnmul(x192, 48, x48);\n    const x246 = red.sqrnmul(x240, 6, x6);\n    const x247 = red.sqrnmul(x246, 1, x1);\n\n    return x247;\n  }\n\n  pm3d4(x1) {\n    // Exponent: (p - 3) / 4\n    // Bits: 247x1 1x0 1x1\n    const {red} = x1;\n    const r0 = this.core(x1);\n    const r1 = red.sqrn(r0, 1);\n    const r2 = red.sqrnmul(r1, 1, x1);\n\n    return r2;\n  }\n\n  pm2(x1) {\n    // Exponent: p - 2\n    // Bits: 247x1 1x0 1x1 1x0 1x1\n    const {red} = x1;\n    const r0 = this.core(x1);\n    const r1 = red.sqrn(r0, 1);\n    const r2 = red.sqrnmul(r1, 1, x1);\n    const r3 = red.sqrn(r2, 1);\n    const r4 = red.sqrnmul(r3, 1, x1);\n\n    return r4;\n  }\n\n  pp1d4(x1) {\n    // Exponent: (p + 1) / 4\n    // Bits: 248x1 1x0\n    const {red} = x1;\n    const r0 = this.core(x1);\n    const r1 = red.sqrnmul(r0, 1, x1);\n    const r2 = red.sqrn(r1, 1);\n\n    return r2;\n  }\n}\n\n/**\n * P25519\n */\n\nclass P25519 extends Prime58 {\n  constructor() {\n    // 2^255 - 19 (= 5 mod 8)\n    super('p25519', '7fffffff ffffffff ffffffff ffffffff'\n                  + 'ffffffff ffffffff ffffffff ffffffed',\n                    '2b832480 4fc1df0b 2b4d0099 3dfbd7a7'\n                  + '2f431806 ad2fe478 c4ee1b27 4a0ea0b0');\n  }\n\n  imulK(num) {\n    // K = 0x13\n    let carry = 0;\n\n    for (let i = 0; i < num.length; i++) {\n      const w = num.words[i] * 0x13 + carry;\n\n      carry = w >>> 26;\n\n      num.words[i] = w & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      num._alloc(num.length + 1);\n      num.words[num.length++] = carry;\n    }\n\n    // Note: we shouldn't need to strip here.\n    return num;\n  }\n\n  core(x1, x2) {\n    // Exponent: 2^250 - 1\n    // Bits: 250x1\n    const {red} = x1;\n    const x4 = red.sqrnmul(x2, 2, x2);\n    const x5 = red.sqrnmul(x4, 1, x1);\n    const x10 = red.sqrnmul(x5, 5, x5);\n    const x20 = red.sqrnmul(x10, 10, x10);\n    const x40 = red.sqrnmul(x20, 20, x20);\n    const x50 = red.sqrnmul(x40, 10, x10);\n    const x100 = red.sqrnmul(x50, 50, x50);\n    const x200 = red.sqrnmul(x100, 100, x100);\n    const x250 = red.sqrnmul(x200, 50, x50);\n\n    return x250;\n  }\n\n  pm5d8(x1) {\n    // Exponent: (p - 5) / 8\n    // Bits: 250x1 1x0 1x1\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const r0 = this.core(x1, x2);\n    const r1 = red.sqrn(r0, 1);\n    const r2 = red.sqrnmul(r1, 1, x1);\n\n    return r2;\n  }\n\n  pm2(x1) {\n    // Exponent: p - 2\n    // Bits: 250x1 1x0 1x1 1x0 2x1\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const r0 = this.core(x1, x2);\n    const r1 = red.sqrn(r0, 1);\n    const r2 = red.sqrnmul(r1, 1, x1);\n    const r3 = red.sqrn(r2, 1);\n    const r4 = red.sqrnmul(r3, 2, x2);\n\n    return r4;\n  }\n\n  pp3d8(x1) {\n    // Exponent: (p + 3) / 8\n    // Bits: 251x1 1x0\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const r0 = this.core(x1, x2);\n    const r1 = red.sqrnmul(r0, 1, x1);\n    const r2 = red.sqrn(r1, 1);\n\n    return r2;\n  }\n}\n\n/**\n * P448\n */\n\nclass P448 extends Prime34 {\n  constructor() {\n    // 2^448 - 2^224 - 1 (= 3 mod 4)\n    super('p448', 'ffffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff fffffffe ffffffff'\n                + 'ffffffff ffffffff ffffffff ffffffff'\n                + 'ffffffff ffffffff');\n  }\n\n  imulK(num) {\n    // K = 0x100000000000000000000000000000000000000000000000000000001\n    // K = 2^224 + 1\n    const one = this.one.inject(num);\n    return num.iushln(224)._iadd(num, one);\n  }\n\n  core(x1, x2) {\n    // Exponent: 2^222 - 1\n    // Bits: 222x1\n    const {red} = x1;\n    const x3 = red.sqrnmul(x2, 1, x1);\n    const x6 = red.sqrnmul(x3, 3, x3);\n    const x9 = red.sqrnmul(x6, 3, x3);\n    const x11 = red.sqrnmul(x9, 2, x2);\n    const x22 = red.sqrnmul(x11, 11, x11);\n    const x44 = red.sqrnmul(x22, 22, x22);\n    const x88 = red.sqrnmul(x44, 44, x44);\n    const x176 = red.sqrnmul(x88, 88, x88);\n    const x220 = red.sqrnmul(x176, 44, x44);\n    const x222 = red.sqrnmul(x220, 2, x2);\n\n    return x222;\n  }\n\n  pm3d4(x1) {\n    // Exponent: (p - 3) / 4\n    // Bits: 223x1 1x0 222x1\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const x222 = this.core(x1, x2);\n    const r0 = red.sqrnmul(x222, 1, x1);\n    const r1 = red.sqrn(r0, 1);\n    const r2 = red.sqrnmul(r1, 222, x222);\n\n    return r2;\n  }\n\n  pm2(x1) {\n    // Exponent: p - 2\n    // Bits: 223x1 1x0 222x1 1x0 1x1\n    const {red} = x1;\n    const r0 = this.pm3d4(x1);\n    const r1 = red.sqrn(r0, 1);\n    const r2 = red.sqrnmul(r1, 1, x1);\n\n    return r2;\n  }\n\n  pp1d4(x1) {\n    // Exponent: (p + 1) / 4\n    // Bits: 224x1 222x0\n    const {red} = x1;\n    const x2 = red.sqrnmul(x1, 1, x1);\n    const r0 = this.core(x1, x2);\n    const r1 = red.sqrnmul(r0, 2, x2);\n    const r2 = red.sqrn(r1, 222);\n\n    return r2;\n  }\n}\n\n/**\n * Reduction Engine\n */\n\nclass Red {\n  constructor(m) {\n    let prime = null;\n\n    if (typeof m === 'string') {\n      prime = BN._prime(m);\n      m = prime.p;\n    }\n\n    enforce(BN.isBN(m), 'm', 'bignum');\n    nonred(!m.red, 'reduction');\n    range(m.sign() > 0, 'reduction');\n\n    this.m = m;\n    this.prime = prime;\n    this.mb = null;\n    this.sm1 = null;\n  }\n\n  _verify1(a) {\n    range(a.negative === 0, 'red');\n    red(a.red != null, 'red');\n  }\n\n  _verify2(a, b) {\n    range((a.negative | b.negative) === 0, 'red');\n    red(a.red != null && a.red === b.red, 'red');\n  }\n\n  get mont() {\n    return false;\n  }\n\n  precompute() {\n    // Precompute `sqrt(-1)` for primes congruent to 5 mod 8.\n    if (this.sm1 === null && this.m.andln(7) === 5) {\n      if (this.prime) {\n        this.sm1 = this.prime.sm1.clone()._forceRed(this);\n      } else {\n        const x = new BN(2).toRed(this);\n        const e = this.m.subn(1).iushrn(2);\n\n        // sqrt(-1) = 2^((p - 1) / 4) mod p\n        this.sm1 = this.pow(x, e);\n      }\n    }\n\n    return this;\n  }\n\n  convertTo(num) {\n    const res = num.mod(this.m);\n    res.red = this;\n    return res;\n  }\n\n  convertFrom(num) {\n    const res = num.clone();\n    res.red = null;\n    return res;\n  }\n\n  intTo(a) {\n    return a;\n  }\n\n  intFrom(a) {\n    return a;\n  }\n\n  imod(a) {\n    if (this.prime)\n      return this.prime.ireduce(a)._forceRed(this);\n\n    return a.imod(this.m)._forceRed(this);\n  }\n\n  iadd(a, b) {\n    this._verify2(a, b);\n\n    a._iadd(a, b);\n\n    if (a.ucmp(this.m) >= 0)\n      a._isub(a, this.m);\n\n    return a;\n  }\n\n  add(a, b) {\n    if (a.length < b.length)\n      return this.iadd(b.clone(), a);\n\n    return this.iadd(a.clone(), b);\n  }\n\n  iaddn(a, num) {\n    this._verify1(a);\n\n    if (num < 0)\n      return this.isubn(a, -num);\n\n    if (this.m.length === 1)\n      num %= this.m.words[0];\n\n    a._iaddn(num);\n\n    if (a.ucmp(this.m) >= 0)\n      a._isub(a, this.m);\n\n    return a;\n  }\n\n  addn(a, num) {\n    return this.iaddn(a.clone(), num);\n  }\n\n  isub(a, b) {\n    this._verify2(a, b);\n\n    //  0: a - a mod m == 0\n    // -1: a - b mod m == m - (b - a)\n    // +1: a - b mod m == a - b\n    const cmp = a.ucmp(b);\n\n    if (cmp === 0) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    if (cmp < 0) {\n      a._isub(b, a);\n      a._isub(this.m, a);\n    } else {\n      a._isub(a, b);\n    }\n\n    return a;\n  }\n\n  sub(a, b) {\n    return this.isub(a.clone(), b);\n  }\n\n  isubn(a, num) {\n    this._verify1(a);\n\n    if (num < 0)\n      return this.iaddn(a, -num);\n\n    if (this.m.length === 1)\n      num %= this.m.words[0];\n\n    //  <: a - b mod m == m - (b - a)\n    // >=: a - b mod m == a - b\n    if (a.length === 1 && a.words[0] < num) {\n      a.words[0] = num - a.words[0];\n      a._isub(this.m, a);\n    } else {\n      a._isubn(num);\n    }\n\n    return a;\n  }\n\n  subn(a, num) {\n    return this.isubn(a.clone(), num);\n  }\n\n  imul(a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  }\n\n  mul(a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  }\n\n  imuln(a, num) {\n    this._verify1(a);\n\n    if (a.isZero())\n      return a;\n\n    if (num === 0) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    const neg = num < 0;\n\n    if (neg)\n      num = -num;\n\n    if (this.m.length === 1)\n      num %= this.m.words[0];\n\n    a.imuln(num);\n\n    if (num <= 16) {\n      // Quick reduction.\n      while (a.ucmp(this.m) >= 0)\n        a._isub(a, this.m);\n    } else {\n      this.imod(a);\n    }\n\n    if (neg)\n      this.ineg(a);\n\n    return a;\n  }\n\n  muln(a, num) {\n    return this.imuln(a.clone(), num);\n  }\n\n  idiv(a, b) {\n    return this.div(a, b)._move(a);\n  }\n\n  div(a, b) {\n    return this.mul(a, this.invert(b));\n  }\n\n  idivn(a, num) {\n    return this.divn(a, num)._move(a);\n  }\n\n  divn(a, num) {\n    return this.div(a, this.convertTo(new BN(num)));\n  }\n\n  ipow(a, num) {\n    return this.pow(a, num)._move(a);\n  }\n\n  pow(a, num) {\n    this._verify1(a);\n\n    if (num.isNeg())\n      a = this.invert(a);\n\n    // Small exponent.\n    if (num.length === 1)\n      return this.pown(a, num.words[0]);\n\n    // Call out to BigInt.\n    if (HAS_BIGINT && !this.prime)\n      return this.powInt(a, num);\n\n    // Otherwise, a BN implementation.\n    return this.powNum(a, num);\n  }\n\n  powNum(a, num) {\n    // Sliding window (odd multiples only).\n    const one = new BN(1).toRed(this);\n    const wnd = new Array(WND_SIZE);\n    const a2 = this.sqr(a);\n\n    wnd[0] = a;\n\n    for (let i = 1; i < WND_SIZE; i++)\n      wnd[i] = this.mul(wnd[i - 1], a2);\n\n    let i = num.bitLength();\n    let r = one;\n\n    while (i >= WND_WIDTH) {\n      let width = WND_WIDTH;\n      let bits = num.bits(i - width, width);\n\n      if (bits < WND_SIZE) {\n        r = this.sqr(r);\n        i -= 1;\n        continue;\n      }\n\n      while ((bits & 1) === 0) {\n        width -= 1;\n        bits >>= 1;\n      }\n\n      if (r === one) {\n        r = wnd[bits >> 1].clone();\n      } else {\n        r = this.sqrn(r, width);\n        r = this.mul(r, wnd[bits >> 1]);\n      }\n\n      i -= width;\n    }\n\n    if (i > 0) {\n      const bits = num.bits(0, i);\n\n      while (i--) {\n        r = this.sqr(r);\n\n        if ((bits >> i) & 1)\n          r = this.mul(r, a);\n      }\n    }\n\n    return r;\n  }\n\n  powInt(a, num) {\n    if (this.mb === null)\n      this.mb = this.m.toBigInt();\n\n    const x = this.intFrom(a.toBigInt());\n    const y = powInt(x, num, this.mb);\n    const z = this.intTo(y);\n\n    return BN.fromBigInt(z)._forceRed(this);\n  }\n\n  sqrn(a, n) {\n    while (n--)\n      a = this.sqr(a);\n\n    return a;\n  }\n\n  sqrnmul(a, n, b) {\n    return this.mul(this.sqrn(a, n), b);\n  }\n\n  ipown(a, num) {\n    return this.pown(a, num)._move(a);\n  }\n\n  pown(a, num) {\n    this._verify1(a);\n\n    if (num < 0) {\n      a = this.invert(a);\n      num = -num;\n    }\n\n    if (num === 0)\n      return new BN(1).toRed(this);\n\n    if (num === 1)\n      return a.clone();\n\n    const bits = countBits(num);\n\n    let r = a;\n\n    for (let i = bits - 2; i >= 0; i--) {\n      r = this.sqr(r);\n\n      if ((num >> i) & 1)\n        r = this.mul(r, a);\n    }\n\n    return r;\n  }\n\n  isqr(a) {\n    return this.imul(a, a);\n  }\n\n  sqr(a) {\n    return this.mul(a, a);\n  }\n\n  isqrt(x) {\n    return this.sqrt(x)._move(x);\n  }\n\n  sqrt(x) {\n    this._verify1(x);\n\n    // Optimized square root chain.\n    if (this.prime)\n      return this.prime.sqrt(x);\n\n    // Fast case (p = 3 mod 4).\n    if (this.m.andln(3) === 3)\n      return this.sqrt3mod4(x);\n\n    // Fast case (p = 5 mod 8).\n    if (this.m.andln(7) === 5) {\n      if (this.sm1 != null)\n        return this.sqrt5mod8sm1(x);\n      return this.sqrt5mod8(x);\n    }\n\n    // Slow case (Tonelli-Shanks).\n    return this.sqrt0(x);\n  }\n\n  sqrt3mod4(x) {\n    const e = this.m.addn(1).iushrn(2); // (p + 1) / 4\n    const b = this.pow(x, e);\n\n    if (!this.sqr(b).eq(x))\n      throw new SquareRootError(b);\n\n    return b;\n  }\n\n  sqrt5mod8(x) {\n    // Atkin's Algorithm.\n    const one = new BN(1).toRed(this);\n    const e = this.m.ushrn(3); // (p - 5) / 8\n    const x2 = this.add(x, x);\n    const alpha = this.pow(x2, e);\n    const beta = this.mul(x2, this.sqr(alpha));\n    const b = this.mul(this.mul(alpha, x), this.isub(beta, one));\n\n    if (!this.sqr(b).eq(x))\n      throw new SquareRootError(b);\n\n    return b;\n  }\n\n  sqrt5mod8sm1(x) {\n    const e = this.m.addn(3).iushrn(3); // (p + 3) / 8\n    const b = this.pow(x, e);\n\n    if (this.sqr(b).eq(x))\n      return b;\n\n    const c = this.mul(b, this.sm1);\n\n    if (this.sqr(c).eq(x))\n      return c;\n\n    throw new SquareRootError(b);\n  }\n\n  sqrt0(x) {\n    if (this.m.cmpn(1) === 0 || !this.m.isOdd())\n      throw new Error('Invalid prime.');\n\n    switch (this.jacobi(x)) {\n      case -1:\n        throw new SquareRootError(x);\n      case 0:\n        return x.clone();\n      case 1:\n        break;\n    }\n\n    const one = new BN(1).toRed(this);\n    const s = this.m.subn(1);\n    const e = s._makeOdd();\n    const n = new BN(2).toRed(this);\n\n    while (this.jacobi(n) !== -1)\n      this.iadd(n, one);\n\n    let g = this.pow(n, s);\n    let b = this.pow(x, s);\n    let y = this.pow(x, s.iaddn(1).iushrn(1));\n    let k = e;\n\n    for (;;) {\n      let t = b;\n      let m = 0;\n\n      while (!t.eq(one) && m < k) {\n        t = this.sqr(t);\n        m += 1;\n      }\n\n      if (m === 0)\n        break;\n\n      assert(m < k);\n\n      t = this.sqrn(g, k - m - 1);\n      g = this.sqr(t);\n      y = this.mul(y, t);\n      b = this.mul(b, g);\n      k = m;\n    }\n\n    return y;\n  }\n\n  idivsqrt(u, v) {\n    return this.divsqrt(u, v)._move(u);\n  }\n\n  divsqrt(u, v) {\n    this._verify2(u, v);\n\n    // u = 0, v = 0\n    if (u.isZero() && v.isZero())\n      throw new SquareRootError(v);\n\n    // Optimized inverse square root chain.\n    if (this.prime)\n      return this.prime.divsqrt(u, v);\n\n    // p = 3 mod 4\n    if (this.m.andln(3) === 3)\n      return this.divsqrt3mod4(u, v);\n\n    // p = 5 mod 8\n    if (this.sm1 != null && this.m.andln(7) === 5)\n      return this.divsqrt5mod8(u, v);\n\n    // v = 0\n    if (v.isZero())\n      throw new SquareRootError(v);\n\n    return this.sqrt(this.div(u, v));\n  }\n\n  divsqrt3mod4(u, v) {\n    // x = u^3 * v * (u^5 * v^3)^((p - 3) / 4) mod p\n    const e = this.m.subn(3).iushrn(2);\n    const u2 = this.sqr(u);\n    const u3 = this.mul(u2, u);\n    const u5 = this.mul(u3, u2);\n    const v3 = this.mul(this.sqr(v), v);\n    const p = this.pow(this.mul(u5, v3), e);\n    const x = this.mul(this.mul(u3, v), p);\n    const c = this.mul(v, this.sqr(x));\n\n    if (c.eq(u))\n      return x;\n\n    throw new SquareRootError(x);\n  }\n\n  divsqrt5mod8(u, v) {\n    // x = u * v^3 * (u * v^7)^((p - 5) / 8) mod p\n    const e = this.m.subn(5).iushrn(3);\n    const v3 = this.mul(this.sqr(v), v);\n    const v7 = this.mul(this.sqr(v3), v);\n    const p = this.pow(this.mul(u, v7), e);\n    const x = this.mul(this.mul(u, v3), p);\n    const c = this.mul(v, this.sqr(x));\n\n    if (c.eq(u))\n      return x;\n\n    const mc = this.ineg(c);\n\n    if (mc.eq(u))\n      return this.mul(x, this.sm1);\n\n    if (mc.eq(this.mul(u, this.sm1)))\n      throw new SquareRootError(this.mul(x, this.sm1));\n\n    throw new SquareRootError(x);\n  }\n\n  isSquare(a) {\n    if (this.m.isOdd())\n      return this.jacobi(a) >= 0;\n\n    return this.kronecker(a) >= 0;\n  }\n\n  ishl(a, num) {\n    this._verify1(a);\n    return this.imod(a.iushl(num));\n  }\n\n  shl(a, num) {\n    return this.ishl(a.clone(), num);\n  }\n\n  ishln(a, num) {\n    this._verify1(a);\n\n    a.iushln(num);\n\n    if (num <= 4) {\n      // Quick reduction.\n      while (a.ucmp(this.m) >= 0)\n        a._isub(a, this.m);\n    } else {\n      this.imod(a);\n    }\n\n    return a;\n  }\n\n  shln(a, num) {\n    return this.ishln(a.clone(), num);\n  }\n\n  ineg(a) {\n    this._verify1(a);\n\n    if (!a.isZero())\n      a._isub(this.m, a);\n\n    return a;\n  }\n\n  neg(a) {\n    return this.ineg(a.clone());\n  }\n\n  eq(a, b) {\n    this._verify2(a, b);\n    return a.ucmp(b) === 0;\n  }\n\n  eqn(a, num) {\n    this._verify1(a);\n\n    if (this.m.length === 1) {\n      num %= this.m.words[0];\n\n      if (num < 0)\n        num += this.m.words[0];\n\n      return a.ucmpn(num) === 0;\n    }\n\n    if (num < 0) {\n      this.m._isubn(-num);\n\n      const cmp = a.ucmp(this.m);\n\n      this.m._iaddn(-num);\n\n      return cmp === 0;\n    }\n\n    return a.ucmpn(num) === 0;\n  }\n\n  isHigh(a) {\n    return !this.isLow(a);\n  }\n\n  isLow(a) {\n    this._verify1(a);\n    return a.ucmp(this.m.ushrn(1)) <= 0;\n  }\n\n  isOdd(a) {\n    this._verify1(a);\n    return a.isOdd();\n  }\n\n  isEven(a) {\n    this._verify1(a);\n    return a.isEven();\n  }\n\n  legendre(num) {\n    this._verify1(num);\n\n    if (this.m.isEven())\n      throw new Error('legendre: `num` must be odd.');\n\n    // Euler's criterion.\n    const e = this.m.subn(1).iushrn(1); // (p - 1) / 2\n    const symbol = this.pow(num, e);\n\n    if (symbol.isZero())\n      return 0;\n\n    const one = new BN(1).toRed(this);\n\n    if (symbol.eq(one))\n      return 1;\n\n    if (symbol.eq(this.ineg(one)))\n      return -1;\n\n    throw new Error('Invalid prime.');\n  }\n\n  jacobi(a) {\n    this._verify1(a);\n    return a.jacobi(this.m);\n  }\n\n  kronecker(a) {\n    this._verify1(a);\n    return a.kronecker(this.m);\n  }\n\n  iinvert(a) {\n    return this.invert(a)._move(a);\n  }\n\n  invert(a) {\n    this._verify1(a);\n    return a.invert(this.m)._forceRed(this);\n  }\n\n  ifermat(a) {\n    return this.fermat(a)._move(a);\n  }\n\n  fermat(a) {\n    this._verify1(a);\n\n    if (a.isZero() || this.m.cmpn(1) === 0)\n      throw new RangeError('Not invertible.');\n\n    // Optimized inversion chain.\n    if (this.prime)\n      return this.prime.fermat(a);\n\n    // Invert using fermat's little theorem.\n    return this.pow(a, this.m.subn(2));\n  }\n\n  invertAll(elems) {\n    // Montgomery's trick.\n    enforce(Array.isArray(elems), 'elems', 'array');\n\n    for (const elem of elems) {\n      enforce(BN.isBN(elem), 'elem', 'bignum');\n\n      this._verify1(elem);\n    }\n\n    if (this.m.cmpn(1) === 0 || this.m.isEven())\n      throw new RangeError('Not invertible.');\n\n    const len = elems.length;\n    const invs = new Array(len);\n\n    if (len === 0)\n      return invs;\n\n    let acc = new BN(1).toRed(this);\n\n    for (let i = 0; i < len; i++) {\n      if (elems[i].isZero()) {\n        invs[i] = elems[i].clone();\n        continue;\n      }\n\n      invs[i] = acc;\n      acc = this.mul(acc, elems[i]);\n    }\n\n    acc = this.invert(acc);\n\n    for (let i = len - 1; i >= 0; i--) {\n      if (elems[i].isZero())\n        continue;\n\n      invs[i] = this.mul(acc, invs[i]);\n      acc = this.mul(acc, elems[i]);\n    }\n\n    return invs;\n  }\n\n  [custom]() {\n    if (this.prime)\n      return `<Red: ${this.prime.name}>`;\n\n    return `<Red: ${this.m.toString(10)}>`;\n  }\n}\n\n/**\n * Barrett Engine\n */\n\nclass Barrett extends Red {\n  constructor(m) {\n    super(m);\n\n    this.prime = null;\n    this.n = this.m.bitLength();\n\n    if ((this.n % 26) !== 0)\n      this.n += 26 - (this.n % 26);\n\n    this.k = this.n * 2;\n    this.w = this.k / 26;\n    this.b = BN.shift(1, this.k).div(this.m);\n  }\n\n  convertTo(num) {\n    if (num.length > this.w)\n      return super.convertTo(num);\n\n    return this.imod(num.clone());\n  }\n\n  _shift(q) {\n    let i = 0;\n    let j = this.w;\n\n    while (j < q.length)\n      q.words[i++] = q.words[j++];\n\n    if (i === 0)\n      q.words[i++] = 0;\n\n    q.length = i;\n  }\n\n  imod(a) {\n    const neg = a.negative;\n\n    assert(a.length <= this.w);\n\n    a.negative = 0;\n\n    const q = a.mul(this.b);\n\n    // Shift right by `k` bits.\n    this._shift(q);\n\n    a._isub(a, q.mul(this.m));\n\n    if (a.ucmp(this.m) >= 0)\n      a._isub(a, this.m);\n\n    if (neg && !a.isZero())\n      a._isub(this.m, a);\n\n    a.red = this;\n\n    return a;\n  }\n}\n\n/**\n * Montgomery Engine\n */\n\nclass Mont extends Red {\n  constructor(m) {\n    super(m);\n\n    // Note that:\n    //\n    //   mi = (-m^-1 mod (2^(n * 2))) mod r\n    //\n    // and:\n    //\n    //   mi = (((2^n)^-1 mod m) * r^-1 - 1) / m\n    //\n    // are equivalent.\n    this.prime = null;\n    this.n = this.m.length * 26;\n    this.r = BN.shift(1, this.n);\n    this.r2 = BN.shift(1, this.n * 2).imod(this.m);\n    this.ri = this.r.invert(this.m);\n    this.mi = this.r.mul(this.ri).isubn(1).div(this.m);\n    this.rib = null;\n  }\n\n  get mont() {\n    return true;\n  }\n\n  convertTo(num) {\n    if (num.isNeg() || num.ucmp(this.m) >= 0)\n      return this.imod(num.ushln(this.n));\n\n    // Equivalent to: (num * 2^n) mod m\n    return this.mul(num, this.r2);\n  }\n\n  convertFrom(num) {\n    // Equivalent to: num * r^-1 mod m\n    const r = this.mul(num, new BN(1));\n    r.red = null;\n    return r;\n  }\n\n  intTo(a) {\n    return (a << BigInt(this.n)) % this.mb;\n  }\n\n  intFrom(a) {\n    if (this.rib === null)\n      this.rib = this.ri.toBigInt();\n\n    return (a * this.rib) % this.mb;\n  }\n\n  iaddn(a, num) {\n    return this.iadd(a, this.convertTo(new BN(num)));\n  }\n\n  isubn(a, num) {\n    return this.isub(a, this.convertTo(new BN(num)));\n  }\n\n  imul(a, b) {\n    return this.mul(a, b)._move(a);\n  }\n\n  mul(a, b) {\n    if (a.isZero() || b.isZero())\n      return new BN(0)._forceRed(this);\n\n    const t = a.mul(b);\n    const c = t.umaskn(this.n).mul(this.mi).iumaskn(this.n);\n    const u = t.iadd(c.mul(this.m)).iushrn(this.n);\n\n    if (u.ucmp(this.m) >= 0)\n      u._isub(u, this.m);\n\n    return u._forceRed(this);\n  }\n\n  imuln(a, num) {\n    this._verify1(a);\n\n    if (a.isZero())\n      return a;\n\n    if (num === 0) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    const neg = num < 0;\n\n    if (neg)\n      num = -num;\n\n    if (this.m.length === 1)\n      num %= this.m.words[0];\n\n    const bits = countBits(num);\n\n    // Potentially compute with additions.\n    // This avoids an expensive division.\n    if (bits > 5) {\n      // Slow case (num > 31).\n      this.imul(a, this.convertTo(new BN(num)));\n    } else if ((num & (num - 1)) === 0) {\n      // Optimize for powers of two.\n      for (let i = 0; i < bits - 1; i++)\n        this.iadd(a, a);\n    } else {\n      // Multiply left to right.\n      const c = a.clone();\n\n      for (let i = bits - 2; i >= 0; i--) {\n        this.iadd(a, a);\n\n        if ((num >> i) & 1)\n          this.iadd(a, c);\n      }\n    }\n\n    if (neg)\n      this.ineg(a);\n\n    return a;\n  }\n\n  eqn(a, num) {\n    this._verify1(a);\n\n    if (num === 0)\n      return a.isZero();\n\n    return a.ucmp(this.convertTo(new BN(num))) === 0;\n  }\n\n  isLow(a) {\n    this._verify1(a);\n    return this.convertFrom(a).ucmp(this.m.ushrn(1)) <= 0;\n  }\n\n  isOdd(a) {\n    this._verify1(a);\n    return this.convertFrom(a).isOdd();\n  }\n\n  isEven(a) {\n    this._verify1(a);\n    return this.convertFrom(a).isEven();\n  }\n\n  invert(a) {\n    this._verify1(a);\n\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    return this.imod(a.invert(this.m).mul(this.r2));\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction makeError(Error, msg, start) {\n  const err = new Error(msg);\n\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(err, start);\n\n  return err;\n}\n\nfunction assert(value, message) {\n  if (!value) {\n    const msg = message || 'Assertion failed.';\n    throw makeError(Error, msg, assert);\n  }\n}\n\nfunction enforce(value, name, type) {\n  if (!value) {\n    const msg = `\"${name}\" must be a(n) ${type}.`;\n    throw makeError(TypeError, msg, enforce);\n  }\n}\n\nfunction range(value, name) {\n  if (!value) {\n    const msg = `\"${name}\" only works with positive numbers.`;\n    throw makeError(RangeError, msg, range);\n  }\n}\n\nfunction red(value, name) {\n  if (!value) {\n    const msg = `\"${name}\" only works with red numbers.`;\n    throw makeError(TypeError, msg, red);\n  }\n}\n\nfunction nonred(value, name) {\n  if (!value) {\n    const msg = `\"${name}\" only works with normal numbers.`;\n    throw makeError(TypeError, msg, nonred);\n  }\n}\n\nfunction nonzero(value) {\n  if (!value) {\n    const msg = 'Cannot divide by zero.';\n    throw makeError(RangeError, msg, nonzero);\n  }\n}\n\nclass SquareRootError extends Error {\n  constructor(result) {\n    super();\n\n    this.name = 'SquareRootError';\n    this.message = 'X is not a square mod P.';\n    this.result = result.fromRed();\n\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(this, SquareRootError);\n  }\n}\n\nfunction isInteger(num) {\n  return Number.isSafeInteger(num);\n}\n\nfunction isSMI(num) {\n  return isInteger(num)\n      && num >= -0x3ffffff\n      && num <= 0x3ffffff;\n}\n\nfunction allocate(ArrayType, size) {\n  if (ArrayType.allocUnsafeSlow)\n    return ArrayType.allocUnsafeSlow(size);\n\n  return new ArrayType(size);\n}\n\nfunction getBase(base) {\n  if (base == null)\n    return 10;\n\n  if (typeof base === 'number')\n    return base;\n\n  switch (base) {\n    case 'bin':\n      return 2;\n    case 'oct':\n      return 8;\n    case 'dec':\n      return 10;\n    case 'hex':\n      return 16;\n  }\n\n  return 0;\n}\n\n/*\n * Internal\n */\n\nfunction countBits(w) {\n  if (Math.clz32)\n    return 32 - Math.clz32(w);\n\n  let t = w;\n  let r = 0;\n\n  if (t >= 0x1000) {\n    r += 13;\n    t >>>= 13;\n  }\n\n  if (t >= 0x40) {\n    r += 7;\n    t >>>= 7;\n  }\n\n  if (t >= 0x8) {\n    r += 4;\n    t >>>= 4;\n  }\n\n  if (t >= 0x02) {\n    r += 2;\n    t >>>= 2;\n  }\n\n  return r + t;\n}\n\nfunction zeroBits(w) {\n  // Shortcut.\n  if (w === 0)\n    return 26;\n\n  let t = w;\n  let r = 0;\n\n  if ((t & 0x1fff) === 0) {\n    r += 13;\n    t >>>= 13;\n  }\n\n  if ((t & 0x7f) === 0) {\n    r += 7;\n    t >>>= 7;\n  }\n\n  if ((t & 0xf) === 0) {\n    r += 4;\n    t >>>= 4;\n  }\n\n  if ((t & 0x3) === 0) {\n    r += 2;\n    t >>>= 2;\n  }\n\n  if ((t & 0x1) === 0)\n    r += 1;\n\n  return r;\n}\n\nfunction parseHex(str, start, end) {\n  const len = Math.min(str.length, end);\n\n  let r = 0;\n  let z = 0;\n\n  for (let i = start; i < len; i++) {\n    const c = str.charCodeAt(i) - 48;\n\n    r <<= 4;\n\n    let b;\n\n    if (c >= 49 && c <= 54) {\n      // 'a' - 'f'\n      b = c - 49 + 0xa;\n    } else if (c >= 17 && c <= 22) {\n      // 'A' - 'F'\n      b = c - 17 + 0xa;\n    } else {\n      // '0' - '9'\n      b = c;\n    }\n\n    r |= b;\n    z |= b;\n  }\n\n  if (z & ~15)\n    throw new Error('Invalid string.');\n\n  return r;\n}\n\nfunction parseBase(str, start, end, mul) {\n  const len = Math.min(str.length, end);\n\n  let r = 0;\n\n  for (let i = start; i < len; i++) {\n    const c = str.charCodeAt(i) - 48;\n\n    r *= mul;\n\n    let b;\n\n    if (c >= 49) {\n      // 'a'\n      b = c - 49 + 0xa;\n    } else if (c >= 17) {\n      // 'A'\n      b = c - 17 + 0xa;\n    } else {\n      // '0' - '9'\n      b = c;\n    }\n\n    if (c < 0 || c > 207 || b >= mul)\n      throw new Error('Invalid string.');\n\n    r += b;\n  }\n\n  return r;\n}\n\n/*\n * Exponentiation (bigint)\n */\n\nfunction powInt(x, e, m) {\n  // Sliding window (odd multiples only).\n  const one = BigInt(1);\n  const wnd = new Array(WND_SIZE);\n  const x2 = (x * x) % m;\n\n  wnd[0] = x;\n\n  for (let i = 1; i < WND_SIZE; i++)\n    wnd[i] = (wnd[i - 1] * x2) % m;\n\n  let i = e.bitLength();\n  let r = one;\n\n  while (i >= WND_WIDTH) {\n    let width = WND_WIDTH;\n    let bits = e.bits(i - width, width);\n\n    if (bits < WND_SIZE) {\n      r = (r * r) % m;\n      i -= 1;\n      continue;\n    }\n\n    while ((bits & 1) === 0) {\n      width -= 1;\n      bits >>= 1;\n    }\n\n    if (r === one) {\n      r = wnd[bits >> 1];\n    } else {\n      r = sqrn(r, width, m);\n      r = (r * wnd[bits >> 1]) % m;\n    }\n\n    i -= width;\n  }\n\n  if (i > 0) {\n    const bits = e.bits(0, i);\n\n    while (i--) {\n      r = (r * r) % m;\n\n      if ((bits >> i) & 1)\n        r = (r * x) % m;\n    }\n  }\n\n  return r;\n}\n\nfunction sqrn(x, n, m) {\n  for (let i = 0; i < n; i++)\n    x = (x * x) % m;\n  return x;\n}\n\n/*\n * Multiplication\n */\n\nfunction smallMulTo(self, num, out) {\n  const len = self.length + num.length;\n\n  out.negative = self.negative ^ num.negative;\n  out._alloc(len);\n  out.length = len;\n\n  // Peel one iteration (compiler can't\n  // do it, because of code complexity).\n  const a = self.words[0];\n  const b = num.words[0];\n  const r = a * b;\n  const lo = r & 0x3ffffff;\n\n  let carry = (r / 0x4000000) | 0;\n  let k = 1;\n\n  out.words[0] = lo;\n\n  for (; k < out.length - 1; k++) {\n    // Sum all words with the same\n    // `i + j = k` and accumulate\n    // `ncarry`, note that ncarry\n    // could be >= 0x3ffffff.\n    let ncarry = carry >>> 26;\n    let rword = carry & 0x3ffffff;\n\n    const min = Math.max(0, k - self.length + 1);\n    const max = Math.min(k, num.length - 1);\n\n    for (let j = min; j <= max; j++) {\n      const i = k - j;\n      const a = self.words[i];\n      const b = num.words[j];\n      const r = a * b + rword;\n\n      ncarry += (r / 0x4000000) | 0;\n      rword = r & 0x3ffffff;\n    }\n\n    out.words[k] = rword | 0;\n    carry = ncarry | 0;\n  }\n\n  if (carry !== 0)\n    out.words[k] = carry | 0;\n  else\n    out.length -= 1;\n\n  return out._strip();\n}\n\nfunction bigMulTo(self, num, out) {\n  const len = self.length + num.length;\n\n  out.negative = self.negative ^ num.negative;\n  out._alloc(len);\n  out.length = len;\n\n  let carry = 0;\n  let hncarry = 0;\n  let k = 0;\n\n  for (; k < out.length - 1; k++) {\n    // Sum all words with the same\n    // `i + j = k` and accumulate\n    // `ncarry`, note that ncarry\n    // could be >= 0x3ffffff.\n    let ncarry = hncarry;\n\n    hncarry = 0;\n\n    let rword = carry & 0x3ffffff;\n\n    const min = Math.max(0, k - self.length + 1);\n    const max = Math.min(k, num.length - 1);\n\n    for (let j = min; j <= max; j++) {\n      const i = k - j;\n      const a = self.words[i];\n      const b = num.words[j];\n      const r = a * b;\n\n      let lo = r & 0x3ffffff;\n\n      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n      lo = (lo + rword) | 0;\n      rword = lo & 0x3ffffff;\n      ncarry = (ncarry + (lo >>> 26)) | 0;\n\n      hncarry += ncarry >>> 26;\n      ncarry &= 0x3ffffff;\n    }\n\n    out.words[k] = rword;\n    carry = ncarry;\n    ncarry = hncarry;\n  }\n\n  if (carry !== 0)\n    out.words[k] = carry;\n  else\n    out.length -= 1;\n\n  return out._strip();\n}\n\nfunction jumboMulTo(x, y, out) {\n  // v8 has a 2147483519 bit max (~256mb).\n  if (!HAS_BIGINT || x.length + y.length > 82595519)\n    return bigMulTo(x, y, out);\n\n  const zero = BigInt(0);\n  const mask = BigInt(0x3ffffff);\n  const shift = BigInt(26);\n\n  let z = x.toBigInt() * y.toBigInt();\n\n  const neg = (z < zero) | 0;\n\n  if (neg)\n    z = -z;\n\n  let i = 0;\n\n  while (z > zero) {\n    out.words[i++] = Number(z & mask);\n    z >>= shift;\n  }\n\n  if (i === 0)\n    out.words[i++] = 0;\n\n  out.length = i;\n  out.negative = neg;\n\n  return out;\n}\n\nfunction comb10MulTo(self, num, out) {\n  const a = self.words;\n  const b = num.words;\n  const o = out.words;\n  const a0 = a[0] | 0;\n  const al0 = a0 & 0x1fff;\n  const ah0 = a0 >>> 13;\n  const a1 = a[1] | 0;\n  const al1 = a1 & 0x1fff;\n  const ah1 = a1 >>> 13;\n  const a2 = a[2] | 0;\n  const al2 = a2 & 0x1fff;\n  const ah2 = a2 >>> 13;\n  const a3 = a[3] | 0;\n  const al3 = a3 & 0x1fff;\n  const ah3 = a3 >>> 13;\n  const a4 = a[4] | 0;\n  const al4 = a4 & 0x1fff;\n  const ah4 = a4 >>> 13;\n  const a5 = a[5] | 0;\n  const al5 = a5 & 0x1fff;\n  const ah5 = a5 >>> 13;\n  const a6 = a[6] | 0;\n  const al6 = a6 & 0x1fff;\n  const ah6 = a6 >>> 13;\n  const a7 = a[7] | 0;\n  const al7 = a7 & 0x1fff;\n  const ah7 = a7 >>> 13;\n  const a8 = a[8] | 0;\n  const al8 = a8 & 0x1fff;\n  const ah8 = a8 >>> 13;\n  const a9 = a[9] | 0;\n  const al9 = a9 & 0x1fff;\n  const ah9 = a9 >>> 13;\n  const b0 = b[0] | 0;\n  const bl0 = b0 & 0x1fff;\n  const bh0 = b0 >>> 13;\n  const b1 = b[1] | 0;\n  const bl1 = b1 & 0x1fff;\n  const bh1 = b1 >>> 13;\n  const b2 = b[2] | 0;\n  const bl2 = b2 & 0x1fff;\n  const bh2 = b2 >>> 13;\n  const b3 = b[3] | 0;\n  const bl3 = b3 & 0x1fff;\n  const bh3 = b3 >>> 13;\n  const b4 = b[4] | 0;\n  const bl4 = b4 & 0x1fff;\n  const bh4 = b4 >>> 13;\n  const b5 = b[5] | 0;\n  const bl5 = b5 & 0x1fff;\n  const bh5 = b5 >>> 13;\n  const b6 = b[6] | 0;\n  const bl6 = b6 & 0x1fff;\n  const bh6 = b6 >>> 13;\n  const b7 = b[7] | 0;\n  const bl7 = b7 & 0x1fff;\n  const bh7 = b7 >>> 13;\n  const b8 = b[8] | 0;\n  const bl8 = b8 & 0x1fff;\n  const bh8 = b8 >>> 13;\n  const b9 = b[9] | 0;\n  const bl9 = b9 & 0x1fff;\n  const bh9 = b9 >>> 13;\n\n  let c = 0;\n  let lo, mid, hi;\n\n  out.negative = self.negative ^ num.negative;\n  out._alloc(20);\n  out.length = 19;\n\n  /* k = 0 */\n  lo = Math.imul(al0, bl0);\n  mid = Math.imul(al0, bh0);\n  mid = (mid + Math.imul(ah0, bl0)) | 0;\n  hi = Math.imul(ah0, bh0);\n\n  let w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n  w0 &= 0x3ffffff;\n\n  /* k = 1 */\n  lo = Math.imul(al1, bl0);\n  mid = Math.imul(al1, bh0);\n  mid = (mid + Math.imul(ah1, bl0)) | 0;\n  hi = Math.imul(ah1, bh0);\n  lo = (lo + Math.imul(al0, bl1)) | 0;\n  mid = (mid + Math.imul(al0, bh1)) | 0;\n  mid = (mid + Math.imul(ah0, bl1)) | 0;\n  hi = (hi + Math.imul(ah0, bh1)) | 0;\n\n  let w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n  w1 &= 0x3ffffff;\n\n  /* k = 2 */\n  lo = Math.imul(al2, bl0);\n  mid = Math.imul(al2, bh0);\n  mid = (mid + Math.imul(ah2, bl0)) | 0;\n  hi = Math.imul(ah2, bh0);\n  lo = (lo + Math.imul(al1, bl1)) | 0;\n  mid = (mid + Math.imul(al1, bh1)) | 0;\n  mid = (mid + Math.imul(ah1, bl1)) | 0;\n  hi = (hi + Math.imul(ah1, bh1)) | 0;\n  lo = (lo + Math.imul(al0, bl2)) | 0;\n  mid = (mid + Math.imul(al0, bh2)) | 0;\n  mid = (mid + Math.imul(ah0, bl2)) | 0;\n  hi = (hi + Math.imul(ah0, bh2)) | 0;\n\n  let w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n  w2 &= 0x3ffffff;\n\n  /* k = 3 */\n  lo = Math.imul(al3, bl0);\n  mid = Math.imul(al3, bh0);\n  mid = (mid + Math.imul(ah3, bl0)) | 0;\n  hi = Math.imul(ah3, bh0);\n  lo = (lo + Math.imul(al2, bl1)) | 0;\n  mid = (mid + Math.imul(al2, bh1)) | 0;\n  mid = (mid + Math.imul(ah2, bl1)) | 0;\n  hi = (hi + Math.imul(ah2, bh1)) | 0;\n  lo = (lo + Math.imul(al1, bl2)) | 0;\n  mid = (mid + Math.imul(al1, bh2)) | 0;\n  mid = (mid + Math.imul(ah1, bl2)) | 0;\n  hi = (hi + Math.imul(ah1, bh2)) | 0;\n  lo = (lo + Math.imul(al0, bl3)) | 0;\n  mid = (mid + Math.imul(al0, bh3)) | 0;\n  mid = (mid + Math.imul(ah0, bl3)) | 0;\n  hi = (hi + Math.imul(ah0, bh3)) | 0;\n\n  let w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n  w3 &= 0x3ffffff;\n\n  /* k = 4 */\n  lo = Math.imul(al4, bl0);\n  mid = Math.imul(al4, bh0);\n  mid = (mid + Math.imul(ah4, bl0)) | 0;\n  hi = Math.imul(ah4, bh0);\n  lo = (lo + Math.imul(al3, bl1)) | 0;\n  mid = (mid + Math.imul(al3, bh1)) | 0;\n  mid = (mid + Math.imul(ah3, bl1)) | 0;\n  hi = (hi + Math.imul(ah3, bh1)) | 0;\n  lo = (lo + Math.imul(al2, bl2)) | 0;\n  mid = (mid + Math.imul(al2, bh2)) | 0;\n  mid = (mid + Math.imul(ah2, bl2)) | 0;\n  hi = (hi + Math.imul(ah2, bh2)) | 0;\n  lo = (lo + Math.imul(al1, bl3)) | 0;\n  mid = (mid + Math.imul(al1, bh3)) | 0;\n  mid = (mid + Math.imul(ah1, bl3)) | 0;\n  hi = (hi + Math.imul(ah1, bh3)) | 0;\n  lo = (lo + Math.imul(al0, bl4)) | 0;\n  mid = (mid + Math.imul(al0, bh4)) | 0;\n  mid = (mid + Math.imul(ah0, bl4)) | 0;\n  hi = (hi + Math.imul(ah0, bh4)) | 0;\n\n  let w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n  w4 &= 0x3ffffff;\n\n  /* k = 5 */\n  lo = Math.imul(al5, bl0);\n  mid = Math.imul(al5, bh0);\n  mid = (mid + Math.imul(ah5, bl0)) | 0;\n  hi = Math.imul(ah5, bh0);\n  lo = (lo + Math.imul(al4, bl1)) | 0;\n  mid = (mid + Math.imul(al4, bh1)) | 0;\n  mid = (mid + Math.imul(ah4, bl1)) | 0;\n  hi = (hi + Math.imul(ah4, bh1)) | 0;\n  lo = (lo + Math.imul(al3, bl2)) | 0;\n  mid = (mid + Math.imul(al3, bh2)) | 0;\n  mid = (mid + Math.imul(ah3, bl2)) | 0;\n  hi = (hi + Math.imul(ah3, bh2)) | 0;\n  lo = (lo + Math.imul(al2, bl3)) | 0;\n  mid = (mid + Math.imul(al2, bh3)) | 0;\n  mid = (mid + Math.imul(ah2, bl3)) | 0;\n  hi = (hi + Math.imul(ah2, bh3)) | 0;\n  lo = (lo + Math.imul(al1, bl4)) | 0;\n  mid = (mid + Math.imul(al1, bh4)) | 0;\n  mid = (mid + Math.imul(ah1, bl4)) | 0;\n  hi = (hi + Math.imul(ah1, bh4)) | 0;\n  lo = (lo + Math.imul(al0, bl5)) | 0;\n  mid = (mid + Math.imul(al0, bh5)) | 0;\n  mid = (mid + Math.imul(ah0, bl5)) | 0;\n  hi = (hi + Math.imul(ah0, bh5)) | 0;\n\n  let w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n  w5 &= 0x3ffffff;\n\n  /* k = 6 */\n  lo = Math.imul(al6, bl0);\n  mid = Math.imul(al6, bh0);\n  mid = (mid + Math.imul(ah6, bl0)) | 0;\n  hi = Math.imul(ah6, bh0);\n  lo = (lo + Math.imul(al5, bl1)) | 0;\n  mid = (mid + Math.imul(al5, bh1)) | 0;\n  mid = (mid + Math.imul(ah5, bl1)) | 0;\n  hi = (hi + Math.imul(ah5, bh1)) | 0;\n  lo = (lo + Math.imul(al4, bl2)) | 0;\n  mid = (mid + Math.imul(al4, bh2)) | 0;\n  mid = (mid + Math.imul(ah4, bl2)) | 0;\n  hi = (hi + Math.imul(ah4, bh2)) | 0;\n  lo = (lo + Math.imul(al3, bl3)) | 0;\n  mid = (mid + Math.imul(al3, bh3)) | 0;\n  mid = (mid + Math.imul(ah3, bl3)) | 0;\n  hi = (hi + Math.imul(ah3, bh3)) | 0;\n  lo = (lo + Math.imul(al2, bl4)) | 0;\n  mid = (mid + Math.imul(al2, bh4)) | 0;\n  mid = (mid + Math.imul(ah2, bl4)) | 0;\n  hi = (hi + Math.imul(ah2, bh4)) | 0;\n  lo = (lo + Math.imul(al1, bl5)) | 0;\n  mid = (mid + Math.imul(al1, bh5)) | 0;\n  mid = (mid + Math.imul(ah1, bl5)) | 0;\n  hi = (hi + Math.imul(ah1, bh5)) | 0;\n  lo = (lo + Math.imul(al0, bl6)) | 0;\n  mid = (mid + Math.imul(al0, bh6)) | 0;\n  mid = (mid + Math.imul(ah0, bl6)) | 0;\n  hi = (hi + Math.imul(ah0, bh6)) | 0;\n\n  let w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n  w6 &= 0x3ffffff;\n\n  /* k = 7 */\n  lo = Math.imul(al7, bl0);\n  mid = Math.imul(al7, bh0);\n  mid = (mid + Math.imul(ah7, bl0)) | 0;\n  hi = Math.imul(ah7, bh0);\n  lo = (lo + Math.imul(al6, bl1)) | 0;\n  mid = (mid + Math.imul(al6, bh1)) | 0;\n  mid = (mid + Math.imul(ah6, bl1)) | 0;\n  hi = (hi + Math.imul(ah6, bh1)) | 0;\n  lo = (lo + Math.imul(al5, bl2)) | 0;\n  mid = (mid + Math.imul(al5, bh2)) | 0;\n  mid = (mid + Math.imul(ah5, bl2)) | 0;\n  hi = (hi + Math.imul(ah5, bh2)) | 0;\n  lo = (lo + Math.imul(al4, bl3)) | 0;\n  mid = (mid + Math.imul(al4, bh3)) | 0;\n  mid = (mid + Math.imul(ah4, bl3)) | 0;\n  hi = (hi + Math.imul(ah4, bh3)) | 0;\n  lo = (lo + Math.imul(al3, bl4)) | 0;\n  mid = (mid + Math.imul(al3, bh4)) | 0;\n  mid = (mid + Math.imul(ah3, bl4)) | 0;\n  hi = (hi + Math.imul(ah3, bh4)) | 0;\n  lo = (lo + Math.imul(al2, bl5)) | 0;\n  mid = (mid + Math.imul(al2, bh5)) | 0;\n  mid = (mid + Math.imul(ah2, bl5)) | 0;\n  hi = (hi + Math.imul(ah2, bh5)) | 0;\n  lo = (lo + Math.imul(al1, bl6)) | 0;\n  mid = (mid + Math.imul(al1, bh6)) | 0;\n  mid = (mid + Math.imul(ah1, bl6)) | 0;\n  hi = (hi + Math.imul(ah1, bh6)) | 0;\n  lo = (lo + Math.imul(al0, bl7)) | 0;\n  mid = (mid + Math.imul(al0, bh7)) | 0;\n  mid = (mid + Math.imul(ah0, bl7)) | 0;\n  hi = (hi + Math.imul(ah0, bh7)) | 0;\n\n  let w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n  w7 &= 0x3ffffff;\n\n  /* k = 8 */\n  lo = Math.imul(al8, bl0);\n  mid = Math.imul(al8, bh0);\n  mid = (mid + Math.imul(ah8, bl0)) | 0;\n  hi = Math.imul(ah8, bh0);\n  lo = (lo + Math.imul(al7, bl1)) | 0;\n  mid = (mid + Math.imul(al7, bh1)) | 0;\n  mid = (mid + Math.imul(ah7, bl1)) | 0;\n  hi = (hi + Math.imul(ah7, bh1)) | 0;\n  lo = (lo + Math.imul(al6, bl2)) | 0;\n  mid = (mid + Math.imul(al6, bh2)) | 0;\n  mid = (mid + Math.imul(ah6, bl2)) | 0;\n  hi = (hi + Math.imul(ah6, bh2)) | 0;\n  lo = (lo + Math.imul(al5, bl3)) | 0;\n  mid = (mid + Math.imul(al5, bh3)) | 0;\n  mid = (mid + Math.imul(ah5, bl3)) | 0;\n  hi = (hi + Math.imul(ah5, bh3)) | 0;\n  lo = (lo + Math.imul(al4, bl4)) | 0;\n  mid = (mid + Math.imul(al4, bh4)) | 0;\n  mid = (mid + Math.imul(ah4, bl4)) | 0;\n  hi = (hi + Math.imul(ah4, bh4)) | 0;\n  lo = (lo + Math.imul(al3, bl5)) | 0;\n  mid = (mid + Math.imul(al3, bh5)) | 0;\n  mid = (mid + Math.imul(ah3, bl5)) | 0;\n  hi = (hi + Math.imul(ah3, bh5)) | 0;\n  lo = (lo + Math.imul(al2, bl6)) | 0;\n  mid = (mid + Math.imul(al2, bh6)) | 0;\n  mid = (mid + Math.imul(ah2, bl6)) | 0;\n  hi = (hi + Math.imul(ah2, bh6)) | 0;\n  lo = (lo + Math.imul(al1, bl7)) | 0;\n  mid = (mid + Math.imul(al1, bh7)) | 0;\n  mid = (mid + Math.imul(ah1, bl7)) | 0;\n  hi = (hi + Math.imul(ah1, bh7)) | 0;\n  lo = (lo + Math.imul(al0, bl8)) | 0;\n  mid = (mid + Math.imul(al0, bh8)) | 0;\n  mid = (mid + Math.imul(ah0, bl8)) | 0;\n  hi = (hi + Math.imul(ah0, bh8)) | 0;\n\n  let w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n  w8 &= 0x3ffffff;\n\n  /* k = 9 */\n  lo = Math.imul(al9, bl0);\n  mid = Math.imul(al9, bh0);\n  mid = (mid + Math.imul(ah9, bl0)) | 0;\n  hi = Math.imul(ah9, bh0);\n  lo = (lo + Math.imul(al8, bl1)) | 0;\n  mid = (mid + Math.imul(al8, bh1)) | 0;\n  mid = (mid + Math.imul(ah8, bl1)) | 0;\n  hi = (hi + Math.imul(ah8, bh1)) | 0;\n  lo = (lo + Math.imul(al7, bl2)) | 0;\n  mid = (mid + Math.imul(al7, bh2)) | 0;\n  mid = (mid + Math.imul(ah7, bl2)) | 0;\n  hi = (hi + Math.imul(ah7, bh2)) | 0;\n  lo = (lo + Math.imul(al6, bl3)) | 0;\n  mid = (mid + Math.imul(al6, bh3)) | 0;\n  mid = (mid + Math.imul(ah6, bl3)) | 0;\n  hi = (hi + Math.imul(ah6, bh3)) | 0;\n  lo = (lo + Math.imul(al5, bl4)) | 0;\n  mid = (mid + Math.imul(al5, bh4)) | 0;\n  mid = (mid + Math.imul(ah5, bl4)) | 0;\n  hi = (hi + Math.imul(ah5, bh4)) | 0;\n  lo = (lo + Math.imul(al4, bl5)) | 0;\n  mid = (mid + Math.imul(al4, bh5)) | 0;\n  mid = (mid + Math.imul(ah4, bl5)) | 0;\n  hi = (hi + Math.imul(ah4, bh5)) | 0;\n  lo = (lo + Math.imul(al3, bl6)) | 0;\n  mid = (mid + Math.imul(al3, bh6)) | 0;\n  mid = (mid + Math.imul(ah3, bl6)) | 0;\n  hi = (hi + Math.imul(ah3, bh6)) | 0;\n  lo = (lo + Math.imul(al2, bl7)) | 0;\n  mid = (mid + Math.imul(al2, bh7)) | 0;\n  mid = (mid + Math.imul(ah2, bl7)) | 0;\n  hi = (hi + Math.imul(ah2, bh7)) | 0;\n  lo = (lo + Math.imul(al1, bl8)) | 0;\n  mid = (mid + Math.imul(al1, bh8)) | 0;\n  mid = (mid + Math.imul(ah1, bl8)) | 0;\n  hi = (hi + Math.imul(ah1, bh8)) | 0;\n  lo = (lo + Math.imul(al0, bl9)) | 0;\n  mid = (mid + Math.imul(al0, bh9)) | 0;\n  mid = (mid + Math.imul(ah0, bl9)) | 0;\n  hi = (hi + Math.imul(ah0, bh9)) | 0;\n\n  let w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n  w9 &= 0x3ffffff;\n\n  /* k = 10 */\n  lo = Math.imul(al9, bl1);\n  mid = Math.imul(al9, bh1);\n  mid = (mid + Math.imul(ah9, bl1)) | 0;\n  hi = Math.imul(ah9, bh1);\n  lo = (lo + Math.imul(al8, bl2)) | 0;\n  mid = (mid + Math.imul(al8, bh2)) | 0;\n  mid = (mid + Math.imul(ah8, bl2)) | 0;\n  hi = (hi + Math.imul(ah8, bh2)) | 0;\n  lo = (lo + Math.imul(al7, bl3)) | 0;\n  mid = (mid + Math.imul(al7, bh3)) | 0;\n  mid = (mid + Math.imul(ah7, bl3)) | 0;\n  hi = (hi + Math.imul(ah7, bh3)) | 0;\n  lo = (lo + Math.imul(al6, bl4)) | 0;\n  mid = (mid + Math.imul(al6, bh4)) | 0;\n  mid = (mid + Math.imul(ah6, bl4)) | 0;\n  hi = (hi + Math.imul(ah6, bh4)) | 0;\n  lo = (lo + Math.imul(al5, bl5)) | 0;\n  mid = (mid + Math.imul(al5, bh5)) | 0;\n  mid = (mid + Math.imul(ah5, bl5)) | 0;\n  hi = (hi + Math.imul(ah5, bh5)) | 0;\n  lo = (lo + Math.imul(al4, bl6)) | 0;\n  mid = (mid + Math.imul(al4, bh6)) | 0;\n  mid = (mid + Math.imul(ah4, bl6)) | 0;\n  hi = (hi + Math.imul(ah4, bh6)) | 0;\n  lo = (lo + Math.imul(al3, bl7)) | 0;\n  mid = (mid + Math.imul(al3, bh7)) | 0;\n  mid = (mid + Math.imul(ah3, bl7)) | 0;\n  hi = (hi + Math.imul(ah3, bh7)) | 0;\n  lo = (lo + Math.imul(al2, bl8)) | 0;\n  mid = (mid + Math.imul(al2, bh8)) | 0;\n  mid = (mid + Math.imul(ah2, bl8)) | 0;\n  hi = (hi + Math.imul(ah2, bh8)) | 0;\n  lo = (lo + Math.imul(al1, bl9)) | 0;\n  mid = (mid + Math.imul(al1, bh9)) | 0;\n  mid = (mid + Math.imul(ah1, bl9)) | 0;\n  hi = (hi + Math.imul(ah1, bh9)) | 0;\n\n  let w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n  w10 &= 0x3ffffff;\n\n  /* k = 11 */\n  lo = Math.imul(al9, bl2);\n  mid = Math.imul(al9, bh2);\n  mid = (mid + Math.imul(ah9, bl2)) | 0;\n  hi = Math.imul(ah9, bh2);\n  lo = (lo + Math.imul(al8, bl3)) | 0;\n  mid = (mid + Math.imul(al8, bh3)) | 0;\n  mid = (mid + Math.imul(ah8, bl3)) | 0;\n  hi = (hi + Math.imul(ah8, bh3)) | 0;\n  lo = (lo + Math.imul(al7, bl4)) | 0;\n  mid = (mid + Math.imul(al7, bh4)) | 0;\n  mid = (mid + Math.imul(ah7, bl4)) | 0;\n  hi = (hi + Math.imul(ah7, bh4)) | 0;\n  lo = (lo + Math.imul(al6, bl5)) | 0;\n  mid = (mid + Math.imul(al6, bh5)) | 0;\n  mid = (mid + Math.imul(ah6, bl5)) | 0;\n  hi = (hi + Math.imul(ah6, bh5)) | 0;\n  lo = (lo + Math.imul(al5, bl6)) | 0;\n  mid = (mid + Math.imul(al5, bh6)) | 0;\n  mid = (mid + Math.imul(ah5, bl6)) | 0;\n  hi = (hi + Math.imul(ah5, bh6)) | 0;\n  lo = (lo + Math.imul(al4, bl7)) | 0;\n  mid = (mid + Math.imul(al4, bh7)) | 0;\n  mid = (mid + Math.imul(ah4, bl7)) | 0;\n  hi = (hi + Math.imul(ah4, bh7)) | 0;\n  lo = (lo + Math.imul(al3, bl8)) | 0;\n  mid = (mid + Math.imul(al3, bh8)) | 0;\n  mid = (mid + Math.imul(ah3, bl8)) | 0;\n  hi = (hi + Math.imul(ah3, bh8)) | 0;\n  lo = (lo + Math.imul(al2, bl9)) | 0;\n  mid = (mid + Math.imul(al2, bh9)) | 0;\n  mid = (mid + Math.imul(ah2, bl9)) | 0;\n  hi = (hi + Math.imul(ah2, bh9)) | 0;\n\n  let w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n  w11 &= 0x3ffffff;\n\n  /* k = 12 */\n  lo = Math.imul(al9, bl3);\n  mid = Math.imul(al9, bh3);\n  mid = (mid + Math.imul(ah9, bl3)) | 0;\n  hi = Math.imul(ah9, bh3);\n  lo = (lo + Math.imul(al8, bl4)) | 0;\n  mid = (mid + Math.imul(al8, bh4)) | 0;\n  mid = (mid + Math.imul(ah8, bl4)) | 0;\n  hi = (hi + Math.imul(ah8, bh4)) | 0;\n  lo = (lo + Math.imul(al7, bl5)) | 0;\n  mid = (mid + Math.imul(al7, bh5)) | 0;\n  mid = (mid + Math.imul(ah7, bl5)) | 0;\n  hi = (hi + Math.imul(ah7, bh5)) | 0;\n  lo = (lo + Math.imul(al6, bl6)) | 0;\n  mid = (mid + Math.imul(al6, bh6)) | 0;\n  mid = (mid + Math.imul(ah6, bl6)) | 0;\n  hi = (hi + Math.imul(ah6, bh6)) | 0;\n  lo = (lo + Math.imul(al5, bl7)) | 0;\n  mid = (mid + Math.imul(al5, bh7)) | 0;\n  mid = (mid + Math.imul(ah5, bl7)) | 0;\n  hi = (hi + Math.imul(ah5, bh7)) | 0;\n  lo = (lo + Math.imul(al4, bl8)) | 0;\n  mid = (mid + Math.imul(al4, bh8)) | 0;\n  mid = (mid + Math.imul(ah4, bl8)) | 0;\n  hi = (hi + Math.imul(ah4, bh8)) | 0;\n  lo = (lo + Math.imul(al3, bl9)) | 0;\n  mid = (mid + Math.imul(al3, bh9)) | 0;\n  mid = (mid + Math.imul(ah3, bl9)) | 0;\n  hi = (hi + Math.imul(ah3, bh9)) | 0;\n\n  let w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n  w12 &= 0x3ffffff;\n\n  /* k = 13 */\n  lo = Math.imul(al9, bl4);\n  mid = Math.imul(al9, bh4);\n  mid = (mid + Math.imul(ah9, bl4)) | 0;\n  hi = Math.imul(ah9, bh4);\n  lo = (lo + Math.imul(al8, bl5)) | 0;\n  mid = (mid + Math.imul(al8, bh5)) | 0;\n  mid = (mid + Math.imul(ah8, bl5)) | 0;\n  hi = (hi + Math.imul(ah8, bh5)) | 0;\n  lo = (lo + Math.imul(al7, bl6)) | 0;\n  mid = (mid + Math.imul(al7, bh6)) | 0;\n  mid = (mid + Math.imul(ah7, bl6)) | 0;\n  hi = (hi + Math.imul(ah7, bh6)) | 0;\n  lo = (lo + Math.imul(al6, bl7)) | 0;\n  mid = (mid + Math.imul(al6, bh7)) | 0;\n  mid = (mid + Math.imul(ah6, bl7)) | 0;\n  hi = (hi + Math.imul(ah6, bh7)) | 0;\n  lo = (lo + Math.imul(al5, bl8)) | 0;\n  mid = (mid + Math.imul(al5, bh8)) | 0;\n  mid = (mid + Math.imul(ah5, bl8)) | 0;\n  hi = (hi + Math.imul(ah5, bh8)) | 0;\n  lo = (lo + Math.imul(al4, bl9)) | 0;\n  mid = (mid + Math.imul(al4, bh9)) | 0;\n  mid = (mid + Math.imul(ah4, bl9)) | 0;\n  hi = (hi + Math.imul(ah4, bh9)) | 0;\n\n  let w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n  w13 &= 0x3ffffff;\n\n  /* k = 14 */\n  lo = Math.imul(al9, bl5);\n  mid = Math.imul(al9, bh5);\n  mid = (mid + Math.imul(ah9, bl5)) | 0;\n  hi = Math.imul(ah9, bh5);\n  lo = (lo + Math.imul(al8, bl6)) | 0;\n  mid = (mid + Math.imul(al8, bh6)) | 0;\n  mid = (mid + Math.imul(ah8, bl6)) | 0;\n  hi = (hi + Math.imul(ah8, bh6)) | 0;\n  lo = (lo + Math.imul(al7, bl7)) | 0;\n  mid = (mid + Math.imul(al7, bh7)) | 0;\n  mid = (mid + Math.imul(ah7, bl7)) | 0;\n  hi = (hi + Math.imul(ah7, bh7)) | 0;\n  lo = (lo + Math.imul(al6, bl8)) | 0;\n  mid = (mid + Math.imul(al6, bh8)) | 0;\n  mid = (mid + Math.imul(ah6, bl8)) | 0;\n  hi = (hi + Math.imul(ah6, bh8)) | 0;\n  lo = (lo + Math.imul(al5, bl9)) | 0;\n  mid = (mid + Math.imul(al5, bh9)) | 0;\n  mid = (mid + Math.imul(ah5, bl9)) | 0;\n  hi = (hi + Math.imul(ah5, bh9)) | 0;\n\n  let w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n  w14 &= 0x3ffffff;\n\n  /* k = 15 */\n  lo = Math.imul(al9, bl6);\n  mid = Math.imul(al9, bh6);\n  mid = (mid + Math.imul(ah9, bl6)) | 0;\n  hi = Math.imul(ah9, bh6);\n  lo = (lo + Math.imul(al8, bl7)) | 0;\n  mid = (mid + Math.imul(al8, bh7)) | 0;\n  mid = (mid + Math.imul(ah8, bl7)) | 0;\n  hi = (hi + Math.imul(ah8, bh7)) | 0;\n  lo = (lo + Math.imul(al7, bl8)) | 0;\n  mid = (mid + Math.imul(al7, bh8)) | 0;\n  mid = (mid + Math.imul(ah7, bl8)) | 0;\n  hi = (hi + Math.imul(ah7, bh8)) | 0;\n  lo = (lo + Math.imul(al6, bl9)) | 0;\n  mid = (mid + Math.imul(al6, bh9)) | 0;\n  mid = (mid + Math.imul(ah6, bl9)) | 0;\n  hi = (hi + Math.imul(ah6, bh9)) | 0;\n\n  let w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n  w15 &= 0x3ffffff;\n\n  /* k = 16 */\n  lo = Math.imul(al9, bl7);\n  mid = Math.imul(al9, bh7);\n  mid = (mid + Math.imul(ah9, bl7)) | 0;\n  hi = Math.imul(ah9, bh7);\n  lo = (lo + Math.imul(al8, bl8)) | 0;\n  mid = (mid + Math.imul(al8, bh8)) | 0;\n  mid = (mid + Math.imul(ah8, bl8)) | 0;\n  hi = (hi + Math.imul(ah8, bh8)) | 0;\n  lo = (lo + Math.imul(al7, bl9)) | 0;\n  mid = (mid + Math.imul(al7, bh9)) | 0;\n  mid = (mid + Math.imul(ah7, bl9)) | 0;\n  hi = (hi + Math.imul(ah7, bh9)) | 0;\n\n  let w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n  w16 &= 0x3ffffff;\n\n  /* k = 17 */\n  lo = Math.imul(al9, bl8);\n  mid = Math.imul(al9, bh8);\n  mid = (mid + Math.imul(ah9, bl8)) | 0;\n  hi = Math.imul(ah9, bh8);\n  lo = (lo + Math.imul(al8, bl9)) | 0;\n  mid = (mid + Math.imul(al8, bh9)) | 0;\n  mid = (mid + Math.imul(ah8, bl9)) | 0;\n  hi = (hi + Math.imul(ah8, bh9)) | 0;\n\n  let w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n  w17 &= 0x3ffffff;\n\n  /* k = 18 */\n  lo = Math.imul(al9, bl9);\n  mid = Math.imul(al9, bh9);\n  mid = (mid + Math.imul(ah9, bl9)) | 0;\n  hi = Math.imul(ah9, bh9);\n\n  let w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n  c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n  w18 &= 0x3ffffff;\n\n  o[0] = w0;\n  o[1] = w1;\n  o[2] = w2;\n  o[3] = w3;\n  o[4] = w4;\n  o[5] = w5;\n  o[6] = w6;\n  o[7] = w7;\n  o[8] = w8;\n  o[9] = w9;\n  o[10] = w10;\n  o[11] = w11;\n  o[12] = w12;\n  o[13] = w13;\n  o[14] = w14;\n  o[15] = w15;\n  o[16] = w16;\n  o[17] = w17;\n  o[18] = w18;\n\n  if (c !== 0) {\n    o[19] = c;\n    out.length += 1;\n  }\n\n  // Note: we shouldn't need to strip here.\n  return out;\n}\n\n// Polyfill comb.\nif (!Math.imul)\n  comb10MulTo = smallMulTo;\n\n/*\n * Expose\n */\n\nBN.Red = Red;\n\nmodule.exports = BN;\n","/*!\n * chacha20.js - chacha20 for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources\n *   https://en.wikipedia.org/wiki/Chacha20\n *   https://tools.ietf.org/html/rfc7539#section-2\n *   https://cr.yp.to/chacha.html\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\n\n/*\n * Constants\n */\n\nconst BIG_ENDIAN = new Int8Array(new Int16Array([1]).buffer)[0] === 0;\n\n/**\n * ChaCha20\n */\n\nclass ChaCha20 {\n  /**\n   * Create a ChaCha20 context.\n   * @constructor\n   */\n\n  constructor() {\n    this.state = new Uint32Array(16);\n    this.stream = new Uint32Array(16);\n    this.bytes = new Uint8Array(this.stream.buffer);\n    this.pos = -1;\n\n    if (BIG_ENDIAN)\n      this.bytes = Buffer.alloc(64);\n  }\n\n  /**\n   * Initialize chacha20 with a key, nonce, and counter.\n   * @param {Buffer} key\n   * @param {Buffer} nonce\n   * @param {Number} counter\n   */\n\n  init(key, nonce, counter) {\n    if (counter == null)\n      counter = 0;\n\n    assert(Buffer.isBuffer(key));\n    assert(Buffer.isBuffer(nonce));\n    assert(Number.isSafeInteger(counter));\n\n    if (key.length !== 16 && key.length !== 32)\n      throw new RangeError('Invalid key size.');\n\n    if (nonce.length >= 24) {\n      key = ChaCha20.derive(key, nonce.slice(0, 16));\n      nonce = nonce.slice(16);\n    }\n\n    this.state[0] = 0x61707865;\n    this.state[1] = key.length < 32 ? 0x3120646e : 0x3320646e;\n    this.state[2] = key.length < 32 ? 0x79622d36 : 0x79622d32;\n    this.state[3] = 0x6b206574;\n    this.state[4] = readU32(key, 0);\n    this.state[5] = readU32(key, 4);\n    this.state[6] = readU32(key, 8);\n    this.state[7] = readU32(key, 12);\n    this.state[8] = readU32(key, 16 % key.length);\n    this.state[9] = readU32(key, 20 % key.length);\n    this.state[10] = readU32(key, 24 % key.length);\n    this.state[11] = readU32(key, 28 % key.length);\n    this.state[12] = counter >>> 0;\n\n    if (nonce.length === 8) {\n      this.state[13] = (counter / 0x100000000) >>> 0;\n      this.state[14] = readU32(nonce, 0);\n      this.state[15] = readU32(nonce, 4);\n    } else if (nonce.length === 12) {\n      this.state[13] = readU32(nonce, 0);\n      this.state[14] = readU32(nonce, 4);\n      this.state[15] = readU32(nonce, 8);\n    } else if (nonce.length === 16) {\n      this.state[12] = readU32(nonce, 0);\n      this.state[13] = readU32(nonce, 4);\n      this.state[14] = readU32(nonce, 8);\n      this.state[15] = readU32(nonce, 12);\n    } else {\n      throw new RangeError('Invalid nonce size.');\n    }\n\n    this.pos = 0;\n\n    return this;\n  }\n\n  /**\n   * Encrypt/decrypt data.\n   * @param {Buffer} data - Will be mutated.\n   * @returns {Buffer}\n   */\n\n  encrypt(data) {\n    assert(Buffer.isBuffer(data));\n\n    if (this.pos === -1)\n      throw new Error('Context is not initialized.');\n\n    for (let i = 0; i < data.length; i++) {\n      if ((this.pos & 63) === 0) {\n        this._block();\n        this.pos = 0;\n      }\n\n      data[i] ^= this.bytes[this.pos++];\n    }\n\n    return data;\n  }\n\n  /**\n   * Stir the stream.\n   */\n\n  _block() {\n    for (let i = 0; i < 16; i++)\n      this.stream[i] = this.state[i];\n\n    for (let i = 0; i < 10; i++) {\n      qround(this.stream, 0, 4, 8, 12);\n      qround(this.stream, 1, 5, 9, 13);\n      qround(this.stream, 2, 6, 10, 14);\n      qround(this.stream, 3, 7, 11, 15);\n      qround(this.stream, 0, 5, 10, 15);\n      qround(this.stream, 1, 6, 11, 12);\n      qround(this.stream, 2, 7, 8, 13);\n      qround(this.stream, 3, 4, 9, 14);\n    }\n\n    for (let i = 0; i < 16; i++)\n      this.stream[i] += this.state[i];\n\n    if (BIG_ENDIAN) {\n      for (let i = 0; i < 16; i++)\n        writeU32(this.bytes, this.stream[i], i * 4);\n    }\n\n    this.state[12] += 1;\n\n    if (this.state[12] === 0)\n      this.state[13] += 1;\n  }\n\n  /**\n   * Destroy context.\n   */\n\n  destroy() {\n    for (let i = 0; i < 16; i++) {\n      this.state[i] = 0;\n      this.stream[i] = 0;\n    }\n\n    if (BIG_ENDIAN) {\n      for (let i = 0; i < 64; i++)\n        this.bytes[i] = 0;\n    }\n\n    this.pos = -1;\n\n    return this;\n  }\n\n  /**\n   * Derive key with XChaCha20.\n   * @param {Buffer} key\n   * @param {Buffer} nonce\n   * @returns {Buffer}\n   */\n\n  static derive(key, nonce) {\n    assert(Buffer.isBuffer(key));\n    assert(Buffer.isBuffer(nonce));\n\n    if (key.length !== 16 && key.length !== 32)\n      throw new RangeError('Invalid key size.');\n\n    if (nonce.length !== 16)\n      throw new RangeError('Invalid nonce size.');\n\n    const state = new Uint32Array(16);\n\n    state[0] = 0x61707865;\n    state[1] = key.length < 32 ? 0x3120646e : 0x3320646e;\n    state[2] = key.length < 32 ? 0x79622d36 : 0x79622d32;\n    state[3] = 0x6b206574;\n    state[4] = readU32(key, 0);\n    state[5] = readU32(key, 4);\n    state[6] = readU32(key, 8);\n    state[7] = readU32(key, 12);\n    state[8] = readU32(key, 16 % key.length);\n    state[9] = readU32(key, 20 % key.length);\n    state[10] = readU32(key, 24 % key.length);\n    state[11] = readU32(key, 28 % key.length);\n    state[12] = readU32(nonce, 0);\n    state[13] = readU32(nonce, 4);\n    state[14] = readU32(nonce, 8);\n    state[15] = readU32(nonce, 12);\n\n    for (let i = 0; i < 10; i++) {\n      qround(state, 0, 4, 8, 12);\n      qround(state, 1, 5, 9, 13);\n      qround(state, 2, 6, 10, 14);\n      qround(state, 3, 7, 11, 15);\n      qround(state, 0, 5, 10, 15);\n      qround(state, 1, 6, 11, 12);\n      qround(state, 2, 7, 8, 13);\n      qround(state, 3, 4, 9, 14);\n    }\n\n    const out = Buffer.alloc(32);\n\n    writeU32(out, state[0], 0);\n    writeU32(out, state[1], 4);\n    writeU32(out, state[2], 8);\n    writeU32(out, state[3], 12);\n    writeU32(out, state[12], 16);\n    writeU32(out, state[13], 20);\n    writeU32(out, state[14], 24);\n    writeU32(out, state[15], 28);\n\n    return out;\n  }\n}\n\n/*\n * Static\n */\n\nChaCha20.native = 0;\n\n/*\n * Helpers\n */\n\nfunction qround(x, a, b, c, d) {\n  x[a] += x[b];\n  x[d] = rotl32(x[d] ^ x[a], 16);\n\n  x[c] += x[d];\n  x[b] = rotl32(x[b] ^ x[c], 12);\n\n  x[a] += x[b];\n  x[d] = rotl32(x[d] ^ x[a], 8);\n\n  x[c] += x[d];\n  x[b] = rotl32(x[b] ^ x[c], 7);\n}\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\n\nfunction readU32(data, off) {\n  return (data[off++]\n        + data[off++] * 0x100\n        + data[off++] * 0x10000\n        + data[off] * 0x1000000);\n}\n\nfunction writeU32(dst, num, off) {\n  dst[off++] = num;\n  num >>>= 8;\n  dst[off++] = num;\n  num >>>= 8;\n  dst[off++] = num;\n  num >>>= 8;\n  dst[off++] = num;\n  return off;\n}\n\n/*\n * Expose\n */\n\nmodule.exports = ChaCha20;\n","/*!\n * keccak.js - Keccak/SHA3 implementation for bcrypto\n * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on emn178/js-sha3:\n *   Copyright (c) 2015-2017, Chen, Yi-Cyuan (MIT License).\n *   https://github.com/emn178/js-sha3\n *\n * Parts of this software are based on rhash/RHash:\n *   Copyright (c) 2005-2014, Aleksey Kravchenko\n *   https://github.com/rhash/RHash\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/SHA-3\n *   https://keccak.team/specifications.html\n *   https://csrc.nist.gov/projects/hash-functions/sha-3-project/sha-3-standardization\n *   http://dx.doi.org/10.6028/NIST.FIPS.202\n *   https://github.com/rhash/RHash/blob/master/librhash/sha3.c\n *   https://github.com/emn178/js-sha3/blob/master/src/sha3.js\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\nconst HMAC = require('../internal/hmac');\n\n/*\n * Constants\n */\n\nconst FINALIZED = 0x80000000;\n\nconst ROUND_CONST = new Uint32Array([\n  0x00000001, 0x00000000, 0x00008082, 0x00000000,\n  0x0000808a, 0x80000000, 0x80008000, 0x80000000,\n  0x0000808b, 0x00000000, 0x80000001, 0x00000000,\n  0x80008081, 0x80000000, 0x00008009, 0x80000000,\n  0x0000008a, 0x00000000, 0x00000088, 0x00000000,\n  0x80008009, 0x00000000, 0x8000000a, 0x00000000,\n  0x8000808b, 0x00000000, 0x0000008b, 0x80000000,\n  0x00008089, 0x80000000, 0x00008003, 0x80000000,\n  0x00008002, 0x80000000, 0x00000080, 0x80000000,\n  0x0000800a, 0x00000000, 0x8000000a, 0x80000000,\n  0x80008081, 0x80000000, 0x00008080, 0x80000000,\n  0x80000001, 0x00000000, 0x80008008, 0x80000000\n]);\n\n/**\n * Keccak\n */\n\nclass Keccak {\n  constructor() {\n    this.state = new Uint32Array(50);\n    this.block = Buffer.alloc(200);\n    this.bs = 136;\n    this.pos = FINALIZED;\n  }\n\n  init(bits) {\n    if (bits == null)\n      bits = 256;\n\n    assert((bits >>> 0) === bits);\n    assert(bits >= 128);\n    assert(bits <= 512);\n\n    const rate = 1600 - bits * 2;\n\n    assert(rate >= 0 && (rate & 63) === 0);\n\n    this.bs = rate >>> 3;\n    this.pos = 0;\n\n    return this;\n  }\n\n  update(data) {\n    assert(Buffer.isBuffer(data));\n    assert(!(this.pos & FINALIZED), 'Context is not initialized.');\n\n    let len = data.length;\n    let pos = this.pos;\n    let off = 0;\n\n    this.pos = (this.pos + len) % this.bs;\n\n    if (pos > 0) {\n      let want = this.bs - pos;\n\n      if (want > len)\n        want = len;\n\n      data.copy(this.block, pos, off, off + want);\n\n      pos += want;\n      len -= want;\n      off += want;\n\n      if (pos < this.bs)\n        return this;\n\n      this._transform(this.block, 0);\n    }\n\n    while (len >= this.bs) {\n      this._transform(data, off);\n      off += this.bs;\n      len -= this.bs;\n    }\n\n    if (len > 0)\n      data.copy(this.block, 0, off, off + len);\n\n    return this;\n  }\n\n  final(pad, len) {\n    if (pad == null)\n      pad = 0x01;\n\n    if (len == null || len === 0)\n      len = 100 - (this.bs >>> 1);\n\n    assert((pad & 0xff) === pad);\n    assert((len >>> 0) === len);\n    assert(!(this.pos & FINALIZED), 'Context is not initialized.');\n\n    this.block.fill(0, this.pos, this.bs);\n    this.block[this.pos] |= pad;\n    this.block[this.bs - 1] |= 0x80;\n    this._transform(this.block, 0);\n    this.pos = FINALIZED;\n\n    assert(len <= this.bs);\n\n    const out = Buffer.alloc(len);\n\n    for (let i = 0; i < len; i++)\n      out[i] = this.state[i >>> 2] >>> (8 * (i & 3));\n\n    for (let i = 0; i < 50; i++)\n      this.state[i] = 0;\n\n    for (let i = 0; i < this.bs; i++)\n      this.block[i] = 0;\n\n    return out;\n  }\n\n  _transform(block, off) {\n    const count = this.bs >>> 2;\n    const s = this.state;\n\n    for (let i = 0; i < count; i++)\n      s[i] ^= readU32(block, off + i * 4);\n\n    for (let n = 0; n < 48; n += 2) {\n      const c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n      const c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n      const c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n      const c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n      const c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n      const c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n      const c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n      const c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n      const c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n      const c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n      const h0 = c8 ^ ((c2 << 1) | (c3 >>> 31));\n      const l0 = c9 ^ ((c3 << 1) | (c2 >>> 31));\n      const h1 = c0 ^ ((c4 << 1) | (c5 >>> 31));\n      const l1 = c1 ^ ((c5 << 1) | (c4 >>> 31));\n      const h2 = c2 ^ ((c6 << 1) | (c7 >>> 31));\n      const l2 = c3 ^ ((c7 << 1) | (c6 >>> 31));\n      const h3 = c4 ^ ((c8 << 1) | (c9 >>> 31));\n      const l3 = c5 ^ ((c9 << 1) | (c8 >>> 31));\n      const h4 = c6 ^ ((c0 << 1) | (c1 >>> 31));\n      const l4 = c7 ^ ((c1 << 1) | (c0 >>> 31));\n\n      s[0] ^= h0;\n      s[1] ^= l0;\n      s[10] ^= h0;\n      s[11] ^= l0;\n      s[20] ^= h0;\n      s[21] ^= l0;\n      s[30] ^= h0;\n      s[31] ^= l0;\n      s[40] ^= h0;\n      s[41] ^= l0;\n\n      s[2] ^= h1;\n      s[3] ^= l1;\n      s[12] ^= h1;\n      s[13] ^= l1;\n      s[22] ^= h1;\n      s[23] ^= l1;\n      s[32] ^= h1;\n      s[33] ^= l1;\n      s[42] ^= h1;\n      s[43] ^= l1;\n\n      s[4] ^= h2;\n      s[5] ^= l2;\n      s[14] ^= h2;\n      s[15] ^= l2;\n      s[24] ^= h2;\n      s[25] ^= l2;\n      s[34] ^= h2;\n      s[35] ^= l2;\n      s[44] ^= h2;\n      s[45] ^= l2;\n\n      s[6] ^= h3;\n      s[7] ^= l3;\n      s[16] ^= h3;\n      s[17] ^= l3;\n      s[26] ^= h3;\n      s[27] ^= l3;\n      s[36] ^= h3;\n      s[37] ^= l3;\n      s[46] ^= h3;\n      s[47] ^= l3;\n\n      s[8] ^= h4;\n      s[9] ^= l4;\n      s[18] ^= h4;\n      s[19] ^= l4;\n      s[28] ^= h4;\n      s[29] ^= l4;\n      s[38] ^= h4;\n      s[39] ^= l4;\n      s[48] ^= h4;\n      s[49] ^= l4;\n\n      const b0 = s[0];\n      const b1 = s[1];\n      const b32 = (s[11] << 4) | (s[10] >>> 28);\n      const b33 = (s[10] << 4) | (s[11] >>> 28);\n      const b14 = (s[20] << 3) | (s[21] >>> 29);\n      const b15 = (s[21] << 3) | (s[20] >>> 29);\n      const b46 = (s[31] << 9) | (s[30] >>> 23);\n      const b47 = (s[30] << 9) | (s[31] >>> 23);\n      const b28 = (s[40] << 18) | (s[41] >>> 14);\n      const b29 = (s[41] << 18) | (s[40] >>> 14);\n      const b20 = (s[2] << 1) | (s[3] >>> 31);\n      const b21 = (s[3] << 1) | (s[2] >>> 31);\n      const b2 = (s[13] << 12) | (s[12] >>> 20);\n      const b3 = (s[12] << 12) | (s[13] >>> 20);\n      const b34 = (s[22] << 10) | (s[23] >>> 22);\n      const b35 = (s[23] << 10) | (s[22] >>> 22);\n      const b16 = (s[33] << 13) | (s[32] >>> 19);\n      const b17 = (s[32] << 13) | (s[33] >>> 19);\n      const b48 = (s[42] << 2) | (s[43] >>> 30);\n      const b49 = (s[43] << 2) | (s[42] >>> 30);\n      const b40 = (s[5] << 30) | (s[4] >>> 2);\n      const b41 = (s[4] << 30) | (s[5] >>> 2);\n      const b22 = (s[14] << 6) | (s[15] >>> 26);\n      const b23 = (s[15] << 6) | (s[14] >>> 26);\n      const b4 = (s[25] << 11) | (s[24] >>> 21);\n      const b5 = (s[24] << 11) | (s[25] >>> 21);\n      const b36 = (s[34] << 15) | (s[35] >>> 17);\n      const b37 = (s[35] << 15) | (s[34] >>> 17);\n      const b18 = (s[45] << 29) | (s[44] >>> 3);\n      const b19 = (s[44] << 29) | (s[45] >>> 3);\n      const b10 = (s[6] << 28) | (s[7] >>> 4);\n      const b11 = (s[7] << 28) | (s[6] >>> 4);\n      const b42 = (s[17] << 23) | (s[16] >>> 9);\n      const b43 = (s[16] << 23) | (s[17] >>> 9);\n      const b24 = (s[26] << 25) | (s[27] >>> 7);\n      const b25 = (s[27] << 25) | (s[26] >>> 7);\n      const b6 = (s[36] << 21) | (s[37] >>> 11);\n      const b7 = (s[37] << 21) | (s[36] >>> 11);\n      const b38 = (s[47] << 24) | (s[46] >>> 8);\n      const b39 = (s[46] << 24) | (s[47] >>> 8);\n      const b30 = (s[8] << 27) | (s[9] >>> 5);\n      const b31 = (s[9] << 27) | (s[8] >>> 5);\n      const b12 = (s[18] << 20) | (s[19] >>> 12);\n      const b13 = (s[19] << 20) | (s[18] >>> 12);\n      const b44 = (s[29] << 7) | (s[28] >>> 25);\n      const b45 = (s[28] << 7) | (s[29] >>> 25);\n      const b26 = (s[38] << 8) | (s[39] >>> 24);\n      const b27 = (s[39] << 8) | (s[38] >>> 24);\n      const b8 = (s[48] << 14) | (s[49] >>> 18);\n      const b9 = (s[49] << 14) | (s[48] >>> 18);\n\n      s[0] = b0 ^ (~b2 & b4);\n      s[1] = b1 ^ (~b3 & b5);\n      s[10] = b10 ^ (~b12 & b14);\n      s[11] = b11 ^ (~b13 & b15);\n      s[20] = b20 ^ (~b22 & b24);\n      s[21] = b21 ^ (~b23 & b25);\n      s[30] = b30 ^ (~b32 & b34);\n      s[31] = b31 ^ (~b33 & b35);\n      s[40] = b40 ^ (~b42 & b44);\n      s[41] = b41 ^ (~b43 & b45);\n      s[2] = b2 ^ (~b4 & b6);\n      s[3] = b3 ^ (~b5 & b7);\n      s[12] = b12 ^ (~b14 & b16);\n      s[13] = b13 ^ (~b15 & b17);\n      s[22] = b22 ^ (~b24 & b26);\n      s[23] = b23 ^ (~b25 & b27);\n      s[32] = b32 ^ (~b34 & b36);\n      s[33] = b33 ^ (~b35 & b37);\n      s[42] = b42 ^ (~b44 & b46);\n      s[43] = b43 ^ (~b45 & b47);\n      s[4] = b4 ^ (~b6 & b8);\n      s[5] = b5 ^ (~b7 & b9);\n      s[14] = b14 ^ (~b16 & b18);\n      s[15] = b15 ^ (~b17 & b19);\n      s[24] = b24 ^ (~b26 & b28);\n      s[25] = b25 ^ (~b27 & b29);\n      s[34] = b34 ^ (~b36 & b38);\n      s[35] = b35 ^ (~b37 & b39);\n      s[44] = b44 ^ (~b46 & b48);\n      s[45] = b45 ^ (~b47 & b49);\n      s[6] = b6 ^ (~b8 & b0);\n      s[7] = b7 ^ (~b9 & b1);\n      s[16] = b16 ^ (~b18 & b10);\n      s[17] = b17 ^ (~b19 & b11);\n      s[26] = b26 ^ (~b28 & b20);\n      s[27] = b27 ^ (~b29 & b21);\n      s[36] = b36 ^ (~b38 & b30);\n      s[37] = b37 ^ (~b39 & b31);\n      s[46] = b46 ^ (~b48 & b40);\n      s[47] = b47 ^ (~b49 & b41);\n      s[8] = b8 ^ (~b0 & b2);\n      s[9] = b9 ^ (~b1 & b3);\n      s[18] = b18 ^ (~b10 & b12);\n      s[19] = b19 ^ (~b11 & b13);\n      s[28] = b28 ^ (~b20 & b22);\n      s[29] = b29 ^ (~b21 & b23);\n      s[38] = b38 ^ (~b30 & b32);\n      s[39] = b39 ^ (~b31 & b33);\n      s[48] = b48 ^ (~b40 & b42);\n      s[49] = b49 ^ (~b41 & b43);\n\n      s[0] ^= ROUND_CONST[n + 0];\n      s[1] ^= ROUND_CONST[n + 1];\n    }\n  }\n\n  static hash() {\n    return new Keccak();\n  }\n\n  static hmac(bits, pad, len) {\n    if (bits == null)\n      bits = 256;\n\n    assert((bits >>> 0) === bits);\n\n    const rate = 1600 - bits * 2;\n\n    assert(rate >= 0 && (rate & 63) === 0);\n\n    return new HMAC(Keccak, rate >>> 3, [bits], [pad, len]);\n  }\n\n  static digest(data, bits, pad, len) {\n    return Keccak.ctx.init(bits).update(data).final(pad, len);\n  }\n\n  static root(left, right, bits, pad, len) {\n    if (bits == null)\n      bits = 256;\n\n    if (len == null)\n      len = 0;\n\n    if (len === 0)\n      len = bits >>> 3;\n\n    assert((bits >>> 0) === bits);\n    assert((bits & 7) === 0);\n    assert((len >>> 0) === len);\n    assert(Buffer.isBuffer(left) && left.length === len);\n    assert(Buffer.isBuffer(right) && right.length === len);\n\n    return Keccak.ctx.init(bits).update(left).update(right).final(pad, len);\n  }\n\n  static multi(x, y, z, bits, pad, len) {\n    const {ctx} = Keccak;\n\n    ctx.init(bits);\n    ctx.update(x);\n    ctx.update(y);\n\n    if (z)\n      ctx.update(z);\n\n    return ctx.final(pad, len);\n  }\n\n  static mac(data, key, bits, pad, len) {\n    return Keccak.hmac(bits, pad, len).init(key).update(data).final();\n  }\n}\n\n/*\n * Static\n */\n\nKeccak.native = 0;\nKeccak.id = 'KECCAK256';\nKeccak.size = 32;\nKeccak.bits = 256;\nKeccak.blockSize = 136;\nKeccak.zero = Buffer.alloc(32, 0x00);\nKeccak.ctx = new Keccak();\n\n/*\n * Helpers\n */\n\nfunction readU32(data, off) {\n  return (data[off++]\n        + data[off++] * 0x100\n        + data[off++] * 0x10000\n        + data[off] * 0x1000000);\n}\n\n/*\n * Expose\n */\n\nmodule.exports = Keccak;\n","/*!\n * random.js - random number generator for bcrypto\n * Copyright (c) 2014-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://wiki.openssl.org/index.php/Random_Numbers\n *   https://csrc.nist.gov/projects/random-bit-generation/\n *   http://www.pcg-random.org/posts/bounded-rands.html\n *   https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\n\n/*\n * Constants\n */\n\nconst crypto = global.crypto || global.msCrypto;\nconst HAS_CRYPTO = crypto && typeof crypto.getRandomValues === 'function';\nconst randomValues = HAS_CRYPTO ? crypto.getRandomValues.bind(crypto) : null;\nconst pool = new Uint32Array(16);\nconst MAX_BYTES = 65536;\n\nlet poolPos = 0;\n\n/**\n * Generate pseudo-random bytes.\n * @param {Number} size\n * @returns {Buffer}\n */\n\nfunction randomBytes(size) {\n  assert((size >>> 0) === size);\n\n  const data = Buffer.alloc(size);\n\n  randomFillSync(data, 0, size);\n\n  return data;\n}\n\n/**\n * Generate pseudo-random bytes.\n * @param {Buffer} data\n * @param {Number} [off=0]\n * @param {Number} [size=data.length-off]\n * @returns {Buffer}\n */\n\nfunction randomFill(data, off, size) {\n  assert(Buffer.isBuffer(data));\n\n  if (off == null)\n    off = 0;\n\n  assert((off >>> 0) === off);\n\n  if (size == null)\n    size = data.length - off;\n\n  assert((size >>> 0) === size);\n  assert(off + size <= data.length);\n\n  randomFillSync(data, off, size);\n\n  return data;\n}\n\n/**\n * Generate a random uint32.\n * @returns {Number}\n */\n\nfunction randomInt() {\n  if ((poolPos & 15) === 0) {\n    getRandomValues(pool);\n    poolPos = 0;\n  }\n\n  return pool[poolPos++];\n}\n\n/**\n * Generate a random uint32 within a range.\n * @param {Number} min - Inclusive.\n * @param {Number} max - Exclusive.\n * @returns {Number}\n */\n\nfunction randomRange(min, max) {\n  assert((min >>> 0) === min);\n  assert((max >>> 0) === max);\n  assert(max >= min);\n\n  const space = max - min;\n\n  if (space === 0)\n    return min;\n\n  const top = -space >>> 0;\n\n  let x, r;\n\n  do {\n    x = randomInt();\n    r = x % space;\n  } while (x - r > top);\n\n  return r + min;\n}\n\n/*\n * Helpers\n */\n\nfunction getRandomValues(array) {\n  if (!HAS_CRYPTO)\n    throw new Error('Entropy source not available.');\n\n  return randomValues(array);\n}\n\nfunction randomFillSync(data, off, size) {\n  assert(Buffer.isBuffer(data));\n  assert(data.buffer instanceof ArrayBuffer);\n  assert((data.byteOffset >>> 0) === data.byteOffset);\n  assert((data.byteLength >>> 0) === data.byteLength);\n  assert((off >>> 0) === off);\n  assert((size >>> 0) === size);\n  assert(off + size <= data.byteLength);\n\n  if (size > 2 ** 31 - 1)\n    throw new RangeError('The value \"size\" is out of range.');\n\n  const offset = data.byteOffset + off;\n  const array = new Uint8Array(data.buffer, offset, size);\n\n  if (array.length > MAX_BYTES) {\n    for (let i = 0; i < array.length; i += MAX_BYTES) {\n      let j = i + MAX_BYTES;\n\n      if (j > array.length)\n        j = array.length;\n\n      getRandomValues(array.subarray(i, j));\n    }\n  } else {\n    if (array.length > 0)\n      getRandomValues(array);\n  }\n}\n\n/*\n * Expose\n */\n\nexports.native = 0;\nexports.randomBytes = randomBytes;\nexports.randomFill = randomFill;\nexports.randomInt = randomInt;\nexports.randomRange = randomRange;\n","/*!\n * schnorr.js - bip340 for bcrypto\n * Copyright (c) 2019-2020, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on bips/bip-0340:\n *   Copyright (c) 2018-2020, Pieter Wuille (2-clause BSD License).\n *   https://github.com/bitcoin/bips/blob/master/bip-0340/reference.py\n *\n * Parts of this software are based on bitcoin-core/secp256k1:\n *   Copyright (c) 2013, Pieter Wuille.\n *   https://github.com/bitcoin-core/secp256k1\n *\n * Resources:\n *   https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n *   https://github.com/bitcoin/bips/blob/master/bip-0340/reference.py\n *   https://github.com/bitcoin/bips/blob/master/bip-0340/test-vectors.csv\n *\n * References:\n *\n *   [BIP340] Schnorr Signatures for secp256k1\n *     Pieter Wuille, Jonas Nick, Tim Ruffing\n *     https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\nconst BatchRNG = require('./batch-rng');\nconst BN = require('../bn');\nconst rng = require('../random');\nconst SHA256 = require('../sha256');\nconst SHAKE256 = require('../shake256');\nconst elliptic = require('./elliptic');\nconst pre = require('./precomputed/secp256k1.json');\n\n/**\n * Schnorr\n */\n\nclass Schnorr {\n  constructor(name, hash, pre) {\n    assert(typeof name === 'string');\n    assert(hash);\n\n    this.id = name;\n    this.type = 'schnorr';\n    this.hash = hash;\n    this.native = 0;\n\n    this._pre = pre || null;\n    this._curve = null;\n    this._rng = null;\n    this._auxTag = null;\n    this._nonceTag = null;\n    this._challengeTag = null;\n  }\n\n  get curve() {\n    if (!this._curve) {\n      this._curve = elliptic.curve(this.id, this._pre);\n      this._curve.precompute(rng);\n      this._pre = null;\n    }\n\n    return this._curve;\n  }\n\n  get rng() {\n    if (!this._rng)\n      this._rng = new BatchRNG(this.curve);\n\n    return this._rng;\n  }\n\n  get size() {\n    return this.curve.fieldSize;\n  }\n\n  get bits() {\n    return this.curve.fieldBits;\n  }\n\n  hashInt(...items) {\n    // [BIP340] \"Specification\".\n    // eslint-disable-next-line\n    const h = new this.hash();\n\n    h.init();\n\n    for (const item of items)\n      h.update(item);\n\n    let hash = h.final(this.curve.scalarSize);\n\n    if (hash.length > this.curve.scalarSize)\n      hash = hash.slice(0, this.curve.scalarSize);\n\n    const num = BN.decode(hash, this.curve.endian);\n\n    num.iumaskn(this.curve.scalarBits);\n\n    return num.imod(this.curve.n);\n  }\n\n  hashAux(a, d) {\n    assert(Buffer.isBuffer(a));\n    assert(Buffer.isBuffer(d));\n    assert(a.length === this.curve.scalarSize);\n    assert(d.length === 32);\n\n    if (!this._auxTag)\n      this._auxTag = createTag(this.hash, 'BIP0340/aux');\n\n    // eslint-disable-next-line\n    const h = new this.hash();\n\n    h.init();\n    h.update(this._auxTag);\n    h.update(d);\n\n    const hash = h.final(this.curve.scalarSize);\n    const t = Buffer.alloc(this.curve.scalarSize);\n\n    for (let i = 0; i < this.curve.scalarSize; i++)\n      t[i] = a[i] ^ hash[i];\n\n    return t;\n  }\n\n  hashNonce(a, A, m, d) {\n    if (!this._nonceTag)\n      this._nonceTag = createTag(this.hash, 'BIP0340/nonce');\n\n    if (d == null)\n      return this.hashInt(this._nonceTag, a, A, m);\n\n    return this.hashInt(this._nonceTag, this.hashAux(a, d), A, m);\n  }\n\n  hashChallenge(R, A, m) {\n    if (!this._challengeTag)\n      this._challengeTag = createTag(this.hash, 'BIP0340/challenge');\n\n    return this.hashInt(this._challengeTag, R, A, m);\n  }\n\n  privateKeyGenerate() {\n    const a = this.curve.randomScalar(rng);\n    return this.curve.encodeScalar(a);\n  }\n\n  privateKeyVerify(key) {\n    assert(Buffer.isBuffer(key));\n\n    let a;\n    try {\n      a = this.curve.decodeScalar(key);\n    } catch (e) {\n      return false;\n    }\n\n    return !a.isZero() && a.cmp(this.curve.n) < 0;\n  }\n\n  privateKeyExport(key) {\n    const a = this.curve.decodeScalar(key);\n\n    if (a.isZero() || a.cmp(this.curve.n) >= 0)\n      throw new Error('Invalid private key.');\n\n    let A = this.curve.g.mul(a);\n\n    if (!A.isEven()) {\n      a.ineg().imod(this.curve.n);\n      A = A.neg();\n    }\n\n    return {\n      d: this.curve.encodeScalar(a),\n      x: this.curve.encodeField(A.x.fromRed()),\n      y: this.curve.encodeField(A.y.fromRed())\n    };\n  }\n\n  privateKeyImport(json) {\n    assert(json && typeof json === 'object');\n\n    const a = BN.decode(json.d, this.curve.endian);\n\n    if (a.isZero() || a.cmp(this.curve.n) >= 0)\n      throw new Error('Invalid private key.');\n\n    return this.curve.encodeScalar(a);\n  }\n\n  privateKeyTweakAdd(key, tweak) {\n    const t = this.curve.decodeScalar(tweak);\n\n    if (t.cmp(this.curve.n) >= 0)\n      throw new Error('Invalid scalar.');\n\n    const a = this.curve.decodeScalar(key);\n\n    if (a.isZero() || a.cmp(this.curve.n) >= 0)\n      throw new Error('Invalid private key.');\n\n    const A = this.curve.g.mul(a);\n\n    if (!A.isEven())\n      a.ineg().imod(this.curve.n);\n\n    const k = a.add(t).imod(this.curve.n);\n\n    if (k.isZero())\n      throw new Error('Invalid private key.');\n\n    return this.curve.encodeScalar(k);\n  }\n\n  privateKeyTweakMul(key, tweak) {\n    const t = this.curve.decodeScalar(tweak);\n\n    if (t.isZero() || t.cmp(this.curve.n) >= 0)\n      throw new Error('Invalid scalar.');\n\n    const a = this.curve.decodeScalar(key);\n\n    if (a.isZero() || a.cmp(this.curve.n) >= 0)\n      throw new Error('Invalid private key.');\n\n    const k = a.mul(t).imod(this.curve.n);\n\n    if (k.isZero())\n      throw new Error('Invalid private key.');\n\n    return this.curve.encodeScalar(k);\n  }\n\n  privateKeyInvert(key) {\n    const a = this.curve.decodeScalar(key);\n\n    if (a.isZero() || a.cmp(this.curve.n) >= 0)\n      throw new Error('Invalid private key.');\n\n    const k = a.invert(this.curve.n);\n\n    return this.curve.encodeScalar(k);\n  }\n\n  publicKeyCreate(key) {\n    // [BIP340] \"Public Key Generation\".\n    const a = this.curve.decodeScalar(key);\n\n    if (a.isZero() || a.cmp(this.curve.n) >= 0)\n      throw new Error('Invalid private key.');\n\n    const A = this.curve.g.mulBlind(a);\n\n    return A.encodeX();\n  }\n\n  publicKeyFromUniform(bytes) {\n    const u = this.curve.decodeUniform(bytes);\n    const A = this.curve.pointFromUniform(u);\n\n    return A.encodeX();\n  }\n\n  publicKeyToUniform(key, hint = rng.randomInt()) {\n    const A = this.curve.decodeEven(key);\n    const u = this.curve.pointToUniform(A, hint);\n\n    return this.curve.encodeUniform(u, hint >>> 8);\n  }\n\n  publicKeyFromHash(bytes) {\n    const A = this.curve.pointFromHash(bytes);\n    return A.encodeX();\n  }\n\n  publicKeyToHash(key) {\n    const A = this.curve.decodeEven(key);\n    return this.curve.pointToHash(A, 0, rng);\n  }\n\n  publicKeyVerify(key) {\n    assert(Buffer.isBuffer(key));\n\n    try {\n      this.curve.decodeEven(key);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  publicKeyExport(key) {\n    const {x, y} = this.curve.decodeEven(key);\n\n    return {\n      x: this.curve.encodeField(x.fromRed()),\n      y: this.curve.encodeField(y.fromRed())\n    };\n  }\n\n  publicKeyImport(json) {\n    assert(json && typeof json === 'object');\n\n    const x = BN.decode(json.x, this.curve.endian);\n\n    if (x.cmp(this.curve.p) >= 0)\n      throw new Error('Invalid point.');\n\n    if (json.y != null) {\n      const y = BN.decode(json.y, this.curve.endian);\n\n      if (y.cmp(this.curve.p) >= 0)\n        throw new Error('Invalid point.');\n\n      const A = this.curve.point(x, y);\n\n      if (!A.validate())\n        throw new Error('Invalid point.');\n\n      return A.encodeX();\n    }\n\n    const A = this.curve.pointFromX(x);\n\n    return A.encodeX();\n  }\n\n  publicKeyTweakAdd(key, tweak) {\n    const t = this.curve.decodeScalar(tweak);\n\n    if (t.cmp(this.curve.n) >= 0)\n      throw new Error('Invalid scalar.');\n\n    const A = this.curve.decodeEven(key);\n    const T = this.curve.g.jmul(t);\n    const P = T.add(A);\n\n    return P.encodeX();\n  }\n\n  publicKeyTweakMul(key, tweak) {\n    const t = this.curve.decodeScalar(tweak);\n\n    if (t.isZero() || t.cmp(this.curve.n) >= 0)\n      throw new Error('Invalid scalar.');\n\n    const A = this.curve.decodeEven(key);\n    const P = A.mul(t);\n\n    return P.encodeX();\n  }\n\n  publicKeyTweakSum(key, tweak) {\n    const t = this.curve.decodeScalar(tweak);\n\n    if (t.cmp(this.curve.n) >= 0)\n      throw new Error('Invalid scalar.');\n\n    const A = this.curve.decodeEven(key);\n    const T = this.curve.g.jmul(t);\n    const P = T.add(A);\n\n    return [P.encodeX(), P.isOdd()];\n  }\n\n  publicKeyTweakCheck(key, tweak, expect, negated) {\n    assert(Buffer.isBuffer(key));\n    assert(Buffer.isBuffer(tweak));\n    assert(Buffer.isBuffer(expect));\n    assert(typeof negated === 'boolean');\n\n    let point, sign;\n\n    try {\n      [point, sign] = this.publicKeyTweakSum(key, tweak);\n    } catch (e) {\n      return false;\n    }\n\n    return point.equals(expect) && sign === negated;\n  }\n\n  publicKeyCombine(keys) {\n    assert(Array.isArray(keys));\n\n    let P = this.curve.jpoint();\n\n    for (const key of keys) {\n      const A = this.curve.decodeEven(key);\n\n      P = P.add(A);\n    }\n\n    return P.encodeX();\n  }\n\n  sign(msg, key, aux = rng.randomBytes(32)) {\n    assert(Buffer.isBuffer(msg));\n\n    if (aux != null) {\n      assert(Buffer.isBuffer(aux));\n      assert(aux.length === 32);\n    }\n\n    return this._sign(msg, key, aux);\n  }\n\n  _sign(msg, key, aux) {\n    // Schnorr Signing.\n    //\n    // [BIP340] \"Default Signing\".\n    //\n    // Assumptions:\n    //\n    //   - Let `H` be a cryptographic hash function.\n    //   - Let `m` be a 32-byte array.\n    //   - Let `a` be a secret non-zero scalar.\n    //   - Let `d` be a 32-byte array.\n    //   - k != 0.\n    //\n    // Computation:\n    //\n    //   A = G * a\n    //   a = -a mod n, if y(A) is not even\n    //   x = x(A)\n    //   t = a xor H(\"BIP0340/aux\", d)\n    //   k = H(\"BIP0340/nonce\", t, x, m) mod n\n    //   R = G * k\n    //   k = -k mod n, if y(R) is not even\n    //   r = x(R)\n    //   e = H(\"BIP0340/challenge\", r, x, m) mod n\n    //   s = (k + e * a) mod n\n    //   S = (r, s)\n    //\n    // Note that `k` must remain secret,\n    // otherwise an attacker can compute:\n    //\n    //   a = (s - k) / e mod n\n    const {n} = this.curve;\n    const G = this.curve.g;\n    const a = this.curve.decodeScalar(key);\n\n    if (a.isZero() || a.cmp(n) >= 0)\n      throw new Error('Invalid private key.');\n\n    const A = G.mulBlind(a);\n\n    if (!A.isEven())\n      a.ineg().imod(n);\n\n    const araw = this.curve.encodeScalar(a);\n    const Araw = A.encodeX();\n    const k = this.hashNonce(araw, Araw, msg, aux);\n\n    if (k.isZero())\n      throw new Error('Signing failed (k\\' = 0).');\n\n    const R = G.mulBlind(k);\n\n    if (!R.isEven())\n      k.ineg().imod(n);\n\n    const Rraw = R.encodeX();\n    const e = this.hashChallenge(Rraw, Araw, msg);\n    const s = k.add(e.mul(a)).imod(n);\n\n    return Buffer.concat([Rraw, this.curve.encodeScalar(s)]);\n  }\n\n  verify(msg, sig, key) {\n    assert(Buffer.isBuffer(msg));\n    assert(Buffer.isBuffer(sig));\n    assert(Buffer.isBuffer(key));\n\n    if (sig.length !== this.curve.fieldSize + this.curve.scalarSize)\n      return false;\n\n    if (key.length !== this.curve.fieldSize)\n      return false;\n\n    try {\n      return this._verify(msg, sig, key);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  _verify(msg, sig, key) {\n    // Schnorr Verification.\n    //\n    // [BIP340] \"Verification\".\n    //\n    // Assumptions:\n    //\n    //   - Let `H` be a cryptographic hash function.\n    //   - Let `m` be a 32-byte array.\n    //   - Let `r` and `s` be signature elements.\n    //   - Let `x` be a field element.\n    //   - r^3 + a * r + b is square in F(p).\n    //   - x^3 + a * x + b is square in F(p).\n    //   - sqrt(r^3 + a * r + b) is even in F(p).\n    //   - sqrt(x^3 + a * x + b) is even in F(p).\n    //   - r < p, s < n, x < p.\n    //   - R != O.\n    //\n    // Computation:\n    //\n    //   R = (r, sqrt(r^3 + a * r + b))\n    //   A = (x, sqrt(x^3 + a * x + b))\n    //   e = H(\"BIP0340/challenge\", r, x, m) mod n\n    //   R == G * s - A * e\n    //\n    // We can skip a square root with:\n    //\n    //   A = (x, sqrt(x^3 + a * x + b))\n    //   e = H(\"BIP0340/challenge\", r, x, m) mod n\n    //   R = G * s - A * e\n    //   y(R) is even\n    //   x(R) == r\n    const {p, n} = this.curve;\n    const G = this.curve.g;\n    const Rraw = sig.slice(0, this.curve.fieldSize);\n    const sraw = sig.slice(this.curve.fieldSize);\n    const r = this.curve.decodeField(Rraw);\n    const s = this.curve.decodeScalar(sraw);\n    const A = this.curve.decodeEven(key);\n\n    if (r.cmp(p) >= 0 || s.cmp(n) >= 0)\n      return false;\n\n    const e = this.hashChallenge(Rraw, key, msg);\n    const R = G.mulAdd(s, A, e.ineg().imod(n));\n\n    if (!R.isEven())\n      return false;\n\n    if (!R.eqX(r))\n      return false;\n\n    return true;\n  }\n\n  verifyBatch(batch) {\n    assert(Array.isArray(batch));\n\n    for (const item of batch) {\n      assert(Array.isArray(item) && item.length === 3);\n\n      const [msg, sig, key] = item;\n\n      assert(Buffer.isBuffer(msg));\n      assert(Buffer.isBuffer(sig));\n      assert(Buffer.isBuffer(key));\n\n      if (sig.length !== this.curve.fieldSize + this.curve.scalarSize)\n        return false;\n\n      if (key.length !== this.curve.fieldSize)\n        return false;\n    }\n\n    try {\n      return this._verifyBatch(batch);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  _verifyBatch(batch) {\n    // Schnorr Batch Verification.\n    //\n    // [BIP340] \"Batch Verification\".\n    //\n    // Assumptions:\n    //\n    //   - Let `H` be a cryptographic hash function.\n    //   - Let `m` be a 32-byte array.\n    //   - Let `r` and `s` be signature elements.\n    //   - Let `x` be a field element.\n    //   - Let `i` be the batch item index.\n    //   - r^3 + a * r + b is square in F(p).\n    //   - x^3 + a * x + b is square in F(p).\n    //   - sqrt(r^3 + a * r + b) is even in F(p).\n    //   - sqrt(x^3 + a * x + b) is even in F(p).\n    //   - r < p, s < n, x < p.\n    //   - a1 = 1 mod n.\n    //\n    // Computation:\n    //\n    //   Ri = (ri, sqrt(ri^3 + a * ri + b))\n    //   Ai = (xi, sqrt(xi^3 + a * xi + b))\n    //   ei = H(\"BIP0340/challenge\", ri, xi, mi) mod n\n    //   ai = random integer in [1,n-1]\n    //   lhs = si * ai + ... mod n\n    //   rhs = Ri * ai + Ai * (ei * ai mod n) + ...\n    //   G * -lhs + rhs == O\n    const {n} = this.curve;\n    const G = this.curve.g;\n    const points = new Array(1 + batch.length * 2);\n    const coeffs = new Array(1 + batch.length * 2);\n    const sum = new BN(0);\n\n    this.rng.init(batch);\n\n    points[0] = G;\n    coeffs[0] = sum;\n\n    for (let i = 0; i < batch.length; i++) {\n      const [msg, sig, key] = batch[i];\n      const Rraw = sig.slice(0, this.curve.fieldSize);\n      const sraw = sig.slice(this.curve.fieldSize);\n      const R = this.curve.decodeEven(Rraw);\n      const s = this.curve.decodeScalar(sraw);\n      const A = this.curve.decodeEven(key);\n\n      if (s.cmp(n) >= 0)\n        return false;\n\n      const e = this.hashChallenge(Rraw, key, msg);\n      const a = this.rng.generate(i);\n      const ea = e.mul(a).imod(n);\n\n      sum.iadd(s.mul(a)).imod(n);\n\n      points[1 + i * 2 + 0] = R;\n      coeffs[1 + i * 2 + 0] = a;\n      points[1 + i * 2 + 1] = A;\n      coeffs[1 + i * 2 + 1] = ea;\n    }\n\n    sum.ineg().imod(n);\n\n    return this.curve.jmulAll(points, coeffs).isInfinity();\n  }\n\n  derive(pub, priv) {\n    const A = this.curve.decodeEven(pub);\n    const a = this.curve.decodeScalar(priv);\n\n    if (a.isZero() || a.cmp(this.curve.n) >= 0)\n      throw new Error('Invalid private key.');\n\n    const P = A.mulConst(a, rng);\n\n    return P.encodeX();\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction createTag(alg, tag) {\n  // [BIP340] \"Tagged Hashes\".\n  const raw = Buffer.from(tag, 'binary');\n\n  let hash;\n\n  if (alg.size !== alg.blockSize / 2)\n    hash = SHAKE256.digest(raw, alg.blockSize / 2);\n  else\n    hash = alg.digest(raw);\n\n  return Buffer.concat([hash, hash]);\n}\n\n/*\n * Expose\n */\n\nmodule.exports = new Schnorr('SECP256K1', SHA256, pre);\n","/*!\n * sha256.js - SHA256 implementation for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/hash.js:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/hash.js\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/SHA-2\n *   https://tools.ietf.org/html/rfc4634\n *   https://github.com/indutny/hash.js/blob/master/lib/hash/sha/256.js\n */\n\n'use strict';\n\nconst assert = require('../internal/assert');\nconst HMAC = require('../internal/hmac');\n\n/*\n * Constants\n */\n\nconst FINALIZED = -1;\nconst DESC = Buffer.alloc(8, 0x00);\nconst PADDING = Buffer.alloc(64, 0x00);\n\nPADDING[0] = 0x80;\n\nconst K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/**\n * SHA256\n */\n\nclass SHA256 {\n  constructor() {\n    this.state = new Uint32Array(8);\n    this.msg = new Uint32Array(64);\n    this.block = Buffer.alloc(64);\n    this.size = FINALIZED;\n  }\n\n  init() {\n    this.state[0] = 0x6a09e667;\n    this.state[1] = 0xbb67ae85;\n    this.state[2] = 0x3c6ef372;\n    this.state[3] = 0xa54ff53a;\n    this.state[4] = 0x510e527f;\n    this.state[5] = 0x9b05688c;\n    this.state[6] = 0x1f83d9ab;\n    this.state[7] = 0x5be0cd19;\n    this.size = 0;\n    return this;\n  }\n\n  update(data) {\n    assert(Buffer.isBuffer(data));\n    this._update(data, data.length);\n    return this;\n  }\n\n  final() {\n    return this._final(Buffer.alloc(32));\n  }\n\n  _update(data, len) {\n    assert(this.size !== FINALIZED, 'Context is not initialized.');\n\n    let pos = this.size & 63;\n    let off = 0;\n\n    this.size += len;\n\n    if (pos > 0) {\n      let want = 64 - pos;\n\n      if (want > len)\n        want = len;\n\n      data.copy(this.block, pos, off, off + want);\n\n      pos += want;\n      len -= want;\n      off += want;\n\n      if (pos < 64)\n        return;\n\n      this._transform(this.block, 0);\n    }\n\n    while (len >= 64) {\n      this._transform(data, off);\n      off += 64;\n      len -= 64;\n    }\n\n    if (len > 0)\n      data.copy(this.block, 0, off, off + len);\n  }\n\n  _final(out) {\n    assert(this.size !== FINALIZED, 'Context is not initialized.');\n\n    const pos = this.size & 63;\n    const len = this.size * 8;\n\n    writeU32(DESC, (len * (1 / 0x100000000)) >>> 0, 0);\n    writeU32(DESC, len >>> 0, 4);\n\n    this._update(PADDING, 1 + ((119 - pos) & 63));\n    this._update(DESC, 8);\n\n    for (let i = 0; i < 8; i++) {\n      writeU32(out, this.state[i], i * 4);\n      this.state[i] = 0;\n    }\n\n    for (let i = 0; i < 64; i++)\n      this.msg[i] = 0;\n\n    for (let i = 0; i < 64; i++)\n      this.block[i] = 0;\n\n    this.size = FINALIZED;\n\n    return out;\n  }\n\n  _transform(chunk, pos) {\n    const W = this.msg;\n\n    let a = this.state[0];\n    let b = this.state[1];\n    let c = this.state[2];\n    let d = this.state[3];\n    let e = this.state[4];\n    let f = this.state[5];\n    let g = this.state[6];\n    let h = this.state[7];\n    let i = 0;\n\n    for (; i < 16; i++)\n      W[i] = readU32(chunk, pos + i * 4);\n\n    for (; i < 64; i++)\n      W[i] = sigma1(W[i - 2]) + W[i - 7] + sigma0(W[i - 15]) + W[i - 16];\n\n    for (i = 0; i < 64; i++) {\n      const t1 = h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i];\n      const t2 = Sigma0(a) + Maj(a, b, c);\n\n      h = g;\n      g = f;\n      f = e;\n\n      e = (d + t1) >>> 0;\n\n      d = c;\n      c = b;\n      b = a;\n\n      a = (t1 + t2) >>> 0;\n    }\n\n    this.state[0] += a;\n    this.state[1] += b;\n    this.state[2] += c;\n    this.state[3] += d;\n    this.state[4] += e;\n    this.state[5] += f;\n    this.state[6] += g;\n    this.state[7] += h;\n  }\n\n  static hash() {\n    return new SHA256();\n  }\n\n  static hmac() {\n    return new HMAC(SHA256, 64);\n  }\n\n  static digest(data) {\n    return SHA256.ctx.init().update(data).final();\n  }\n\n  static root(left, right) {\n    assert(Buffer.isBuffer(left) && left.length === 32);\n    assert(Buffer.isBuffer(right) && right.length === 32);\n    return SHA256.ctx.init().update(left).update(right).final();\n  }\n\n  static multi(x, y, z) {\n    const {ctx} = SHA256;\n\n    ctx.init();\n    ctx.update(x);\n    ctx.update(y);\n\n    if (z)\n      ctx.update(z);\n\n    return ctx.final();\n  }\n\n  static mac(data, key) {\n    return SHA256.hmac().init(key).update(data).final();\n  }\n}\n\n/*\n * Static\n */\n\nSHA256.native = 0;\nSHA256.id = 'SHA256';\nSHA256.size = 32;\nSHA256.bits = 256;\nSHA256.blockSize = 64;\nSHA256.zero = Buffer.alloc(32, 0x00);\nSHA256.ctx = new SHA256();\n\n/*\n * Helpers\n */\n\nfunction Sigma0(x) {\n  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);\n}\n\nfunction Sigma1(x) {\n  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);\n}\n\nfunction sigma0(x) {\n  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3);\n}\n\nfunction sigma1(x) {\n  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10);\n}\n\nfunction Ch(x, y, z) {\n  return z ^ (x & (y ^ z));\n}\n\nfunction Maj(x, y, z) {\n  return (x & y) | (z & (x | y));\n}\n\nfunction readU32(data, off) {\n  return (data[off++] * 0x1000000\n        + data[off++] * 0x10000\n        + data[off++] * 0x100\n        + data[off]);\n}\n\nfunction writeU32(data, num, off) {\n  data[off++] = num >>> 24;\n  data[off++] = num >>> 16;\n  data[off++] = num >>> 8;\n  data[off++] = num;\n  return off;\n}\n\n/*\n * Expose\n */\n\nmodule.exports = SHA256;\n","/*!\n * keccak.js - keccak for bcrypto\n * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n\n'use strict';\n\nmodule.exports = require('./js/keccak');\n","/*!\n * random.js - random for bcrypto\n * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n\n'use strict';\n\nmodule.exports = require('./js/random');\n","/*!\n * schnorr.js - schnorr for bcrypto\n * Copyright (c) 2020, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n\n'use strict';\n\nmodule.exports = require('./js/schnorr');\n","/*!\n * sha256.js - sha256 for bcrypto\n * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n\n'use strict';\n\nmodule.exports = require('./js/sha256');\n","/*!\n * shake.js - SHAKE implementation for bcrypto\n * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/SHA-3\n *   https://keccak.team/specifications.html\n *   https://csrc.nist.gov/projects/hash-functions/sha-3-project/sha-3-standardization\n *   http://dx.doi.org/10.6028/NIST.FIPS.202\n */\n\n'use strict';\n\nconst Keccak = require('./keccak');\n\n/**\n * SHAKE\n */\n\nclass SHAKE extends Keccak {\n  /**\n   * Create a SHAKE Context.\n   * @constructor\n   */\n\n  constructor() {\n    super();\n  }\n\n  final(len) {\n    return super.final(0x1f, len);\n  }\n\n  static hash() {\n    return new SHAKE();\n  }\n\n  static hmac(bits, len) {\n    return super.hmac(bits, 0x1f, len);\n  }\n\n  static digest(data, bits, len) {\n    return super.digest(data, bits, 0x1f, len);\n  }\n\n  static root(left, right, bits, len) {\n    return super.root(left, right, bits, 0x1f, len);\n  }\n\n  static multi(x, y, z, bits, len) {\n    return super.multi(x, y, z, bits, 0x1f, len);\n  }\n\n  static mac(data, key, bits, len) {\n    return super.mac(data, key, bits, 0x1f, len);\n  }\n}\n\n/*\n * Static\n */\n\nSHAKE.native = Keccak.native;\nSHAKE.id = 'SHAKE256';\nSHAKE.size = 32;\nSHAKE.bits = 256;\nSHAKE.blockSize = 136;\nSHAKE.zero = Buffer.alloc(32, 0x00);\nSHAKE.ctx = new SHAKE();\n\n/*\n * Expose\n */\n\nmodule.exports = SHAKE;\n","/*!\n * shake256.js - SHAKE256 implementation for bcrypto\n * Copyright (c) 2017-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n\n'use strict';\n\nconst SHAKE = require('./shake');\n\n/**\n * SHAKE256\n */\n\nclass SHAKE256 extends SHAKE {\n  constructor() {\n    super();\n  }\n\n  init() {\n    return super.init(256);\n  }\n\n  static hash() {\n    return new SHAKE256();\n  }\n\n  static hmac(len) {\n    return super.hmac(256, len);\n  }\n\n  static digest(data, len) {\n    return super.digest(data, 256, len);\n  }\n\n  static root(left, right, len) {\n    return super.root(left, right, 256, len);\n  }\n\n  static multi(x, y, z, len) {\n    return super.multi(x, y, z, 256, len);\n  }\n\n  static mac(data, key, len) {\n    return super.mac(data, key, 256, len);\n  }\n}\n\n/*\n * Static\n */\n\nSHAKE256.native = SHAKE.native;\nSHAKE256.id = 'SHAKE256';\nSHAKE256.size = 32;\nSHAKE256.bits = 256;\nSHAKE256.blockSize = 136;\nSHAKE256.zero = Buffer.alloc(32, 0x00);\nSHAKE256.ctx = new SHAKE256();\n\n/*\n * Expose\n */\n\nmodule.exports = SHAKE256;\n","\"use client\";\n\n// packages/react/dialog/src/Dialog.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContext, createContextScope } from \"@radix-ui/react-context\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { FocusScope } from \"@radix-ui/react-focus-scope\";\nimport { Portal as PortalPrimitive } from \"@radix-ui/react-portal\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { useFocusGuards } from \"@radix-ui/react-focus-guards\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { hideOthers } from \"aria-hidden\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar DIALOG_NAME = \"Dialog\";\nvar [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\nvar [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);\nvar Dialog = (props) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true\n  } = props;\n  const triggerRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */ jsx(\n    DialogProvider,\n    {\n      scope: __scopeDialog,\n      triggerRef,\n      contentRef,\n      contentId: useId(),\n      titleId: useId(),\n      descriptionId: useId(),\n      open,\n      onOpenChange: setOpen,\n      onOpenToggle: React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),\n      modal,\n      children\n    }\n  );\n};\nDialog.displayName = DIALOG_NAME;\nvar TRIGGER_NAME = \"DialogTrigger\";\nvar DialogTrigger = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return /* @__PURE__ */ jsx(\n      Primitive.button,\n      {\n        type: \"button\",\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": context.open,\n        \"aria-controls\": context.contentId,\n        \"data-state\": getState(context.open),\n        ...triggerProps,\n        ref: composedTriggerRef,\n        onClick: composeEventHandlers(props.onClick, context.onOpenToggle)\n      }\n    );\n  }\n);\nDialogTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"DialogPortal\";\nvar [PortalProvider, usePortalContext] = createDialogContext(PORTAL_NAME, {\n  forceMount: void 0\n});\nvar DialogPortal = (props) => {\n  const { __scopeDialog, forceMount, children, container } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return /* @__PURE__ */ jsx(PortalProvider, { scope: __scopeDialog, forceMount, children: React.Children.map(children, (child) => /* @__PURE__ */ jsx(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ jsx(PortalPrimitive, { asChild: true, container, children: child }) })) });\n};\nDialogPortal.displayName = PORTAL_NAME;\nvar OVERLAY_NAME = \"DialogOverlay\";\nvar DialogOverlay = React.forwardRef(\n  (props, forwardedRef) => {\n    const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? /* @__PURE__ */ jsx(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ jsx(DialogOverlayImpl, { ...overlayProps, ref: forwardedRef }) }) : null;\n  }\n);\nDialogOverlay.displayName = OVERLAY_NAME;\nvar DialogOverlayImpl = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n      // ie. when `Overlay` and `Content` are siblings\n      /* @__PURE__ */ jsx(RemoveScroll, { as: Slot, allowPinchZoom: true, shards: [context.contentRef], children: /* @__PURE__ */ jsx(\n        Primitive.div,\n        {\n          \"data-state\": getState(context.open),\n          ...overlayProps,\n          ref: forwardedRef,\n          style: { pointerEvents: \"auto\", ...overlayProps.style }\n        }\n      ) })\n    );\n  }\n);\nvar CONTENT_NAME = \"DialogContent\";\nvar DialogContent = React.forwardRef(\n  (props, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return /* @__PURE__ */ jsx(Presence, { present: forceMount || context.open, children: context.modal ? /* @__PURE__ */ jsx(DialogContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ jsx(DialogContentNonModal, { ...contentProps, ref: forwardedRef }) });\n  }\n);\nDialogContent.displayName = CONTENT_NAME;\nvar DialogContentModal = React.forwardRef(\n  (props, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n    return /* @__PURE__ */ jsx(\n      DialogContentImpl,\n      {\n        ...props,\n        ref: composedRefs,\n        trapFocus: context.open,\n        disableOutsidePointerEvents: true,\n        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        }),\n        onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const originalEvent = event.detail.originalEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n          if (isRightClick) event.preventDefault();\n        }),\n        onFocusOutside: composeEventHandlers(\n          props.onFocusOutside,\n          (event) => event.preventDefault()\n        )\n      }\n    );\n  }\n);\nvar DialogContentNonModal = React.forwardRef(\n  (props, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n    const hasPointerDownOutsideRef = React.useRef(false);\n    return /* @__PURE__ */ jsx(\n      DialogContentImpl,\n      {\n        ...props,\n        ref: forwardedRef,\n        trapFocus: false,\n        disableOutsidePointerEvents: false,\n        onCloseAutoFocus: (event) => {\n          props.onCloseAutoFocus?.(event);\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            event.preventDefault();\n          }\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        },\n        onInteractOutside: (event) => {\n          props.onInteractOutside?.(event);\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === \"pointerdown\") {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n          const target = event.target;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n          if (event.detail.originalEvent.type === \"focusin\" && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }\n      }\n    );\n  }\n);\nvar DialogContentImpl = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    useFocusGuards();\n    return /* @__PURE__ */ jsxs(Fragment, { children: [\n      /* @__PURE__ */ jsx(\n        FocusScope,\n        {\n          asChild: true,\n          loop: true,\n          trapped: trapFocus,\n          onMountAutoFocus: onOpenAutoFocus,\n          onUnmountAutoFocus: onCloseAutoFocus,\n          children: /* @__PURE__ */ jsx(\n            DismissableLayer,\n            {\n              role: \"dialog\",\n              id: context.contentId,\n              \"aria-describedby\": context.descriptionId,\n              \"aria-labelledby\": context.titleId,\n              \"data-state\": getState(context.open),\n              ...contentProps,\n              ref: composedRefs,\n              onDismiss: () => context.onOpenChange(false)\n            }\n          )\n        }\n      ),\n      /* @__PURE__ */ jsxs(Fragment, { children: [\n        /* @__PURE__ */ jsx(TitleWarning, { titleId: context.titleId }),\n        /* @__PURE__ */ jsx(DescriptionWarning, { contentRef, descriptionId: context.descriptionId })\n      ] })\n    ] });\n  }\n);\nvar TITLE_NAME = \"DialogTitle\";\nvar DialogTitle = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return /* @__PURE__ */ jsx(Primitive.h2, { id: context.titleId, ...titleProps, ref: forwardedRef });\n  }\n);\nDialogTitle.displayName = TITLE_NAME;\nvar DESCRIPTION_NAME = \"DialogDescription\";\nvar DialogDescription = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return /* @__PURE__ */ jsx(Primitive.p, { id: context.descriptionId, ...descriptionProps, ref: forwardedRef });\n  }\n);\nDialogDescription.displayName = DESCRIPTION_NAME;\nvar CLOSE_NAME = \"DialogClose\";\nvar DialogClose = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return /* @__PURE__ */ jsx(\n      Primitive.button,\n      {\n        type: \"button\",\n        ...closeProps,\n        ref: forwardedRef,\n        onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))\n      }\n    );\n  }\n);\nDialogClose.displayName = CLOSE_NAME;\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\nvar TITLE_WARNING_NAME = \"DialogTitleWarning\";\nvar [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: \"dialog\"\n});\nvar TitleWarning = ({ titleId }) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) console.error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n  return null;\n};\nvar DESCRIPTION_WARNING_NAME = \"DialogDescriptionWarning\";\nvar DescriptionWarning = ({ contentRef, descriptionId }) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute(\"aria-describedby\");\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n  return null;\n};\nvar Root = Dialog;\nvar Trigger = DialogTrigger;\nvar Portal = DialogPortal;\nvar Overlay = DialogOverlay;\nvar Content = DialogContent;\nvar Title = DialogTitle;\nvar Description = DialogDescription;\nvar Close = DialogClose;\nexport {\n  Close,\n  Content,\n  Description,\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n  Overlay,\n  Portal,\n  Root,\n  Title,\n  Trigger,\n  WarningProvider,\n  createDialogScope\n};\n//# sourceMappingURL=index.mjs.map\n"],"names":["module","exports","__webpack_require__","assert","val","msg","err","Error","captureStackTrace","custom","constructor","Hash","size","x","y","Array","isArray","hash","inner","outer","init","key","Buffer","isBuffer","length","h","update","final","pad","alloc","i","data","BN","ChaCha20","SHA256","curve","encode","chacha","iv","cache","batch","sig","digest","encrypt","counter","scalarSize","left","slice","right","decodeScalar","refresh","overflow","s1","s2","isZero","cmp","n","generate","index","zeros","groupSizes","groupBases","primes","p192","p224","p521","k256","p251","p25519","p448","modes","NONE","QUO","REM","BOTH","EUCLID","ALL","HAS_BIGINT","BigInt","num","base","endian","words","negative","red","from","_iadd","a","b","carry","_alloc","r","_iaddn","Math","max","iadd","enforce","isBN","ucmp","_isub","iaddn","isSMI","_isubn","add","clone","addn","_strip","_normalize","isub","isubn","sub","subn","_mul","out","comb10MulTo","len","smallMulTo","bigMulTo","jumboMulTo","zero","mask","shift","z","toBigInt","neg","Number","imul","mul","_move","imuln","w","lo","muln","mulShift","bits","utestn","iushrn","_div","flags","nonzero","as","bs","q","quon","remn","_wordDiv","hi","word","countBits","iushln","m","d","_ishlnsubmul","j","ahi","alo","quo","qj","min","ineg","_expand","k","quorem","iquo","iquon","irem","rem","iremn","remrn","p","acc","divmod","idiv","div","idivn","divn","imod","mod","imodn","modrn","modn","divRound","bit","isOdd","ipow","pow","ipown","pown","sqr","isqr","_rootrem","v","ucmpn","u","t","bitLength","rootrem","iroot","root","isPower","sign","sqrtrem","isqrt","sqrt","isSquare","iand","iuand","iuor","width","inotn","iandn","and","andn","andrn","iuandn","abs","uand","uandn","uandrn","ior","iorn","or","orn","iuorn","uor","uorn","ixor","iuxor","ixorn","xor","xorn","iuxorn","uxor","uxorn","inot","not","s","ceil","notn","ishl","ishln","toNumber","shl","shln","iushl","ncarry","c","ushl","ushln","_split","output","ishr","ishrn","shr","shrn","iushr","ushr","ushrn","setn","usetn","testn","imaskn","iumaskn","maskn","umaskn","andln","pos","more","next","iabs","res","cmpn","eq","eqn","gt","gtn","gte","gten","lt","ltn","lte","lten","isNeg","isPos","isEven","legendre","mont","toRed","redLegendre","jacobi","_cloneNormal","_makeOdd","bmod8","kronecker","table","igcd","gcd","_factor2","ilcm","lcm","egcd","A","B","C","D","g","xp","yp","iinvert","invert","range","_invertp","ifermat","fermat","redFermat","fromRed","ipowm","powm","redPow","ipowmn","powmn","redPown","isqrtm","sqrtm","redSqrt","isqrtpq","sqrtpq","sp","sq","mp","mq","lhs","rhs","isPrime","rng","reps","limit","isPrimeMR","isPrimeLucas","force2","nm1","nm3","zeroBits","rnm1","rone","random","redSqr","toString","vk","vk1","toTwos","fromTwos","ctx","Red","convertTo","convertFrom","forceRed","_forceRed","redIAdd","redAdd","redIAddn","redAddn","redISub","redSub","redISubn","redSubn","redIMul","redMul","redIMuln","redMuln","redIDiv","redDiv","redIDivn","redDivn","redIPow","nonred","redIPown","redISqr","redISqrt","redIDivSqrt","idivsqrt","redDivSqrt","divsqrt","redIsSquare","redIShl","redShl","redIShln","redShln","redINeg","redNeg","redEq","redEqn","redIsHigh","isHigh","redIsLow","isLow","redIsOdd","redIsEven","redJacobi","redKronecker","redIInvert","redInvert","redIFermat","dest","push","_check","copy","inject","set","fromNumber","swap","reverse","fromBuffer","toBuffer","byteLength","isSafe","prefix","toDouble","valueOf","s52","s26","toBool","padding","getBase","off","groupSize","groupBase","toJSON","toArray","toArrayLike","ArrayType","bytes","allocUnsafeSlow","of","isInteger","fromDouble","isFinite","floor","fromBigInt","start","_fromHex","fromBool","value","fromString","str","replace","charCodeAt","_fromBase","parseHex","limbLen","limbPow","total","end","parseBase","fromJSON","json","chunk","join","fromBN","fromArray","fromArrayLike","decode","args","barrett","Barrett","Mont","_prime","name","prime","P192","P224","P521","K256","P251","P25519","P448","exp","randomBits","randomBytes","cast","space","obj","wordSize","native","Prime","one","ireduce","split","imulK","input","pm2","x1","Prime34","pm3d4","pp1d4","SquareRootError","u2","u3","u5","v3","Prime58","sm1","pm5d8","pp3d8","v7","mc","Prime116","powS","powE","sqrn","core","x2","sqrnmul","x3","x6","x12","x24","x30","x31","x62","x124","x127","r0","r1","r2","x4","x8","x16","x32","x64","x128","x48","x96","x120","x126","x7","x256","x512","x519","prev","x9","x11","x22","x44","x88","x176","x220","x223","r3","r4","r5","r6","r7","x192","x240","x246","x247","x5","x10","x20","x40","x50","x100","x200","x250","x222","mb","_verify1","_verify2","precompute","e","intTo","intFrom","powInt","powNum","wnd","a2","sqrt3mod4","sqrt5mod8sm1","sqrt5mod8","sqrt0","alpha","beta","divsqrt3mod4","divsqrt5mod8","symbol","invertAll","elems","elem","invs","_shift","ri","mi","rib","makeError","message","type","TypeError","RangeError","result","isSafeInteger","clz32","self","rword","hncarry","mid","o","a0","al0","ah0","a1","al1","ah1","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","BIG_ENDIAN","Int8Array","Int16Array","buffer","state","Uint32Array","stream","Uint8Array","nonce","derive","readU32","_block","qround","writeU32","destroy","rotl32","dst","HMAC","ROUND_CONST","Keccak","block","rate","want","_transform","fill","count","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","h0","l0","h1","l1","h2","l2","h3","l3","h4","l4","b32","b33","b14","b15","b46","b47","b28","b29","b20","b21","b34","b35","b16","b17","b48","b49","b40","b41","b22","b23","b36","b37","b18","b19","b10","b11","b42","b43","b24","b25","b38","b39","b30","b31","b12","b13","b44","b45","b26","b27","hmac","multi","mac","id","blockSize","crypto","msCrypto","HAS_CRYPTO","getRandomValues","randomValues","bind","pool","poolPos","randomInt","array","randomFillSync","ArrayBuffer","byteOffset","offset","subarray","randomFill","randomRange","top","BatchRNG","SHAKE256","elliptic","pre","createTag","alg","tag","raw","concat","_pre","_curve","_rng","_auxTag","_nonceTag","_challengeTag","fieldSize","fieldBits","hashInt","items","item","scalarBits","hashAux","hashNonce","hashChallenge","R","privateKeyGenerate","randomScalar","encodeScalar","privateKeyVerify","privateKeyExport","encodeField","privateKeyImport","privateKeyTweakAdd","tweak","privateKeyTweakMul","privateKeyInvert","publicKeyCreate","mulBlind","encodeX","publicKeyFromUniform","decodeUniform","pointFromUniform","publicKeyToUniform","hint","decodeEven","pointToUniform","encodeUniform","publicKeyFromHash","pointFromHash","publicKeyToHash","pointToHash","publicKeyVerify","publicKeyExport","publicKeyImport","point","validate","pointFromX","publicKeyTweakAdd","T","jmul","P","publicKeyTweakMul","publicKeyTweakSum","publicKeyTweakCheck","expect","negated","equals","publicKeyCombine","keys","jpoint","aux","_sign","G","araw","Araw","Rraw","verify","_verify","sraw","decodeField","mulAdd","eqX","verifyBatch","_verifyBatch","points","coeffs","sum","ea","jmulAll","isInfinity","pub","priv","mulConst","DESC","PADDING","K","_update","_final","W","f","sigma1","t1","t2","Sigma0","SHAKE","DIALOG_NAME","createDialogContext","createDialogScope","_radix_ui_react_context__WEBPACK_IMPORTED_MODULE_2__","DialogProvider","useDialogContext","Dialog","__scopeDialog","children","open","openProp","defaultOpen","onOpenChange","modal","props","triggerRef","react__WEBPACK_IMPORTED_MODULE_0__","useRef","contentRef","setOpen","_radix_ui_react_use_controllable_state__WEBPACK_IMPORTED_MODULE_3__","prop","defaultProp","onChange","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","scope","contentId","_radix_ui_react_id__WEBPACK_IMPORTED_MODULE_4__","M","titleId","descriptionId","onOpenToggle","useCallback","prevOpen","displayName","TRIGGER_NAME","DialogTrigger","forwardRef","forwardedRef","triggerProps","context","composedTriggerRef","_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_5__","_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_6__","WV","button","getState","ref","onClick","_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","DialogPortal","container","Children","map","_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_8__","present","_radix_ui_react_portal__WEBPACK_IMPORTED_MODULE_9__","asChild","child","OVERLAY_NAME","DialogOverlay","portalContext","overlayProps","DialogOverlayImpl","react_remove_scroll__WEBPACK_IMPORTED_MODULE_10__","Z","_radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_11__","g7","allowPinchZoom","shards","style","pointerEvents","CONTENT_NAME","DialogContent","contentProps","DialogContentModal","DialogContentNonModal","composedRefs","useEffect","content","current","aria_hidden__WEBPACK_IMPORTED_MODULE_12__","Ry","DialogContentImpl","trapFocus","disableOutsidePointerEvents","onCloseAutoFocus","event","preventDefault","focus","onPointerDownOutside","originalEvent","detail","ctrlLeftClick","ctrlKey","isRightClick","onFocusOutside","hasInteractedOutsideRef","hasPointerDownOutsideRef","defaultPrevented","onInteractOutside","target","targetIsTrigger","contains","onOpenAutoFocus","_radix_ui_react_focus_guards__WEBPACK_IMPORTED_MODULE_13__","EW","jsxs","Fragment","_radix_ui_react_focus_scope__WEBPACK_IMPORTED_MODULE_14__","loop","trapped","onMountAutoFocus","onUnmountAutoFocus","_radix_ui_react_dismissable_layer__WEBPACK_IMPORTED_MODULE_15__","XB","role","onDismiss","TitleWarning","DescriptionWarning","TITLE_NAME","DialogTitle","titleProps","DESCRIPTION_NAME","DialogDescription","descriptionProps","CLOSE_NAME","DialogClose","closeProps","TITLE_WARNING_NAME","WarningProvider","useWarningContext","contentName","titleName","docsSlug","titleWarningContext","MESSAGE","hasTitle","document","getElementById","console","error","descriptionWarningContext","describedById","getAttribute","hasDescription","warn","Root","Trigger","Portal","Overlay","Content","Title","Description","Close"],"sourceRoot":""}