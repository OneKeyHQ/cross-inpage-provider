{"version":3,"file":"static/chunks/3468.7196bca5dce3cca8.js","mappings":"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","sources":["webpack://_N_E/./components/DAppList.tsx","webpack://_N_E/./components/InfoLayout.tsx","webpack://_N_E/./components/chains/algoWalletConnect/dapps.config.ts","webpack://_N_E/./constants/index.ts","webpack://_N_E/./components/walletConnect/ClientContext.tsx","webpack://_N_E/./components/chains/algoWalletConnect/api.ts","webpack://_N_E/./components/chains/algoWalletConnect/transaction.ts","webpack://_N_E/./components/chains/algoWalletConnect/example.tsx","webpack://_N_E/./components/connect/ConnectButton.tsx","webpack://_N_E/./components/ui/dialog.tsx","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/@stablelib/random/lib/source|crypto","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/bn.js/lib|buffer","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/brorand|crypto","webpack://_N_E/ignored|/home/runner/work/cross-inpage-provider/cross-inpage-provider/packages/example/node_modules/elliptic/node_modules/bn.js/lib|buffer","webpack://_N_E/<anon>"],"sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport { Card, CardContent, CardTitle } from './ui/card';\n\nexport type Dapp = {\n  name: string;\n  url: string;\n};\n\nexport type DappListProps = {\n  dapps: Dapp[];\n};\n\nconst DappList: React.FC<DappListProps> = ({ dapps }) => {\n  return (\n    <Card>\n      <CardTitle className=\"text-xl\">Dapp Bookmarks</CardTitle>\n      <CardContent className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3\">\n        {dapps.map((dapp, index) => (\n          <div key={index} className=\"border p-2 rounded-lg shadow-sm hover:shadow-md\">\n            <Link href={dapp.url} legacyBehavior>\n              <a className=\"text-blue-500 hover:underline text-lg block\">{dapp.name} →</a>\n            </Link>\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default DappList;\n","import { Card, CardContent, CardHeader } from './ui/card';\n\nexport type InfoLayoutProps = {\n  title?: string;\n  children?: React.ReactNode;\n};\n\nexport default function InfoLayout({ title, children }: InfoLayoutProps) {\n  return (\n    <Card>\n      {title && <CardHeader className=\"font-medium\">{title}</CardHeader>}\n      <CardContent className=\"flex flex-col flex-wrap gap-3 break-all\">{children}</CardContent>\n    </Card>\n  );\n}\n","export const dapps = [\n  {\n    name: 'Tiny Man',\n    url: 'https://app.tinyman.org/#/swap?asset_in=0',\n  },\n  {\n    name: 'Humble Swap',\n    url: 'https://app.humble.sh/pool',\n  },\n  {\n    name: 'Folks Finnce',\n    url: 'https://app.folks.finance/markets',\n  },\n  {\n    name: 'Algofi',\n    url: 'https://app.algofi.org/',\n  },\n];\n","export const DEFAULT_APP_METADATA = {\n  name: 'dApp Example',\n  description: 'OneKey dApp Example for WalletConnect',\n  url: 'https://dapp-example.onekeytest.com/',\n  icons: ['https://avatars.githubusercontent.com/u/37784886'],\n  verifyUrl: 'https://verify.walletconnect.com',\n};\n\nexport const DEFAULT_PROJECT_ID = process.env.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID;\nexport const DEFAULT_RELAY_URL =\n  process.env.NEXT_PUBLIC_WALLET_CONNECT_RELAY_URL || 'wss://relay.walletconnect.com';\n","import Client from '@walletconnect/sign-client';\nimport { PairingTypes, ProposalTypes, SessionTypes } from '@walletconnect/types';\nimport { Web3Modal } from '@web3modal/standalone';\nimport { RELAYER_EVENTS } from '@walletconnect/core';\nimport {\n  createContext,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { getAppMetadata, getSdkError } from '@walletconnect/utils';\nimport { DEFAULT_APP_METADATA, DEFAULT_PROJECT_ID, DEFAULT_RELAY_URL } from '../../constants';\nimport { toast } from '../ui/use-toast';\n\n/**\n * Types\n */\ninterface IContext {\n  client: Client | undefined;\n  session: SessionTypes.Struct | undefined;\n  connect: (\n    requiredNamespaces: ProposalTypes.RequiredNamespaces,\n    optionalNamespaces: ProposalTypes.OptionalNamespaces,\n    pairing?: { topic: string },\n  ) => Promise<void>;\n  disconnect: () => Promise<void>;\n  isInitializing: boolean;\n  relayerRegion: string;\n  pairings: PairingTypes.Struct[];\n  accounts: string[];\n  setRelayerRegion: any;\n  origin: string;\n}\n\n/**\n * Context\n */\nexport const ClientContext = createContext<IContext>({} as IContext);\n\n/**\n * Web3Modal Config\n */\nconst web3Modal = new Web3Modal({\n  projectId: DEFAULT_PROJECT_ID,\n  themeMode: 'light',\n  walletConnectVersion: 2,\n});\n\n/**\n * Provider\n */\nexport function ClientContextProvider({ children }: { children: ReactNode | ReactNode[] }) {\n  const [client, setClient] = useState<Client>();\n  const [pairings, setPairings] = useState<PairingTypes.Struct[]>([]);\n  const [session, setSession] = useState<SessionTypes.Struct>();\n\n  const [isInitializing, setIsInitializing] = useState(false);\n  const prevRelayerValue = useRef<string>('');\n\n  const [accounts, setAccounts] = useState<string[]>([]);\n  const [chains, setChains] = useState<string[]>([]);\n  const [relayerRegion, setRelayerRegion] = useState<string>(DEFAULT_RELAY_URL);\n  const [origin, setOrigin] = useState<string>(getAppMetadata().url);\n  const reset = () => {\n    setSession(undefined);\n    setAccounts([]);\n    setRelayerRegion(DEFAULT_RELAY_URL);\n  };\n\n  const onSessionConnected = useCallback((_session: SessionTypes.Struct) => {\n    const allNamespaceAccounts = Object.values(_session.namespaces)\n      .map((namespace) => namespace.accounts)\n      .flat();\n    const allNamespaceChains = Object.keys(_session.namespaces);\n\n    console.log('onSessionConnected', _session);\n\n    setSession(_session);\n    setChains(allNamespaceChains);\n    setAccounts(allNamespaceAccounts);\n  }, []);\n\n  const connect = useCallback(\n    async (\n      requiredNamespaces: ProposalTypes.RequiredNamespaces,\n      optionalNamespaces: ProposalTypes.OptionalNamespaces,\n      pairing: { topic: string } | undefined,\n    ) => {\n      if (typeof client === 'undefined') {\n        throw new Error('WalletConnect is not initialized');\n      }\n      console.log('connect, pairing topic is:', pairing?.topic);\n      try {\n        console.log('requiredNamespaces config for connect:', requiredNamespaces);\n        console.log('optionalNamespaces config for connect:', optionalNamespaces);\n        const { uri, approval } = await client.connect({\n          pairingTopic: pairing?.topic,\n          requiredNamespaces,\n          optionalNamespaces,\n        });\n\n        // Open QRCode modal if a URI was returned (i.e. we're not connecting an existing pairing).\n        if (uri) {\n          // Create a flat array of all requested chains across namespaces.\n          const standaloneChains = Object.values(requiredNamespaces)\n            .map((namespace) => namespace.chains)\n            .flat();\n\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          web3Modal.openModal({ uri, standaloneChains });\n        }\n\n        const session = await approval();\n        console.log('Established session:', session);\n        onSessionConnected(session);\n        // Update known pairings after session is connected.\n        setPairings(client.pairing.getAll({ active: true }));\n      } catch (e) {\n        console.error(e);\n        toast({\n          title: (e as Error).message,\n          description: 'Failed to connect to WalletConnect.',\n        });\n        throw e;\n      } finally {\n        // close modal in case it was open\n        web3Modal.closeModal();\n      }\n    },\n    [client, onSessionConnected],\n  );\n\n  const disconnect = useCallback(async () => {\n    if (typeof client === 'undefined') {\n      throw new Error('WalletConnect is not initialized');\n    }\n    if (typeof session === 'undefined') {\n      throw new Error('Session is not connected');\n    }\n\n    await client.disconnect({\n      topic: session.topic,\n      reason: getSdkError('USER_DISCONNECTED'),\n    });\n\n    // Reset app state after disconnect.\n    reset();\n  }, [client, session]);\n\n  const _subscribeToEvents = useCallback(\n    (_client: Client) => {\n      if (typeof _client === 'undefined') {\n        throw new Error('WalletConnect is not initialized');\n      }\n\n      _client.on('session_ping', (args) => {\n        console.log('EVENT', 'session_ping', args);\n      });\n\n      _client.on('session_event', (args) => {\n        console.log('EVENT', 'session_event', args);\n      });\n\n      _client.on('session_update', ({ topic, params }) => {\n        console.log('EVENT', 'session_update', { topic, params });\n        const { namespaces } = params;\n        const _session = _client.session.get(topic);\n        const updatedSession = { ..._session, namespaces };\n        onSessionConnected(updatedSession);\n      });\n\n      _client.on('session_delete', () => {\n        console.log('EVENT', 'session_delete');\n        reset();\n      });\n    },\n    [onSessionConnected],\n  );\n\n  const _checkPersistedState = useCallback(\n    (_client: Client) => {\n      if (typeof _client === 'undefined') {\n        throw new Error('WalletConnect is not initialized');\n      }\n      // populates existing pairings to state\n      setPairings(_client.pairing.getAll({ active: true }));\n      console.log('RESTORED PAIRINGS: ', _client.pairing.getAll({ active: true }));\n\n      if (typeof session !== 'undefined') return;\n      // populates (the last) existing session to state\n      if (_client.session.length) {\n        const lastKeyIndex = _client.session.keys.length - 1;\n        const _session = _client.session.get(_client.session.keys[lastKeyIndex]);\n        console.log('RESTORED SESSION:', _session);\n        onSessionConnected(_session);\n        return _session;\n      }\n    },\n    [session, onSessionConnected],\n  );\n\n  const _logClientId = useCallback(async (_client: Client) => {\n    if (typeof _client === 'undefined') {\n      throw new Error('WalletConnect is not initialized');\n    }\n    try {\n      const clientId = await _client.core.crypto.getClientId();\n      console.log('WalletConnect ClientID: ', clientId);\n      localStorage.setItem('WALLETCONNECT_CLIENT_ID', clientId);\n    } catch (error) {\n      console.error('Failed to set WalletConnect clientId in localStorage: ', error);\n    }\n  }, []);\n\n  const createClient = useCallback(async () => {\n    try {\n      setIsInitializing(true);\n      const claimedOrigin = localStorage.getItem('wallet_connect_dapp_origin') || origin;\n\n      console.log('=====>>>>> claimedOrigin:', claimedOrigin);\n      console.log('=====>>>>> getAppMetadata:', getAppMetadata());\n      console.log('=====>>>>> relayerRegion:', relayerRegion);\n\n      const _client = await Client.init({\n        logger: 'debug',\n        relayUrl: relayerRegion,\n        projectId: DEFAULT_PROJECT_ID,\n        metadata: {\n          ...(getAppMetadata() || DEFAULT_APP_METADATA),\n          url: claimedOrigin,\n          verifyUrl: DEFAULT_APP_METADATA.verifyUrl,\n        },\n      });\n\n      setClient(_client);\n      setOrigin(_client.metadata.url);\n      prevRelayerValue.current = relayerRegion;\n      _subscribeToEvents(_client);\n      _checkPersistedState(_client);\n      await _logClientId(_client);\n      // eslint-disable-next-line no-useless-catch\n    } catch (err) {\n      console.log('=====>>>>> ', err);\n\n      throw err;\n    } finally {\n      setIsInitializing(false);\n    }\n  }, [_checkPersistedState, _subscribeToEvents, _logClientId, relayerRegion, origin]);\n\n  useEffect(() => {\n    const claimedOrigin = localStorage.getItem('wallet_connect_dapp_origin') || origin;\n    let interval: ReturnType<typeof setInterval>;\n    // simulates `UNKNOWN` validation by removing the verify iframe thus preventing POST message\n    if (claimedOrigin === 'unknown') {\n      //The interval is needed as Verify tries to init new iframe(with different urls) multiple times\n      interval = setInterval(() => document.getElementById('verify-api')?.remove(), 500);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [origin]);\n\n  useEffect(() => {\n    if (!client) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      createClient();\n    } else if (prevRelayerValue.current && prevRelayerValue.current !== relayerRegion) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      client.core.relayer.restartTransport(relayerRegion);\n      prevRelayerValue.current = relayerRegion;\n    }\n  }, [createClient, relayerRegion, client]);\n\n  useEffect(() => {\n    if (!client) return;\n    client.core.relayer.on(RELAYER_EVENTS.connect, () => {\n      toast({\n        title: 'Network connection is restored!',\n      });\n    });\n\n    client.core.relayer.on(RELAYER_EVENTS.disconnect, () => {\n      toast({\n        title: 'Network connection lost',\n      });\n    });\n  }, [client]);\n\n  const value = useMemo(\n    () => ({\n      pairings,\n      isInitializing,\n      accounts,\n      relayerRegion,\n      client,\n      session,\n      connect,\n      disconnect,\n      setRelayerRegion,\n      origin,\n    }),\n    [\n      pairings,\n      isInitializing,\n      accounts,\n      relayerRegion,\n      client,\n      session,\n      connect,\n      disconnect,\n      setRelayerRegion,\n      origin,\n    ],\n  );\n\n  return (\n    <ClientContext.Provider\n      value={{\n        ...value,\n      }}\n    >\n      {children}\n    </ClientContext.Provider>\n  );\n}\n\nexport function useWalletConnectClient() {\n  const context = useContext(ClientContext);\n  if (context === undefined) {\n    throw new Error('useWalletConnectClient must be used within a ClientContextProvider');\n  }\n  return context;\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport algosdk from 'algosdk';\n\nexport enum ChainType {\n  MainNet = 'mainnet',\n  TestNet = 'testnet',\n}\n\nconst mainNetClient = new algosdk.Algodv2('', 'https://mainnet-api.algonode.cloud', '');\nconst testNetClient = new algosdk.Algodv2('', 'https://testnet-api.algonode.cloud', '');\n\nexport function clientForChain(chain: ChainType): algosdk.Algodv2 {\n  switch (chain) {\n    case ChainType.MainNet:\n      return mainNetClient;\n    case ChainType.TestNet:\n      return testNetClient;\n    default:\n      throw new Error(`Unknown chain type: ${chain as string}`);\n  }\n}\n\nexport async function apiGetTxnParams(chain: ChainType): Promise<algosdk.SuggestedParams> {\n  const params = await clientForChain(chain).getTransactionParams().do();\n  return params;\n}\n\nexport async function apiSubmitTransactions(\n  chain: ChainType,\n  stxns: Uint8Array[],\n): Promise<number> {\n  const { txId } = await clientForChain(chain).sendRawTransaction(stxns).do();\n  return await waitForTransaction(chain, txId as string);\n}\n\nasync function waitForTransaction(chain: ChainType, txId: string): Promise<number> {\n  const client = clientForChain(chain);\n\n  let lastStatus = await client.status().do();\n  let lastRound = lastStatus['last-round'] as number;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const status = await client.pendingTransactionInformation(txId).do();\n    if (status['pool-error']) {\n      throw new Error(`Transaction Pool Error: ${status['pool-error'] as string}`);\n    }\n    if (status['confirmed-round']) {\n      return status['confirmed-round'] as number;\n    }\n    lastStatus = await client.statusAfterBlock(lastRound + 1).do();\n    lastRound = lastStatus['last-round'];\n  }\n}\n","import type { SignerTransaction, WalletTransaction, JsonRpcRequest } from './types';\nimport { apiGetTxnParams, ChainType } from './api';\nimport { isEmpty } from 'lodash';\nimport algosdk, { algosToMicroalgos, type Transaction } from 'algosdk';\n\nconst getPayloadId = (): number => {\n    const date = Date.now() * Math.pow(10, 3)\n    const extra = Math.floor(Math.random() * Math.pow(10, 3))\n    return date + extra\n  }\n\nexport const formatJsonRpcRequest = <T = any>(method: string, params: T): JsonRpcRequest => {\n    return {\n      id: getPayloadId(),\n      jsonrpc: '2.0',\n      method,\n      params\n    }\n  }\n\nexport const base64ToUint8Array = (data: string) => {\nreturn Uint8Array.from(window.atob(data), (value) => value.charCodeAt(0))\n}\n\nexport const encodeUnsignedTransactionInBase64 = (txn: Transaction): string => {\n  return Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString('base64');\n};\n\nexport function composeTransaction(transaction: SignerTransaction, signerAddress?: string) {\n  let signers: WalletTransaction['signers'];\n\n  if (signerAddress && !(transaction.signers || []).includes(signerAddress)) {\n    signers = [];\n  }\n\n  const txnRequestParams: WalletTransaction = {\n    txn: encodeUnsignedTransactionInBase64(transaction.txn),\n  };\n\n  if (Array.isArray(signers)) {\n    txnRequestParams.signers = signers;\n  }\n\n  if (transaction.authAddr) {\n    txnRequestParams.authAddr = transaction.authAddr;\n  }\n\n  if (transaction.message) {\n    txnRequestParams.message = transaction.message;\n  }\n\n  if (transaction.msig) {\n    txnRequestParams.msig = transaction.msig;\n  }\n\n  return txnRequestParams;\n}\n\nexport const getSignTxnRequestParams = (\n  txns: SignerTransaction[] | SignerTransaction[][],\n  signerAddress?: string,\n) => {\n  // If `txns` is a single array, convert it to an array of arrays\n  if (!Array.isArray(txns[0])) {\n    txns = [txns as SignerTransaction[]];\n  }\n\n  return (txns as SignerTransaction[][]).flatMap((txGroup) =>\n    txGroup.map<WalletTransaction>((txGroupDetail) =>\n      composeTransaction(txGroupDetail, signerAddress),\n    ),\n  );\n};\n\nexport async function generateSinglePayTxn(\n  chain: ChainType,\n  fromAddress: string,\n  toAddress: string,\n  amount: number,\n  note: string | undefined,\n): Promise<SignerTransaction> {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: fromAddress,\n    to: toAddress,\n    amount: amount,\n    note:\n      !note || isEmpty(note) ? new Uint8Array() : new Uint8Array(Buffer.from(note)),\n    suggestedParams,\n  });\n\n  return {\n    txn,\n    message: 'This is a payment transaction that sends Algos.',\n  };\n}\n\nexport async function generateSingleAssetTransferTxn(\n    chain: ChainType,\n    fromAddress: string,\n    toAddress: string,\n    assetIndex: string,\n    amount: number,\n    note: string | undefined,\n  ): Promise<SignerTransaction> {\n    const suggestedParams = await apiGetTxnParams(chain);\n\n    const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n      from: fromAddress,\n      to: toAddress,\n      amount: amount,\n      assetIndex: parseInt(assetIndex),\n      note:\n        !note || isEmpty(note) ? new Uint8Array() : new Uint8Array(Buffer.from(note)),\n      suggestedParams,\n    });\n\n    return {\n      txn,\n      message: 'This transaction will send USDC.',\n    };\n  }\n\n  function getAssetReserve(chain: ChainType): string {\n    if (chain === ChainType.MainNet) {\n      return '2UEQTE5QDNXPI7M3TU44G6SYKLFWLPQO7EBZM7K7MHMQQMFI4QJPLHQFHM';\n    }\n\n    if (chain === ChainType.TestNet) {\n      return 'UJBZPEMXLD6KZOLUBUDSZ3DXECXYDADZZLBH6O7CMYXHE2PLTCW44VK5T4';\n    }\n\n    throw new Error(`Asset reserve not defined for chain ${chain as string}`);\n  }\n\n  export async function generateSingleAssetCloseTxn(\n    chain: ChainType,\n    fromAddress: string,\n    toAddress: string,\n    assetIndex: string,\n    amount: number,\n    note: string | undefined,\n  ): Promise<SignerTransaction> {\n    const suggestedParams = await apiGetTxnParams(chain);\n\n    const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n      from: fromAddress,\n      to: getAssetReserve(chain),\n      amount: amount,\n      assetIndex: parseInt(assetIndex),\n      note:\n        !note || isEmpty(note) ? new Uint8Array() : new Uint8Array(Buffer.from(note)),\n      closeRemainderTo: toAddress,\n      suggestedParams,\n    });\n\n    return {\n      txn,\n      message: 'This transaction will send USDC.',\n    };\n  }\n\n  export async function generateSingleAppOptIn(\n    chain: ChainType,\n    fromAddress: string,\n    appIndex: string,\n    note: string | undefined,\n    appArgs?: Uint8Array[] | undefined,\n  ): Promise<SignerTransaction> {\n    const suggestedParams = await apiGetTxnParams(chain);\n\n    const txn = algosdk.makeApplicationOptInTxnFromObject({\n        from: fromAddress,\n        appIndex: parseInt(appIndex),\n        note:\n            !note || isEmpty(note) ? new Uint8Array() : new Uint8Array(Buffer.from(note)),\n        appArgs: appArgs ?? [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n        suggestedParams,\n      });\n\n    return {\n      txn,\n      message: 'This transaction will send USDC.',\n    };\n  }\n\n  export async function generateSingleAppCall(\n    chain: ChainType,\n    fromAddress: string,\n    appIndex: string,\n    note: string | undefined,\n    appArgs?: Uint8Array[] | undefined,\n  ): Promise<SignerTransaction> {\n    const suggestedParams = await apiGetTxnParams(chain);\n\n    const txn = algosdk.makeApplicationNoOpTxnFromObject({\n        from: fromAddress,\n        appIndex: parseInt(appIndex),\n        note:\n            !note || isEmpty(note) ? new Uint8Array() : new Uint8Array(Buffer.from(note)),\n        appArgs: appArgs ?? [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n        suggestedParams,\n      });\n\n    return {\n      txn,\n      message: 'This transaction will send USDC.',\n    };\n  }\n\n  export async function generateSingleAppCloseOut(\n    chain: ChainType,\n    fromAddress: string,\n    appIndex: string,\n    note: string | undefined,\n    appArgs?: Uint8Array[] | undefined,\n  ): Promise<SignerTransaction> {\n    const suggestedParams = await apiGetTxnParams(chain);\n\n    const txn = algosdk.makeApplicationCloseOutTxnFromObject({\n        from: fromAddress,\n        appIndex: parseInt(appIndex),\n        note:\n            !note || isEmpty(note) ? new Uint8Array() : new Uint8Array(Buffer.from(note)),\n        appArgs: appArgs ?? [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n        suggestedParams,\n      });\n\n    return {\n      txn,\n      message: 'This transaction will send USDC.',\n    };\n  }\n\n  export async function generateSingleAppClearState(\n    chain: ChainType,\n    fromAddress: string,\n    appIndex: string,\n    note: string | undefined,\n    appArgs?: Uint8Array[] | undefined,\n  ): Promise<SignerTransaction> {\n    const suggestedParams = await apiGetTxnParams(chain);\n\n    const txn = algosdk.makeApplicationClearStateTxnFromObject({\n        from: fromAddress,\n        appIndex: parseInt(appIndex),\n        note:\n            !note || isEmpty(note) ? new Uint8Array() : new Uint8Array(Buffer.from(note)),\n        appArgs: appArgs ?? [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n        suggestedParams,\n      });\n\n    return {\n      txn,\n      message: 'This transaction will send USDC.',\n    };\n  }\n\n","/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { dapps } from './dapps.config';\nimport ConnectButton from '../../../components/connect/ConnectButton';\nimport { SignerTransaction } from './types';\nimport { ApiPayload, ApiGroup } from '../../ApiActuator';\nimport type { IKnownWallet } from '../../../components/connect/types';\nimport DappList from '../../../components/DAppList';\nimport {\n  ClientContextProvider,\n  useWalletConnectClient,\n} from '../../../components/walletConnect/ClientContext';\nimport { ProposalTypes } from '@walletconnect/types';\nimport InfoLayout from '../../../components/InfoLayout';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '../../../components/ui/select';\nimport { useCallback, useEffect, useState } from 'react';\nimport { ChainType, apiSubmitTransactions, clientForChain } from './api';\nimport { Input } from '../../ui/input';\nimport {\n  formatJsonRpcRequest,\n  generateSinglePayTxn,\n  getSignTxnRequestParams,\n  base64ToUint8Array,\n  generateSingleAssetTransferTxn,\n  generateSingleAssetCloseTxn,\n  generateSingleAppCall,\n  generateSingleAppOptIn,\n  generateSingleAppCloseOut,\n  generateSingleAppClearState,\n} from './transaction';\n\n// https://github.com/WalletConnect/walletconnect-monorepo/issues/3251\n// https://github.com/algorand/walletconnect-example-dapp\n// https://github.com/TxnLab/algorand-wc2\nconst chainName = 'algorand';\nconst namespace = 'wGHE2Pwdvd7S12BL5FaOP20EGYesN73k';\nconst AlgoNameSpace: ProposalTypes.RequiredNamespaces = {\n  algorand: {\n    chains: [`${chainName}:${namespace}`],\n    methods: [],\n    events: [],\n  },\n  // eip155: {\n  //   chains: [`eip155:1`],\n  //   methods: ['eth_sendTransaction', 'personal_sign'],\n  //   events: ['chainChanged', 'accountsChanged'],\n  // },\n};\nconst AlgoNameSpaceOptional: ProposalTypes.OptionalNamespaces = {\n  algorand: {\n    chains: [`${chainName}:${namespace}`],\n    methods: ['algo_signTx'],\n    events: [],\n  },\n  // eip155: {\n  //   chains: [`eip155:1`],\n  //   methods: [\n  //     'eth_signTransaction',\n  //     'eth_sign',\n  //     'eth_signTypedData',\n  //     'eth_signTypedData_v4',\n  //     'wallet_getCapabilities',\n  //     'wallet_sendCalls',\n  //     'wallet_getCallsStatus',\n  //   ],\n  //   events: [],\n  // },\n};\n\n// const chainTypeMap = {\n//   ['algorand:wGHE2Pwdvd7S12BL5FaOP20EGYesN73k']: ChainType.MainNet,\n//   ['algorand:SGO1GKSzyE7IEPItTxCByw9x8FmnrCDe']: ChainType.TestNet,\n// };\n\nconst chainTypeToChainIdMap = {\n  [ChainType.MainNet]: 'algorand:wGHE2Pwdvd7S12BL5FaOP20EGYesN73k',\n  [ChainType.TestNet]: 'algorand:SGO1GKSzyE7IEPItTxCByw9x8FmnrCDe',\n};\n\nfunction Example() {\n  const { connect, client, session, accounts } = useWalletConnectClient();\n  const [account, setAccount] = useState<string>('');\n  const chain = ChainType.MainNet;\n\n  const onConnectWallet = async (selectedWallet: IKnownWallet) => {\n    await connect(AlgoNameSpace, AlgoNameSpaceOptional);\n\n    return {\n      provider: true,\n    };\n  };\n\n  useEffect(() => {\n    if (accounts.length > 0) {\n      setAccount(accounts[0]);\n    }\n  }, [accounts]);\n\n  const getAccountInfo = () => {\n    // eslint-disable-next-line no-unsafe-optional-chaining\n    const [namespace, reference, address] = account?.split(':');\n    return {\n      namespace,\n      reference,\n      address,\n    };\n  };\n\n  const onCommonExecute = useCallback(async (request: string) => {\n    const requestObj = JSON.parse(request);\n    const response = await client?.request<(string | number[])[]>({\n      chainId: chainTypeToChainIdMap[chain],\n      topic: session.topic,\n      request: requestObj,\n    });\n\n    return JSON.stringify(response);\n  }, []);\n\n  const onCommonValidate = useCallback(async (request: string, result: string) => {\n    const response = JSON.parse(result);\n\n    const signedTxns =\n      typeof response[0] === 'string'\n        ? (response as string[]).map(base64ToUint8Array)\n        : (response as number[][]).map((item) => Uint8Array.from(item));\n\n    const sentTransaction = await apiSubmitTransactions(chain, signedTxns);\n\n    return JSON.stringify(sentTransaction);\n  }, []);\n\n  const generateJsonRpcRequest = useCallback((transaction: SignerTransaction) => {\n    const signTxnParams = getSignTxnRequestParams([transaction]);\n    const request = formatJsonRpcRequest('algo_signTxn', [signTxnParams]);\n    return JSON.stringify(request);\n  }, []);\n\n  const getTokenTransferFrom = () => {\n    return (\n      <>\n        <Input\n          label=\"收款地址\"\n          type=\"text\"\n          name=\"toAddress\"\n          defaultValue={getAccountInfo()?.address ?? ''}\n        />\n        <Input label=\"转账金额\" type=\"number\" name=\"amount\" defaultValue=\"10000\" />\n        <select name=\"assetIndex\" className=\"select\">\n          <option selected>选择 Token</option>\n          <option value=\"31566704\">MainNet USDC</option>\n          <option value=\"10458941\">TestNet USDC</option>\n        </select>\n        <Input label=\"note\" type=\"text\" name=\"note\" />\n      </>\n    );\n  };\n\n  const generateSingleAssetTransferCommon = async (\n    fromData: Record<string, any>,\n    generate: (\n      chain: ChainType,\n      fromAddress: string,\n      toAddress: string,\n      assetIndex: string,\n      amount: number,\n      note: string | undefined,\n    ) => Promise<SignerTransaction>,\n  ) => {\n    const fromAddress = getAccountInfo()?.address ?? '';\n    const toAddress = fromData['toAddress'] as string;\n    const amount = parseInt(fromData['amount'] as string);\n    const assetIndex = fromData['assetIndex'] as string;\n    const note = fromData['note'] as string | undefined;\n\n    if (!toAddress || !amount) {\n      throw new Error('toAddress or amount is required');\n    }\n    if (!assetIndex) {\n      throw new Error('请选择 Token');\n    }\n\n    const transaction = await generate(chain, fromAddress, toAddress, assetIndex, amount, note);\n    return generateJsonRpcRequest(transaction);\n  };\n\n  const getAppCallFrom = () => {\n    return (\n      <>\n        <Input\n          label=\"收款地址\"\n          type=\"text\"\n          name=\"toAddress\"\n          defaultValue={getAccountInfo()?.address ?? ''}\n        />\n        <select name=\"appIndex\" className=\"select\">\n          <option selected>选择 App</option>\n          <option value=\"305162725\">MainNet Test App</option>\n          <option value=\"22314999\">TestNet Test App</option>\n        </select>\n\n        <Input label=\"note\" type=\"text\" name=\"note\" />\n      </>\n    );\n  };\n\n  const generateSingleAppCallCommon = async (\n    fromData: Record<string, any>,\n    generate: (\n      chain: ChainType,\n      fromAddress: string,\n      appIndex: string,\n      note: string | undefined,\n      appArgs?: Uint8Array[] | undefined,\n    ) => Promise<SignerTransaction>,\n  ) => {\n    const fromAddress = getAccountInfo()?.address ?? '';\n    const toAddress = fromData['toAddress'] as string;\n    const appIndex = fromData['appIndex'] as string;\n    const note = fromData['note'] as string | undefined;\n\n    if (!toAddress) {\n      throw new Error('toAddress is required');\n    }\n    if (!appIndex) {\n      throw new Error('请选择 App');\n    }\n\n    const transaction = await generate(chain, fromAddress, appIndex, note);\n    return generateJsonRpcRequest(transaction);\n  };\n\n  if (!client) {\n    return <div>Initializing...</div>;\n  }\n\n  return (\n    <>\n      <ConnectButton<any>\n        fetchWallets={() => {\n          return Promise.resolve([\n            {\n              id: 'algorand',\n              name: 'Algorand Wallet Connect V2',\n            },\n          ]);\n        }}\n        onConnect={onConnectWallet}\n        onDisconnect={async () => {\n          if (session) {\n            setAccount('');\n            return await client.disconnect({\n              topic: session.topic,\n              reason: {\n                code: 0,\n                message: 'User disconnected',\n              },\n            });\n          }\n        }}\n      />\n      <InfoLayout title=\"选择账户\">\n        <Select defaultValue={account} onValueChange={setAccount}>\n          <SelectTrigger className=\"w-full\">\n            <SelectValue className=\"text-base font-medium\" placeholder=\"选择参数\" />\n          </SelectTrigger>\n          <SelectContent>\n            {accounts.map((item) => {\n              return (\n                <SelectItem key={item} value={item} className=\"text-base font-medium\">\n                  {item}\n                </SelectItem>\n              );\n            })}\n          </SelectContent>\n        </Select>\n      </InfoLayout>\n      <ApiGroup title=\"algo_signTxn\">\n        <ApiPayload\n          title=\"algo_signTxn\"\n          description=\"给账户转账\"\n          onExecute={onCommonExecute}\n          onValidate={onCommonValidate}\n          generateRequestFrom={() => {\n            return (\n              <>\n                <Input\n                  label=\"收款地址\"\n                  type=\"text\"\n                  name=\"toAddress\"\n                  defaultValue={getAccountInfo()?.address ?? ''}\n                />\n                <Input label=\"转账金额\" type=\"number\" name=\"amount\" defaultValue=\"10000\" />\n                <Input label=\"note\" type=\"text\" name=\"note\" />\n              </>\n            );\n          }}\n          onGenerateRequest={async (fromData: Record<string, any>) => {\n            const fromAddress = getAccountInfo()?.address ?? '';\n            const toAddress = fromData['toAddress'] as string;\n            const amount = parseFloat(fromData['amount'] as string);\n            const note = fromData['note'] as string | undefined;\n\n            if (!toAddress || !amount) {\n              throw new Error('toAddress or amount is required');\n            }\n\n            const transaction = await generateSinglePayTxn(\n              chain,\n              fromAddress,\n              toAddress,\n              amount,\n              note,\n            );\n\n            return generateJsonRpcRequest(transaction);\n          }}\n        />\n        <ApiPayload\n          title=\"algo_signTxn\"\n          description=\"AssetTransferTxn 给账户 Token 转账，amount 为 0 时为声明 Token（AssetOptInTxn）\"\n          onExecute={onCommonExecute}\n          onValidate={onCommonValidate}\n          generateRequestFrom={getTokenTransferFrom}\n          onGenerateRequest={async (fromData: Record<string, any>) => {\n            return generateSingleAssetTransferCommon(fromData, generateSingleAssetTransferTxn);\n          }}\n        />\n        <ApiPayload\n          title=\"algo_signTxn\"\n          description=\"删除 Token,!!!!! 请谨慎操作 !!!!!\"\n          onExecute={onCommonExecute}\n          onValidate={onCommonValidate}\n          generateRequestFrom={getTokenTransferFrom}\n          onGenerateRequest={async (fromData: Record<string, any>) => {\n            return generateSingleAssetTransferCommon(fromData, generateSingleAssetCloseTxn);\n          }}\n        />\n        <ApiPayload\n          title=\"algo_signTxn\"\n          description=\"ApplicationOptInTxn 进入 App 交互\"\n          onExecute={onCommonExecute}\n          onValidate={onCommonValidate}\n          generateRequestFrom={getAppCallFrom}\n          onGenerateRequest={async (fromData: Record<string, any>) => {\n            return generateSingleAppCallCommon(fromData, generateSingleAppOptIn);\n          }}\n        />\n        <ApiPayload\n          title=\"algo_signTxn\"\n          description=\"ApplicationNoOpTxn 与 App 交互\"\n          onExecute={onCommonExecute}\n          onValidate={onCommonValidate}\n          generateRequestFrom={getAppCallFrom}\n          onGenerateRequest={async (fromData: Record<string, any>) => {\n            return generateSingleAppCallCommon(fromData, generateSingleAppCall);\n          }}\n        />\n        <ApiPayload\n          title=\"algo_signTxn\"\n          description=\"ApplicationCloseOutTxn 与 App 交互\"\n          onExecute={onCommonExecute}\n          onValidate={onCommonValidate}\n          generateRequestFrom={getAppCallFrom}\n          onGenerateRequest={async (fromData: Record<string, any>) => {\n            return generateSingleAppCallCommon(fromData, generateSingleAppCloseOut);\n          }}\n        />\n        <ApiPayload\n          title=\"algo_signTxn\"\n          description=\"ApplicationClearStateTxn 与 App 交互\"\n          onExecute={onCommonExecute}\n          onValidate={onCommonValidate}\n          generateRequestFrom={getAppCallFrom}\n          onGenerateRequest={async (fromData: Record<string, any>) => {\n            return generateSingleAppCallCommon(fromData, generateSingleAppClearState);\n          }}\n        />\n      </ApiGroup>\n      <DappList dapps={dapps} />\n    </>\n  );\n}\n\nexport default function App() {\n  return (\n    <ClientContextProvider>\n      <Example />\n    </ClientContextProvider>\n  );\n}\n","/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { Button } from '../ui/button';\nimport { Card, CardContent } from '../ui/card';\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '../ui/dialog';\nimport type { IAccountInfo, IKnownWallet } from './types';\nimport { useWallet } from './WalletContext';\nimport { toast } from '../ui/use-toast';\nimport { get } from 'lodash';\nimport { useSettings } from '../../hooks/useSettings';\n\nexport type ConnectButtonProps<T> = {\n  fetchWallets: () => Promise<IKnownWallet[]>;\n  onConnect: (wallet: IKnownWallet) => Promise<\n    {\n      provider: T;\n    } & Partial<IAccountInfo>\n  >;\n  onDisconnect?: () => Promise<void>;\n};\n\nconst accountInfoKeys: Record<string, string> = {\n  address: '地址',\n  publicKey: '公钥',\n  chainId: '网络',\n};\n\nexport default function ConnectButton<T>({\n  fetchWallets,\n  onConnect,\n  onDisconnect,\n}: ConnectButtonProps<T>) {\n  const { settings } = useSettings();\n  const connectDialogRef = useRef<any>(null);\n  const autoConnectedRef = useRef<boolean>(false);\n\n  const [wallets, setWallets] = useState<IKnownWallet[]>([]);\n\n  const { setProvider, setAccount, provider, account } = useWallet();\n\n  const connectWallet = useCallback(\n    async (wallet: IKnownWallet) => {\n      try {\n        const { provider: _provider, ...accountInfo } = await onConnect(wallet);\n        setProvider(_provider);\n        setAccount(accountInfo);\n      } catch (error) {\n        console.log('connectWallet error', error);\n\n        toast({\n          title: '连接失败',\n          description: get(error, 'message', ''),\n        });\n      }\n    },\n    [onConnect, setAccount, setProvider],\n  );\n\n  const disconnectWallet = useCallback(async () => {\n    autoConnectedRef.current = false;\n    await onDisconnect?.();\n    setProvider(null);\n    setAccount(null);\n  }, [onDisconnect, setAccount, setProvider]);\n\n  const closeDialog = useCallback(() => {\n    setTimeout(() => {\n      try {\n        connectDialogRef.current?.click();\n      } catch (error) {\n        // ignore\n      }\n    }, 150);\n  }, []);\n\n  const connectWalletWithDialog = useCallback(\n    async (options?: { directConnection?: boolean }) => {\n      const wallets = await fetchWallets?.();\n\n      if (wallets?.length === 0) {\n        closeDialog();\n        return;\n      }\n\n      const { directConnection } = options ?? { directConnection: false };\n      if (wallets?.length === 1 || (wallets?.length > 0 && directConnection)) {\n        closeDialog();\n        await connectWallet(wallets[0]);\n      } else {\n        setWallets(wallets);\n      }\n    },\n    [closeDialog, connectWallet, fetchWallets],\n  );\n\n  useEffect(() => {\n    const timeout = setTimeout(async () => {\n      if (autoConnectedRef.current) return;\n\n      console.log('settings.autoConnect', settings.autoConnect);\n      if (settings.autoConnect) {\n        autoConnectedRef.current = true;\n        await connectWalletWithDialog({\n          directConnection: true,\n        });\n      }\n    }, 500);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [settings.autoConnect]);\n\n  return (\n    <Card>\n      <CardContent className=\"flex flex-col flex-wrap gap-3\">\n        <div className=\"flex flex-row flex-wrap justify-between\">\n          <Dialog>\n            <DialogTrigger asChild>\n              <Button onClick={() => connectWalletWithDialog()}>Connect Wallet</Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogClose ref={connectDialogRef} />\n              <DialogHeader>\n                <DialogTitle>选择钱包开始连接</DialogTitle>\n                {!!wallets &&\n                  wallets.map((wallet) => (\n                    <DialogClose asChild key={wallet.id}>\n                      <Button onClick={() => connectWallet(wallet)} className=\"gap-2\">\n                        {wallet.logo && (\n                          <img\n                            alt={wallet.name}\n                            src={wallet.logo}\n                            className=\"w-5 h-5 rounded-full\"\n                          />\n                        )}\n                        <span className=\"font-medium\">{wallet.name}</span>\n                        {wallet.tags?.map((tag) => (\n                          <span key={tag} className=\"text-xs font-light\">\n                            {tag}\n                          </span>\n                        ))}\n                      </Button>\n                    </DialogClose>\n                  ))}\n                {!wallets ||\n                  (wallets.length === 0 && (\n                    <DialogDescription>\n                      没有钱包可用，请安装 OneKey Extension\n                      <a target=\"_blank\" href={'https://www.onekey.so/download/'}>\n                        Install OneKey Extension →\n                      </a>\n                    </DialogDescription>\n                  ))}\n              </DialogHeader>\n            </DialogContent>\n          </Dialog>\n          {provider && (\n            <Button variant=\"destructive\" onClick={disconnectWallet}>\n              断开链接\n            </Button>\n          )}\n        </div>\n        {account && (\n          <div className=\"flex grid-cols-1 xl:grid-cols-2 flex-wrap gap-x-6 gap-y-3 mt-4\">\n            {Object.keys(account).map((key) => {\n              return (\n                <div key={key}>\n                  <span>{`${accountInfoKeys?.[key] ?? key}`}: </span>\n                  {/* @ts-expect-error */}\n                  <span className=\"font-normal flex flex-wrap text-break\">{`${account?.[key]}`}</span>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[35%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":["__webpack_exports__","Z","dapps","param","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Card","jsx","CardTitle","className","CardContent","map","dapp","index","div","Link","href","url","legacyBehavior","a","name","InfoLayout","title","children","CardHeader","ChainType","DEFAULT_APP_METADATA","description","icons","verifyUrl","DEFAULT_PROJECT_ID","process","DEFAULT_RELAY_URL","env","NEXT_PUBLIC_WALLET_CONNECT_RELAY_URL","ClientContext","createContext","web3Modal","Web3Modal","projectId","themeMode","walletConnectVersion","ClientContextProvider","client","setClient","useState","pairings","setPairings","session","setSession","isInitializing","setIsInitializing","prevRelayerValue","useRef","accounts","setAccounts","chains","setChains","relayerRegion","setRelayerRegion","origin","setOrigin","getAppMetadata","reset","undefined","onSessionConnected","useCallback","allNamespaceAccounts","Object","values","_session","namespaces","namespace","flat","allNamespaceChains","keys","console","log","connect","requiredNamespaces","optionalNamespaces","pairing","topic","uri","approval","pairingTopic","standaloneChains","openModal","getAll","active","e","error","toast","message","closeModal","disconnect","reason","getSdkError","_subscribeToEvents","_client","on","args","params","get","updatedSession","_checkPersistedState","length","lastKeyIndex","_logClientId","clientId","core","crypto","getClientId","localStorage","setItem","createClient","claimedOrigin","getItem","Client","init","logger","relayUrl","metadata","current","err","useEffect","interval","setInterval","document","getElementById","remove","clearInterval","relayer","restartTransport","RELAYER_EVENTS","value","useMemo","jsx_runtime","Provider","mainNetClient","algosdk","testNetClient","clientForChain","chain","concat","apiGetTxnParams","getTransactionParams","do","apiSubmitTransactions","stxns","txId","sendRawTransaction","waitForTransaction","lastStatus","status","lastRound","pendingTransactionInformation","statusAfterBlock","getPayloadId","date","Date","now","Math","floor","random","formatJsonRpcRequest","method","id","jsonrpc","base64ToUint8Array","Uint8Array","from","window","atob","data","charCodeAt","encodeUnsignedTransactionInBase64","Buffer","txn","toString","getSignTxnRequestParams","txns","signerAddress","Array","isArray","flatMap","txGroup","composeTransaction","transaction","signers","includes","txnRequestParams","authAddr","msig","txGroupDetail","generateSinglePayTxn","fromAddress","toAddress","amount","note","suggestedParams","to","isEmpty","generateSingleAssetTransferTxn","assetIndex","parseInt","generateSingleAssetCloseTxn","getAssetReserve","MainNet","TestNet","closeRemainderTo","generateSingleAppOptIn","appIndex","appArgs","generateSingleAppCall","generateSingleAppCloseOut","generateSingleAppClearState","chainName","AlgoNameSpace","algorand","methods","events","AlgoNameSpaceOptional","chainTypeToChainIdMap","Example","useWalletConnectClient","context","useContext","account","setAccount","onConnectWallet","selectedWallet","provider","getAccountInfo","reference","address","split","onCommonExecute","request","requestObj","JSON","parse","response","chainId","stringify","onCommonValidate","result","signedTxns","item","sentTransaction","generateJsonRpcRequest","signTxnParams","getTokenTransferFrom","Fragment","Input","label","type","defaultValue","select","option","selected","generateSingleAssetTransferCommon","fromData","generate","getAppCallFrom","generateSingleAppCallCommon","ConnectButton","fetchWallets","Promise","resolve","onConnect","onDisconnect","code","Select","onValueChange","SelectTrigger","SelectValue","placeholder","SelectContent","SelectItem","ApiGroup","ApiPayload","onExecute","onValidate","generateRequestFrom","onGenerateRequest","parseFloat","DappList","App","accountInfoKeys","publicKey","settings","useSettings","connectDialogRef","autoConnectedRef","wallets","setWallets","setProvider","useWallet","connectWallet","wallet","_provider","accountInfo","disconnectWallet","closeDialog","setTimeout","click","connectWalletWithDialog","options","directConnection","timeout","autoConnect","clearTimeout","Dialog","DialogTrigger","asChild","Button","onClick","DialogContent","DialogClose","ref","DialogHeader","DialogTitle","logo","img","alt","src","span","tags","tag","DialogDescription","target","variant","key","DialogPrimitive","DialogPortal","DialogOverlay","React","props","cn","displayName","X"],"sourceRoot":""}