{"version":3,"file":"static/chunks/4395.2628cebbdb3ae8df.js","mappings":"sKAOe,SAASA,WAAWC,CAAoC,KAApC,CAAEC,MAAAA,CAAK,CAAEC,SAAAA,CAAQ,CAAmB,CAApCF,EACjC,MACE,GAAAG,EAAAC,IAAA,EAACC,EAAAA,EAAIA,CAAAA,WACFJ,GAAS,GAAAE,EAAAG,GAAA,EAACC,EAAAA,EAAUA,CAAAA,CAACC,UAAU,uBAAeP,IAC/C,GAAAE,EAAAG,GAAA,EAACG,EAAAA,EAAWA,CAAAA,CAACD,UAAU,mDAA2CN,MAGxE,oJCdO,IAAMQ,EAAQ,CACnB,CACEC,KAAM,UACNC,IAAK,2BACP,EACA,CACED,KAAM,QACNC,IAAK,yBACP,EACA,CACED,KAAM,UACNC,IAAK,sBACP,EACA,CACED,KAAM,YACNC,IAAK,wBACP,EACD,gDCjBDC,EAAe,CACbC,YAAa,CACX,CACEC,GAAI,oBACJJ,KAAM,iBACNK,MAAO,0BACT,EACA,CACED,GAAI,cACJJ,KAAM,cACNK,MAAO,QACT,EACD,CACDC,oBAAqB,CACnB,CACEF,GAAI,4BACJJ,KAAM,4BACNK,MAAO,0BACT,EACA,CACED,GAAI,sBACJJ,KAAM,sBACNK,MAAO,QACT,EACD,CACDE,gBAAiB,GAAqB,CACpC,CACEH,GAAI,kBACJJ,KAAM,kBACNK,MAAOG,KAAKC,SAAS,CAAC,CACpBC,KAAMC,EACNC,GAAID,EACJE,OAAQ,GACV,EACF,EACD,CACDC,qBAAsB,GAAqB,CACzC,CACEV,GAAI,qBACJJ,KAAM,YACNK,MAAOG,KAAKC,SAAS,CAAC,CACpBC,KAAMC,EACNC,GAAID,EACJE,OAAQ,IACRE,MAAO,gFACT,EACF,EACD,mIExCI,eAAeC,mBACpBC,CAAiB,CACjBC,CAAc,CACdC,CAAgC,EAChCC,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAmBC,EAAAA,EAAYA,CAE/B,IAAIC,EAA0B,EAAE,CAE1BC,EAAQ,MAAMN,EAAOO,QAAQ,CAAC,CAAEC,MAAOP,EAAQQ,MAAO,CAAE,EAC1DH,CAAAA,EAAMI,IAAI,CAACC,MAAM,CAAG,GACtBN,CAAAA,EAAUC,EAAMI,IAAI,CAACE,GAAG,CAAC,GAAW,EAClCC,SAAUC,EAAKC,YAAY,CAC3BC,QAASF,EAAKE,OAAO,CACrBC,OAAQH,EAAKG,MAAM,CACrB,IAGF,IAAMC,EAAKC,EAAAA,CAAWA,CAACC,QAAQ,CAAClB,GAKhC,OAJAgB,EAAGG,SAAS,CAACpB,GACbiB,EAAGI,WAAW,CAACrB,GACfiB,EAAGK,aAAa,CAAClB,GAEVa,CACT,mECgBO,SAASM,qBAAqBrB,CAAgB,EACnD,GAAIA,IAAaC,EAAAA,EAAYA,CAAE,CAC7B,GAAM,CAACqB,EAAeC,EAAQ3C,EAAK,CAAGoB,EAASwB,KAAK,CAAC,MACrD,GAAID,GAAU3C,EACZ,GAAI,CACF,MAAO,GAAwD2C,MAAAA,CAArDE,CAAAA,EAAAA,EAAAA,EAAAA,EAAoBH,GAAeI,WAAW,GAAG,MAAe9C,MAAAA,CAAX2C,EAAO,MAASI,MAAA,CAAL/C,EAC5E,CAAE,MAAAgD,EAAM,CAER,CAEJ,CACA,OAAO5B,CACT,CAEA,SAAS6B,cAAc5D,CAMtB,KANsB,CACrB6D,QAAAA,CAAO,CACPjC,OAAAA,CAAM,CAIP,CANsB5B,EAOf,CAAE8D,MAAAA,CAAK,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,IACZ,CAACC,EAAM,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,EAAQH,EAAMI,SAAS,CAAS,UAmBhD,MAjBAC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACJN,GACG,CAAC,UACJ,GAAI,CACF,IAAMO,EAAW,MAAMxC,EAAOyC,eAAe,CAAC,CAAEtC,SAAUiC,EAAMhD,KAAK,EACrE6C,OAAAA,GAAAA,EAASS,QAAQ,CACf,YACF,SAAAZ,MAAA,CAASU,MAAAA,EAAAA,KAAAA,EAAAA,EAAUzD,IAAI,CAAC,cAAA+C,MAAA,CAAYU,MAAAA,EAAAA,KAAAA,EAAAA,EAAUG,MAAM,CAAC,gBAAiCb,MAAA,CAAnBU,MAAAA,EAAAA,KAAAA,EAAAA,EAAUI,QAAQ,GAErFX,MAAAA,GAAAA,EAASS,QAAQ,CAAC,gBAAiBF,MAAAA,EAAAA,KAAAA,EAAAA,EAAUI,QAAQ,CACvD,CAAE,MAAOC,EAAO,CACdC,QAAQD,KAAK,CAACA,EAChB,CACF,IAEJ,EAAG,CAAC7C,EAAQoC,EAAMhD,KAAK,CAAE6C,EAAQ,EAE1B,GAAAc,EAAArE,GAAA,EAAAqE,EAAAC,QAAA,IACT,CAEA,SAASC,eACP,IAAMjD,EAASkD,CAAAA,EAAAA,EAAAA,EAAAA,IACTC,EAAiBC,CAAAA,EAAAA,EAAAA,CAAAA,IACjB,CAAEC,YAAaC,CAAyB,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,IAE7CC,EAAaC,CAAAA,EAAAA,EAAAA,MAAAA,EAAmB,MAChCC,EAAoBD,CAAAA,EAAAA,EAAAA,MAAAA,EAAqC,MAEzDlD,SAAW,UACf,IAAMD,EAAQ,MAAMN,EAAO2D,WAAW,CAAC,CAAEnD,MAAO2C,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBzD,OAAO,GAEjEkE,EAAYtD,EAAMI,IAAI,CAACmD,MAAM,CAAC,CAACC,EAAKhD,SAOxCgD,EANA,IAAM3D,EAAWW,EAAKX,QAAQ,CAQ9B,OANK2D,EAAIC,GAAG,CAAC5D,IACX2D,EAAIE,GAAG,CAAC7D,EAAU,EAAE,EAGdA,OAAR2D,CAAAA,EAAAA,EAAIG,GAAG,CAAC9D,EAAAA,GAAR2D,KAAAA,IAAAA,GAAAA,EAAmBI,IAAI,CAACpD,GAEjBgD,CACT,EAAG,IAAIK,KAEP,OAAOP,CACT,EAEArB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR,GAAIY,GAAkBA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBzD,OAAO,EAAE,KAC7C8D,CAAkB,QAAlBA,CAAAA,EAAAA,EAAWY,OAAO,GAAlBZ,KAAAA,IAAAA,GAAAA,EAAoBd,QAAQ,CAAC,KAAMS,EAAezD,OAAO,EACpDa,WAAW8D,IAAI,CAAC,QAQnBX,EAPA,IAAMY,EAAUC,MAAM9E,IAAI,CAACmE,EAAUY,IAAI,IAAI5D,GAAG,CAAC,GACxC,EACL6D,MAAOC,EACPtF,MAAOsF,EACPC,MAAOf,EAAUK,GAAG,CAACS,EACvB,GAEuB,QAAzBhB,CAAAA,EAAAA,EAAkBU,OAAO,GAAzBV,KAAAA,IAAAA,GAAAA,EAA2BkB,UAAU,CAACN,EACxC,EACF,CACF,EAAG,CAACnB,EAAe,EAEnB,IAAM0B,eAAiB,cAEPnB,EACHF,EACIA,EACEA,EA8CjBA,EA5BEA,EAtBF,IAAM/D,EAAO0D,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBzD,OAAO,CAC9BoF,EAAAA,OAAQpB,CAAAA,EAAAA,EAAkBU,OAAO,GAAzBV,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA2BqB,gBAAgB,GACnDpF,EAAAA,OAAK6D,CAAAA,EAAAA,EAAWY,OAAO,GAAlBZ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAoBwB,QAAQ,CAAC,MAClCpF,EAAAA,OAAS4D,CAAAA,EAAAA,EAAWY,OAAO,GAAlBZ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAoBwB,QAAQ,CAAC,UACtCpC,EAAAA,OAAWY,CAAAA,EAAAA,EAAWY,OAAO,GAAlBZ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAoBwB,QAAQ,CAAC,iBAExC7E,EAAW2E,MAAAA,EAAAA,KAAAA,EAAAA,EAAO1F,KAAK,CAEvBkB,EAAQ,CAAC,MAAMN,EAAOO,QAAQ,CAAC,CAAEC,MAAOf,EAAMU,SAAAA,EAAUM,MAAO,GAAI,IAAIC,IAAI,CAE3EuE,EAAW,IAAI9D,EAAAA,CAAWA,CAG1B+D,EAAW,IAAIC,EAAAA,CAASA,CAACvF,GAAQwF,SAAS,CAACxC,GAC3CyC,EAAiBH,EAASI,QAAQ,GACxCxC,QAAQyC,GAAG,CAAC,iBAAkBF,GAE9B,IAAMG,EAAelF,EAAMuD,MAAM,CAAC,CAACC,EAAKhD,IAC/BgD,EAAI2B,IAAI,CAAC,IAAIN,EAAAA,CAASA,CAACrE,EAAK4E,OAAO,GACzC,IAAIP,EAAAA,CAASA,CAAC,IAEjB,GAAIK,EAAaG,EAAE,CAACT,GAElB,MADkB,OAAlB1B,CAAAA,EAAAA,EAAWY,OAAO,GAAlBZ,KAAAA,IAAAA,GAAAA,EAAoBd,QAAQ,CAAC,SAAU,QACjC,MAAU,wBAGlB,GAAM,CAACkD,EAAa,GAAGC,EAAW,CAAGvF,MAAAA,EAAAA,KAAAA,EAAAA,EAAOwF,MAAM,CAChD,GAAUtE,qBAAqBV,EAAKX,QAAQ,IAAMqB,qBAAqBrB,IAGzE,GAAI2E,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAO1F,KAAK,IAAKgB,EAAAA,EAAYA,CAAE,CACjC,IAAMU,EAAOmE,EAASc,UAAU,CAACd,EAASe,GAAG,CAAE,CAACX,EAAe,EAC/DJ,EAASgB,eAAe,CAAC,CAACnF,EAAK,CAAEnB,EACnC,KAAO,CACL,IAAMuG,EAAmBjB,EAASkB,MAAM,CAACP,EAAY7E,YAAY,CAC7D8E,CAAAA,EAAWlF,MAAM,EACnBsE,EAASY,UAAU,CACjBK,EACAL,EAAWjF,GAAG,CAAC,GAAUqE,EAASkB,MAAM,CAACrF,EAAKC,YAAY,IAG9D,IAAMD,EAAOmE,EAASc,UAAU,CAACG,EAAkB,CAACb,EAAe,EACnEJ,EAASgB,eAAe,CAAC,CAACnF,EAAK,CAAEnB,GACjCsF,EAAS5D,SAAS,CAAC5B,EACrB,CAEA,IAAM2G,EAAe,MAAM9C,EAA0B,CACnD+C,YAAapB,EACbqB,QAASnD,CACX,EACkB,QAAlBK,CAAAA,EAAAA,EAAWY,OAAO,GAAlBZ,KAAAA,IAAAA,GAAAA,EAAoBd,QAAQ,CAAC,SAAUnD,KAAKC,SAAS,CAAC4G,GACxD,EAEA,MACE,GAAArD,EAAAvE,IAAA,EAAC+H,EAAAA,CAAOA,CAAAA,CAAClI,MAAM,uBAAuBmI,YAAY,OAAOC,IAAKjD,YAC5D,GAAAT,EAAArE,GAAA,EAAC6H,EAAAA,CAAOA,CAACG,QAAQ,EACfvH,GAAG,QACHsF,MAAM,OACNkC,YAAY,QACZC,SAAQ,GACRH,IAAK/C,IAEP,GAAAX,EAAArE,GAAA,EAAC6H,EAAAA,CAAOA,CAACM,IAAI,EAAC1H,GAAG,YAAY2H,KAAK,SAClC,GAAA/D,EAAArE,GAAA,EAAC6H,EAAAA,CAAOA,CAACM,IAAI,EAAC1H,GAAG,gBAAgB2H,KAAK,OAAOC,OAAM,KACnD,GAAAhE,EAAArE,GAAA,EAACsD,cAAAA,CAAcC,QAASuB,EAAWY,OAAO,CAAEpE,OAAQA,IACpD,GAAA+C,EAAArE,GAAA,EAAC6H,EAAAA,CAAOA,CAACS,KAAK,EAAC7H,GAAG,KAAKsF,MAAM,KAAKkC,YAAY,YAC9C,GAAA5D,EAAArE,GAAA,EAAC6H,EAAAA,CAAOA,CAACS,KAAK,EAAC7H,GAAG,SAASsF,MAAM,OAAOwC,aAAa,WACrD,GAAAlE,EAAArE,GAAA,EAAC6H,EAAAA,CAAOA,CAACW,MAAM,EACb/H,GAAG,WACHsF,MAAM,WACN0C,QAAStC,eACTuC,0BAA2B,CAAC,CAAEC,SAAU,CAAC,QAAS,KAAM,SAAS,EAAG,GAEtE,GAAAtE,EAAArE,GAAA,EAAC6H,EAAAA,CAAOA,CAACe,kBAAkB,EAACnI,GAAG,aAGrC,CAEA,SAASoI,cAoC8BpE,EACDA,EACCA,EACGqE,EACOA,EAEGA,EAzClD,IAAMxH,EAASkD,CAAAA,EAAAA,EAAAA,EAAAA,IACT,CAAEuE,YAAAA,CAAW,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,IAEPC,CAAAA,EAAAA,EAAAA,EAAAA,IACFC,CAAAA,EAAAA,EAAAA,EAAAA,IAEf,IAAMzE,EAAiBC,CAAAA,EAAAA,EAAAA,CAAAA,IACjB,CAAEoE,cAAAA,CAAa,CAAEK,iBAAAA,CAAgB,CAAEC,YAAAA,CAAW,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,IAEnD,CAAE1E,YAAa2E,CAAO,CAAE,CAAGJ,CAAAA,EAAAA,EAAAA,EAAAA,IAC3B,CAAEvE,YAAa/D,CAAe,CAAE,CAAG2I,CAAAA,EAAAA,EAAAA,EAAAA,IACnC,CAAE5E,YAAaC,CAAyB,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,IAC7C,CAAEF,YAAahE,CAAmB,CAAE,CAAG6I,CAAAA,EAAAA,EAAAA,EAAAA,IACvC,CAAE7E,YAAanE,CAAW,CAAE,CAAGiJ,cFxMR,CAC7BC,YAAAA,CAAW,CACX,GAAGC,EAC2B,CAHDC,UAAA3H,MAAA,IAAA2H,KAAA,IAAAA,SAAA,IAAAA,SAAA,IAGI,CAAC,EAK5B,CAAEd,cAAAA,CAAa,CAAE,CAAGO,CAAAA,EAAAA,EAAAA,EAAAA,IACpB5E,EAAiBC,CAAAA,EAAAA,EAAAA,CAAAA,IAEvB,MAAOmF,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,CACjBH,YAAa,CAAC,SAAU,eAAe,CACvCI,WAAY,MAAOC,QAKKA,EAJtB,GAAI,CAACjB,EACH,MAAM,MAAU,2BAGlB,IAAMkB,EAAgBD,OAAAA,CAAAA,EAAAA,EAAgBnC,OAAO,GAAvBmC,KAAAA,IAAAA,EAAAA,EAA2BtF,EACjD,GAAI,CAACuF,EACH,MAAM,MAAU,oEAIlB,IAAMC,EAAqBnB,EAAcoB,QAAQ,CAAC,kBAAkB,CACpE,GAAID,EAAoB,CACtB7F,QAAQ+F,IAAI,CACV,mGAIF,GAAM,CAAEC,aAAAA,CAAY,CAAEC,UAAAA,CAAS,CAAE,CAAG,MAAMJ,EAAmBzJ,WAAW,CAAC,CACvE,GAAGuJ,CAAe,CAClBnC,QAASoC,CACX,GACA,MAAO,CAAEM,MAAOF,EAAcC,UAAAA,CAAU,CAC1C,CAEA,MAAM,MAAU,iEAClB,EACA,GAAGV,CAAe,EAEtB,IE+JQ,CAAEhF,YAAa4F,CAAU,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,IAEpC3G,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACJuF,GAAe3E,EACjBsE,EAAY,IAEZA,EAAY,GAEhB,EAAG,CAACK,EAAa3E,EAAgBsE,EAAY,EAE7C,IAAM0B,EAAkCC,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,SAChBjG,EAA9B,OAAOlE,EAAOK,eAAe,CAAC6D,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBzD,OAAO,GAAvByD,KAAAA,IAAAA,EAAAA,EAA2B,GAC3D,EAAG,CAACA,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBzD,OAAO,CAAC,EAEtB2J,EAA6BD,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,SACNjG,EAAnC,OAAOlE,EAAOY,oBAAoB,CAACsD,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBzD,OAAO,GAAvByD,KAAAA,IAAAA,EAAAA,EAA2B,GAChE,EAAG,CAACA,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBzD,OAAO,CAAC,EAE5B,MACE,GAAAqD,EAAAvE,IAAA,EAAAuE,EAAAC,QAAA,YACE,GAAAD,EAAAvE,IAAA,EAACL,EAAAA,CAAUA,CAAAA,CAACE,MAAM,sBACf8E,GAAkB,GAAAJ,EAAAvE,IAAA,EAAC8K,IAAAA,WAAE,WAASnG,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBzD,OAAO,GAAvByD,KAAAA,IAAAA,EAAAA,EAA2B,MACzDA,GAAkB,GAAAJ,EAAAvE,IAAA,EAAC8K,IAAAA,WAAE,UAAQnG,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBoG,SAAS,GAAzBpG,KAAAA,IAAAA,EAAAA,EAA6B,MAC1DA,GAAkB,GAAAJ,EAAAvE,IAAA,EAAC8K,IAAAA,WAAE,WAASnG,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBqG,MAAM,GAAtBrG,KAAAA,IAAAA,EAAAA,EAA0B,MACxDqE,GAAiB,GAAAzE,EAAAvE,IAAA,EAAC8K,IAAAA,WAAE,eAAa9B,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAezI,IAAI,GAAnByI,KAAAA,IAAAA,EAAAA,EAAuB,MACxDA,GAAiB,GAAAzE,EAAAvE,IAAA,EAAC8K,IAAAA,WAAE,sBAAoB9B,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAexG,OAAO,GAAtBwG,KAAAA,IAAAA,EAAAA,EAA0B,MAClEA,GACC,GAAAzE,EAAAvE,IAAA,EAAC8K,IAAAA,WAAE,0BAAwB/J,KAAKC,SAAS,CAACgI,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAegC,MAAM,GAArBhC,KAAAA,IAAAA,EAAAA,EAAyB,OAEpEA,GACC,GAAAzE,EAAAvE,IAAA,EAAC8K,IAAAA,WAAE,gBACY,GAAAvG,EAAArE,GAAA,EAAC+K,MAAAA,CAAIC,IAAKlC,MAAAA,EAAAA,KAAAA,EAAAA,EAAemC,IAAI,MAG7C9B,GAAoB,GAAA9E,EAAAvE,IAAA,EAAC8K,IAAAA,WAAE,WAASzB,QAGnC,GAAA9E,EAAArE,GAAA,EAACkL,EAAAA,CAAQA,CAAAA,CAACvL,MAAM,uBA4Bd,GAAA0E,EAAArE,GAAA,EAACmL,EAAAA,CAAUA,CAAAA,CACTxL,MAAM,sBACNmI,YAAY,qHACZsD,iBAAkB7K,EAAOI,mBAAmB,CAC5C0K,UAAW,MAAOC,IAChB,IAAM5D,EAAM,MAAM/G,EAAoB,CACpC4K,QAASC,CAAAA,EAAAA,EAAAA,EAAAA,EAAWF,GACpB1D,QAASnD,CACX,GACA,OAAO5D,KAAKC,SAAS,CAAC4G,EACxB,EACA+D,WAAY,MAAOH,EAAiBI,KAClC,GAAM,CACJpB,MAAAA,CAAK,CACLD,UAAAA,CAAS,CACV,CAGGxJ,KAAK8K,KAAK,CAACD,GAETb,EAAY,MAAMe,CAAAA,EAAAA,EAAAA,EAAAA,EACtBC,EAAO9K,IAAI,CAACuJ,EAAO,UACnBD,GAGF,MAAO,CAAC5F,EAAezD,OAAO,GAAK6J,EAAUiB,YAAY,IAAIlF,QAAQ,EACvE,MAGJ,GAAAvC,EAAAvE,IAAA,EAACoL,EAAAA,CAAQA,CAAAA,CAACvL,MAAM,wBACd,GAAA0E,EAAArE,GAAA,EAACmL,EAAAA,CAAUA,CAAAA,CACTxL,MAAM,uBACNmI,YAAY,OACZsD,iBAAkBX,EAClBY,UAAW,MAAOC,IAChB,GAAM,CACJvK,KAAAA,CAAI,CACJE,GAAAA,CAAE,CACFC,OAAAA,CAAM,CACP,CAIGL,KAAK8K,KAAK,CAACL,GAET/E,EAAW,IAAI9D,EAAAA,CAAWA,CAC1B,CAACL,EAAK,CAAGmE,EAASc,UAAU,CAACd,EAASe,GAAG,CAAE,CAACpG,EAAO,EACzDqF,EAASgB,eAAe,CAAC,CAACnF,EAAK,CAAEnB,GAEjC,IAAMuB,EAAK,MAAMnB,mBACfC,EACAP,EACA,MAAMwF,EAASwF,KAAK,CAAC,CACnBzK,OAAAA,EACA0K,oBAAqB,EACvB,IAGItE,EAAe,MAAM9G,EAAgB,CACzC+G,YAAanF,EACboF,QAASnD,CACX,GACA,OAAO5D,KAAKC,SAAS,CAAC4G,EACxB,EACA+D,WAAY,MAAOH,EAAiBI,KAClC,GAAM,CACJO,sBAAAA,CAAqB,CACrB5B,UAAAA,CAAS,CACV,CAGGxJ,KAAK8K,KAAK,CAACD,GACTb,EAAY,MAAMqB,CAAAA,EAAAA,EAAAA,EAAAA,EACtBL,EAAO9K,IAAI,CAACkL,EAAuB,UACnC5B,GAGF,MAAO,CAAC5F,EAAezD,OAAO,GAAK6J,EAAUiB,YAAY,IAAIlF,QAAQ,EACvE,IAGF,GAAAvC,EAAArE,GAAA,EAACmL,EAAAA,CAAUA,CAAAA,CACTxL,MAAM,iCACNmI,YAAY,UACZsD,iBAAkBX,EAClBY,UAAW,MAAOC,IAChB,GAAM,CACJvK,KAAAA,CAAI,CACJE,GAAAA,CAAE,CACFC,OAAAA,CAAM,CACP,CAIGL,KAAK8K,KAAK,CAACL,GAET/E,EAAW,IAAI9D,EAAAA,CAAWA,CAChC8D,EAAS5D,SAAS,CAAC5B,GACnB,GAAM,CAACqB,EAAK,CAAGmE,EAASc,UAAU,CAACd,EAASe,GAAG,CAAE,CAACpG,EAAO,EACzDqF,EAASgB,eAAe,CAAC,CAACnF,EAAK,CAAEnB,GAEjC,IAAMuB,EAAK,MAAMnB,mBACfC,EACAP,EACA,MAAMwF,EAASwF,KAAK,CAAC,CACnBzK,OAAAA,EACA0K,oBAAqB,EACvB,IAGItE,EAAe,MAAM9C,EAA0B,CACnD+C,YAAanF,EACboF,QAASnD,CACX,GACA,OAAO5D,KAAKC,SAAS,CAAC4G,EACxB,IAGF,GAAArD,EAAArE,GAAA,EAACmL,EAAAA,CAAUA,CAAAA,CACTxL,MAAM,uBACNmI,YAAY,gCACZsD,iBAAkBX,EAClBY,UAAW,MAAOC,IAChB,GAAM,CACJvK,KAAAA,CAAI,CACJE,GAAAA,CAAE,CACFC,OAAAA,CAAM,CACP,CAIGL,KAAK8K,KAAK,CAACL,GAET/E,EAAW,IAAI9D,EAAAA,CAAWA,CAC1B,CAACL,EAAK,CAAGmE,EAASc,UAAU,CAACd,EAASe,GAAG,CAAE,CAACpG,EAAO,EACzDqF,EAASgB,eAAe,CAAC,CAACnF,EAAK,CAAEnB,GAEjC,IAAMuB,EAAK,MAAMnB,mBACfC,EACAP,EACA,MAAMwF,EAASwF,KAAK,CAAC,CACnBzK,OAAAA,EACA0K,oBAAqB,EACvB,GAIFxJ,CAAAA,EAAG2J,MAAM,CAAG,IAAM,MAElB3J,EAAG4J,KAAK,CAAG,IAAM,MAEjB5J,EAAG6J,MAAM,CAAG,IAAM,MAElB7J,EAAG8J,QAAQ,CAAG,IAAM,QAEpB,IAAM5E,EAAe,MAAM9G,EAAgB,CACzC+G,YAAanF,EACboF,QAASnD,CACX,GACA,OAAO5D,KAAKC,SAAS,CAAC4G,EACxB,EACA+D,WAAY,MAAOH,EAAiBI,KAClC,GAAM,CACJO,sBAAAA,CAAqB,CACrB5B,UAAAA,CAAS,CACV,CAGGxJ,KAAK8K,KAAK,CAACD,GACTb,EAAY,MAAMqB,CAAAA,EAAAA,EAAAA,EAAAA,EACtBL,EAAO9K,IAAI,CAACkL,EAAuB,UACnC5B,GAGF,MAAO,CAAC5F,EAAezD,OAAO,GAAK6J,EAAUiB,YAAY,IAAIlF,QAAQ,EACvE,IAEF,GAAAvC,EAAArE,GAAA,EAACmL,EAAAA,CAAUA,CAAAA,CACTxL,MAAM,8BACNmI,YAAY,aACZsD,iBAAkBT,EAClBU,UAAW,MAAOC,IAChB,GAAM,CAAEvK,KAAAA,CAAI,CAAEE,GAAAA,CAAE,CAAEC,OAAAA,CAAM,CAAEE,MAAAA,CAAK,CAAE,CAAGP,KAAK8K,KAAK,CAACL,GAOzC/E,EAAW,IAAI9D,EAAAA,CAAWA,CAChC8D,EAAS5D,SAAS,CAAC5B,GAEnB,GAAM,CAAEiB,KAAMJ,CAAK,CAAE,CAAG,MAAMN,EAAOO,QAAQ,CAAC,CAC5CC,MAAOf,EACPU,SAAUL,CACZ,GAEA,GAAI,CAACQ,EAAMK,MAAM,CACf,MAAM,MAAU,uBAGlB,GAAM,CAACG,EAAK,CAAGmE,EAASc,UAAU,CAACd,EAASkB,MAAM,CAAC7F,CAAK,CAAC,EAAE,CAACS,YAAY,EAAG,CAACnB,EAAO,EACnFqF,EAASgB,eAAe,CAAC,CAACnF,EAAK,CAAEnB,GAEjC,IAAMuB,EAAK,MAAMnB,mBACfC,EACAP,EACA,MAAMwF,EAASwF,KAAK,CAAC,CACnBzK,OAAAA,EACA0K,oBAAqB,EACvB,IAGItE,EAAM,MAAM9G,EAAgB,CAChC+G,YAAanF,EACboF,QAASnD,CACX,GACA,OAAO5D,KAAKC,SAAS,CAAC4G,EACxB,EACA+D,WAAY,MAAOH,EAAiBI,KAClC,GAAM,CAAEO,sBAAAA,CAAqB,CAAE5B,UAAAA,CAAS,CAAE,CAAGxJ,KAAK8K,KAAK,CAACD,GAIlDb,EAAY,MAAMqB,CAAAA,EAAAA,EAAAA,EAAAA,EACtBL,EAAO9K,IAAI,CAACkL,EAAuB,UACnC5B,GAGF,MAAO,CACLkC,CAAAA,EAAAA,EAAAA,EAAAA,EAAW,IAAIC,WAAW/H,EAAeoG,SAAS,KAClD0B,CAAAA,EAAAA,EAAAA,EAAAA,EAAW1B,EAAU4B,UAAU,KAC/B7F,QAAQ,EACZ,IAGF,GAAAvC,EAAArE,GAAA,EAACmL,EAAAA,CAAUA,CAAAA,CACTxL,MAAM,wCACNmI,YAAY,gBACZsD,iBAAkBT,EAClBU,UAAW,MAAOC,IAChB,GAAM,CAAEvK,KAAAA,CAAI,CAAEE,GAAAA,CAAE,CAAEC,OAAAA,CAAM,CAAEE,MAAAA,CAAK,CAAE,CAAGP,KAAK8K,KAAK,CAACL,GAOzC/E,EAAW,IAAI9D,EAAAA,CAAWA,CAChC8D,EAAS5D,SAAS,CAAC5B,GAEnB,GAAM,CAAEiB,KAAMJ,CAAK,CAAE,CAAG,MAAMN,EAAOO,QAAQ,CAAC,CAC5CC,MAAOf,EACPU,SAAUL,CACZ,GAEA,GAAI,CAACQ,EAAMK,MAAM,CACf,MAAM,MAAU,uBAGlB,GAAM,CAACG,EAAK,CAAGmE,EAASc,UAAU,CAACd,EAASkB,MAAM,CAAC7F,CAAK,CAAC,EAAE,CAACS,YAAY,EAAG,CAACnB,EAAO,EACnFqF,EAASgB,eAAe,CAAC,CAACnF,EAAK,CAAEnB,GAEjC,IAAMuB,EAAK,MAAMnB,mBACfC,EACAP,EACA,MAAMwF,EAASwF,KAAK,CAAC,CACnBzK,OAAAA,EACA0K,oBAAqB,EACvB,IAGItE,EAAM,MAAM9C,EAA0B,CAC1C+C,YAAanF,EACboF,QAASnD,CACX,GAEA,OAAO5D,KAAKC,SAAS,CAAC4G,EACxB,OAIJ,GAAArD,EAAArE,GAAA,EAACkL,EAAAA,CAAQA,CAAAA,CAACvL,MAAM,gBACd,GAAA0E,EAAArE,GAAA,EAACuE,aAAAA,CAAAA,KAGH,GAAAF,EAAArE,GAAA,EAAC0M,EAAAA,CAAQA,CAAAA,CAACtM,MAAOA,MAGvB,CAEA,IAAMuM,EAAc,IAAIC,EAAAA,CAAWA,CAE7B,CAAEC,cAAAA,CAAa,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,EAAoB,CAC5CC,QAAS,CAAEzM,IAAK0M,CAAAA,EAAAA,EAAAA,CAAAA,EAAe,UAAW,EAC1CC,QAAS,CAAE3M,IAAK0M,CAAAA,EAAAA,EAAAA,CAAAA,EAAe,UAAW,CAC5C,GAEe,SAASE,MACtB,GAAM,CAACC,EAAeC,EAAiB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,WAEnD,MACE,GAAAhJ,EAAArE,GAAA,EAACsN,EAAAA,EAAmBA,CAAAA,CAAChM,OAAQqL,WAC3B,GAAAtI,EAAArE,GAAA,EAACuN,EAAAA,EAAiBA,CAAAA,CAChBC,SAAUX,EAEVY,QAASN,EACTO,gBAAiB,IACfN,EAAiBK,EACnB,WAEA,GAAApJ,EAAAvE,IAAA,EAAC6N,EAAAA,EAAcA,CAAAA,CAACC,mBAAkB,GAACC,YAAW,aAC5C,GAAAxJ,EAAArE,GAAA,EAAC8N,EAAAA,EAAaA,CAAAA,CAAAA,GACd,GAAAzJ,EAAArE,GAAA,EAAC6I,QAAAA,CAAAA,SAKX","sources":["webpack://_N_E/./components/InfoLayout.tsx","webpack://_N_E/./components/chains/suiStandard/dapps.config.ts","webpack://_N_E/./components/chains/suiStandard/params.ts","webpack://_N_E/./components/chains/suiStandard/useSignMessage.tsx","webpack://_N_E/./components/chains/suiStandard/utils.ts","webpack://_N_E/./components/chains/suiStandard/example.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { Card, CardContent, CardHeader } from './ui/card';\n\nexport type InfoLayoutProps = {\n  title?: string;\n  children?: React.ReactNode;\n};\n\nexport default function InfoLayout({ title, children }: InfoLayoutProps) {\n  return (\n    <Card>\n      {title && <CardHeader className=\"font-medium\">{title}</CardHeader>}\n      <CardContent className=\"flex flex-col flex-wrap gap-3 break-all\">{children}</CardContent>\n    </Card>\n  );\n}\n","export const dapps = [\n  {\n    name: 'Bluefin',\n    url: 'https://trade.bluefin.io/',\n  },\n  {\n    name: 'Cetus',\n    url: 'https://app.cetus.zone/',\n  },\n  {\n    name: 'SuiSwap',\n    url: 'https://suiswap.app/',\n  },\n  {\n    name: 'Sui Names',\n    url: 'https://sui-names.com/',\n  },\n];\n","export default {\n  signMessage: [\n    {\n      id: 'signMessage hello',\n      name: 'signData Hello',\n      value: '48656c6c6f204f6e654b6579',\n    },\n    {\n      id: 'signMessage',\n      name: 'signMessage',\n      value: '010203',\n    },\n  ],\n  signPersonalMessage: [\n    {\n      id: 'signPersonalMessage hello',\n      name: 'signPersonalMessage Hello',\n      value: '48656c6c6f204f6e654b6579',\n    },\n    {\n      id: 'signPersonalMessage',\n      name: 'signPersonalMessage',\n      value: '010203',\n    },\n  ],\n  signTransaction: (address: string) => [\n    {\n      id: 'signTransaction',\n      name: 'signTransaction',\n      value: JSON.stringify({\n        from: address,\n        to: address,\n        amount: 100000,\n      }),\n    },\n  ],\n  signTokenTransaction: (address: string) => [\n    {\n      id: 'signUSDCransaction',\n      name: 'USDC_TYPE',\n      value: JSON.stringify({\n        from: address,\n        to: address,\n        amount: 1000, // 0.000001 USD\n        token: '0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN'      \n      }),\n    },\n  ],\n};\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useCurrentAccount, useCurrentWallet } from '@mysten/dapp-kit';\nimport type {\n  SuiSignPersonalMessageInput,\n  SuiSignPersonalMessageOutput,\n} from '@mysten/wallet-standard';\nimport type { UseMutationOptions, UseMutationResult } from '@tanstack/react-query';\nimport { useMutation } from '@tanstack/react-query';\n\ntype UseSignMessageArgs = Partial<SuiSignPersonalMessageInput>;\n\ntype UseSignMessageResult = SuiSignPersonalMessageOutput;\n\ntype UseSignMessageError = Error;\n\ntype UseSignMessageMutationOptions = Omit<\n  UseMutationOptions<UseSignMessageResult, UseSignMessageError, UseSignMessageArgs, unknown>,\n  'mutationFn'\n>;\n\n/**\n * Mutation hook for prompting the user to sign a message.\n */\nexport function useSignMessage({\n  mutationKey,\n  ...mutationOptions\n}: UseSignMessageMutationOptions = {}): UseMutationResult<\n  UseSignMessageResult,\n  UseSignMessageError,\n  UseSignMessageArgs\n> {\n  const { currentWallet } = useCurrentWallet();\n  const currentAccount = useCurrentAccount();\n\n  return useMutation({\n    mutationKey: ['wallet', 'sign-message'],\n    mutationFn: async (signMessageArgs) => {\n      if (!currentWallet) {\n        throw new Error('No wallet is connected.');\n      }\n\n      const signerAccount = signMessageArgs.account ?? currentAccount;\n      if (!signerAccount) {\n        throw new Error('No wallet account is selected to sign the personal message with.');\n      }\n\n      // TODO: Remove this once we officially discontinue sui:signMessage in the wallet standard\n      const signMessageFeature = currentWallet.features['sui:signMessage'];\n      if (signMessageFeature) {\n        console.warn(\n          \"This wallet doesn't support the `signPersonalMessage` feature... falling back to `signMessage`.\",\n        );\n\n        // @ts-expect-error\n        const { messageBytes, signature } = await signMessageFeature.signMessage({\n          ...signMessageArgs,\n          account: signerAccount,\n        });\n        return { bytes: messageBytes, signature };\n      }\n\n      throw new Error(\"This wallet doesn't support the `signPersonalMessage` feature.\");\n    },\n    ...mutationOptions,\n  });\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SuiObjectRef, SuiClient } from '@mysten/sui/client';\nimport { SUI_TYPE_ARG } from '@mysten/sui/utils';\nimport { Transaction } from '@mysten/sui/transactions';\nimport type { CoinStruct } from '@mysten/sui/client';\nexport async function sponsorTransaction(\n  client: SuiClient,\n  sender: string,\n  transactionKindBytes: Uint8Array,\n  coinType: string = SUI_TYPE_ARG,\n) {\n  let payment: SuiObjectRef[] = [];\n\n  const coins = await client.getCoins({ owner: sender, limit: 1 });\n  if (coins.data.length > 0) {\n    payment = coins.data.map((coin) => ({\n      objectId: coin.coinObjectId,\n      version: coin.version,\n      digest: coin.digest,\n    }));\n  }\n\n  const tx = Transaction.fromKind(transactionKindBytes);\n  tx.setSender(sender);\n  tx.setGasOwner(sender);\n  tx.setGasPayment(payment);\n\n  return tx;\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable no-unsafe-optional-chaining */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { dapps } from './dapps.config';\nimport { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { hexToBytes, bytesToHex } from '@noble/hashes/utils';\nimport { useWallet } from '../../../components/connect/WalletContext';\nimport DappList from '../../../components/DAppList';\nimport params from './params';\nimport { getFullnodeUrl } from '@mysten/sui/client';\nimport { SUI_TYPE_ARG, normalizeSuiAddress } from '@mysten/sui/utils';\nimport type { CoinStruct, SuiClient } from '@mysten/sui/client';\n\nimport {\n  ConnectButton,\n  useCurrentAccount,\n  useSignTransaction,\n  useSignAndExecuteTransaction,\n  useSignPersonalMessage,\n  useSuiClient,\n  useWallets,\n  useDisconnectWallet,\n  useConnectWallet,\n  useCurrentWallet,\n  useAccounts,\n  WalletProvider,\n  SuiClientProvider,\n  createNetworkConfig,\n} from '@mysten/dapp-kit';\nimport InfoLayout from '../../../components/InfoLayout';\nimport { Transaction } from '@mysten/sui/transactions';\nimport { verifyPersonalMessageSignature, verifyTransactionSignature } from '@mysten/sui/verify';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport '@mysten/dapp-kit/dist/index.css';\nimport { useSignMessage } from './useSignMessage';\nimport { ApiGroup, ApiPayload } from '../../ApiActuator';\nimport { sponsorTransaction } from './utils';\nimport { ApiComboboxRef, ApiForm, ApiFormRef } from '../../ApiForm';\nimport BigNumber from 'bignumber.js';\nimport { useAtom } from 'jotai';\nimport { useFormContext } from '../../ApiForm/hooks/useFormContext';\n\nexport function normalizeSuiCoinType(coinType: string): string {\n  if (coinType !== SUI_TYPE_ARG) {\n    const [normalAddress, module, name] = coinType.split('::');\n    if (module && name) {\n      try {\n        return `${normalizeSuiAddress(normalAddress).toLowerCase()}::${module}::${name}`;\n      } catch {\n        // pass\n      }\n    }\n  }\n  return coinType;\n}\n\nfunction AssetInfoView({\n  viewRef,\n  client,\n}: {\n  viewRef: ApiFormRef | undefined;\n  client: SuiClient;\n}) {\n  const { store } = useFormContext();\n  const [field] = useAtom(store.fieldAtom<string>('asset'));\n\n  useEffect(() => {\n    if (viewRef) {\n      void (async () => {\n        try {\n          const coinInfo = await client.getCoinMetadata({ coinType: field.value });\n          viewRef?.setValue(\n            'assetInfo',\n          `name: ${coinInfo?.name}, symbol: ${coinInfo?.symbol}, decimals: ${coinInfo?.decimals}`,\n          );\n          viewRef?.setValue('assetDecimals', coinInfo?.decimals);\n        } catch (error) {\n          console.error(error);\n        }\n      })();\n    }\n  }, [client, field.value, viewRef]);\n\n  return <></>;\n}\n\nfunction TransferForm() {\n  const client = useSuiClient();\n  const currentAccount = useCurrentAccount();\n  const { mutateAsync: signAndExecuteTransaction } = useSignAndExecuteTransaction();\n\n  const apiFromRef = useRef<ApiFormRef>(null);\n  const assetsComboboxRef = useRef<ApiComboboxRef<CoinStruct[]>>(null);\n\n  const getCoins = async () => {\n    const coins = await client.getAllCoins({ owner: currentAccount?.address });\n\n    const coinTypes = coins.data.reduce((acc, coin) => {\n      const coinType = coin.coinType;\n\n      if (!acc.has(coinType)) {\n        acc.set(coinType, []);\n      }\n\n      acc.get(coinType)?.push(coin);\n\n      return acc;\n    }, new Map<string, CoinStruct[]>());\n\n    return coinTypes;\n  };\n\n  useEffect(() => {\n    if (currentAccount && currentAccount?.address) {\n      apiFromRef.current?.setValue('to', currentAccount.address);\n      void getCoins().then((coinTypes) => {\n        const options = Array.from(coinTypes.keys()).map((key) => {\n          return {\n            label: key,\n            value: key,\n            extra: coinTypes.get(key),\n          };\n        });\n        assetsComboboxRef.current?.setOptions(options);\n      });\n    }\n  }, [currentAccount]);\n\n  const handleTransfer = async () => {\n    const from = currentAccount?.address;\n    const asset = assetsComboboxRef.current?.getCurrentOption();\n    const to = apiFromRef.current?.getValue('to');\n    const amount = apiFromRef.current?.getValue('amount');\n    const decimals = apiFromRef.current?.getValue('assetDecimals');\n\n    const coinType = asset?.value;\n\n    const coins = (await client.getCoins({ owner: from, coinType, limit: 100 })).data;\n\n    const transfer = new Transaction();\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const amountBN = new BigNumber(amount).shiftedBy(decimals);\n    const amountBNString = amountBN.toString();\n    console.log('amountBNString', amountBNString);\n\n    const totalBalance = coins.reduce((acc, coin) => {\n      return acc.plus(new BigNumber(coin.balance));\n    }, new BigNumber(0));\n\n    if (totalBalance.lt(amountBN)) {\n      apiFromRef.current?.setValue('result', '余额不足');\n      throw new Error('Insufficient balance');\n    }\n\n    const [primaryCoin, ...mergeCoins] = coins?.filter(\n      (coin) => normalizeSuiCoinType(coin.coinType) === normalizeSuiCoinType(coinType),\n    );\n\n    if (asset?.value === SUI_TYPE_ARG) {\n      const coin = transfer.splitCoins(transfer.gas, [amountBNString]);\n      transfer.transferObjects([coin], to);\n    } else {\n      const primaryCoinInput = transfer.object(primaryCoin.coinObjectId);\n      if (mergeCoins.length) {\n        transfer.mergeCoins(\n          primaryCoinInput,\n          mergeCoins.map((coin) => transfer.object(coin.coinObjectId)),\n        );\n      }\n      const coin = transfer.splitCoins(primaryCoinInput, [amountBNString]);\n      transfer.transferObjects([coin], to);\n      transfer.setSender(from);\n    }\n\n    const res: unknown = await signAndExecuteTransaction({\n      transaction: transfer,\n      account: currentAccount,\n    });\n    apiFromRef.current?.setValue('result', JSON.stringify(res));\n  };\n\n  return (\n    <ApiForm title=\"测试 Native & Token 转账\" description=\"测试转账\" ref={apiFromRef}>\n      <ApiForm.Combobox\n        id=\"asset\"\n        label=\"选择资产\"\n        placeholder=\"请选择资产\"\n        required\n        ref={assetsComboboxRef}\n      />\n      <ApiForm.Text id=\"assetInfo\" type=\"info\" />\n      <ApiForm.Text id=\"assetDecimals\" type=\"info\" hidden />\n      <AssetInfoView viewRef={apiFromRef.current} client={client} />\n      <ApiForm.Field id=\"to\" label=\"to\" placeholder=\"请输入转账地址\" />\n      <ApiForm.Field id=\"amount\" label=\"转账金额\" defaultValue=\"0.0001\" />\n      <ApiForm.Button\n        id=\"transfer\"\n        label=\"transfer\"\n        onClick={handleTransfer}\n        availableDependencyFields={[{ fieldIds: ['asset', 'to', 'amount'] }]}\n      />\n      <ApiForm.AutoHeightTextArea id=\"result\" />\n    </ApiForm>\n  );\n}\n\nfunction Example() {\n  const client = useSuiClient();\n  const { setProvider } = useWallet();\n\n  const accounts = useAccounts();\n  const wallet = useConnectWallet();\n\n  const currentAccount = useCurrentAccount();\n  const { currentWallet, connectionStatus, isConnected } = useCurrentWallet();\n\n  const { mutateAsync: connect } = useConnectWallet();\n  const { mutateAsync: signTransaction } = useSignTransaction();\n  const { mutateAsync: signAndExecuteTransaction } = useSignAndExecuteTransaction();\n  const { mutateAsync: signPersonalMessage } = useSignPersonalMessage();\n  const { mutateAsync: signMessage } = useSignMessage();\n  const { mutateAsync: disconnect } = useDisconnectWallet();\n\n  useEffect(() => {\n    if (isConnected && currentAccount) {\n      setProvider(true);\n    } else {\n      setProvider(false);\n    }\n  }, [isConnected, currentAccount, setProvider]);\n\n  const signTransactionPresupposeParams = useMemo(() => {\n    return params.signTransaction(currentAccount?.address ?? '');\n  }, [currentAccount?.address]);\n\n  const signTokenTransactionParams = useMemo(() => {\n    return params.signTokenTransaction(currentAccount?.address ?? '');\n  }, [currentAccount?.address]);\n\n  return (\n    <>\n      <InfoLayout title=\"Base Info\">\n        {currentAccount && <p>Account:{currentAccount?.address ?? ''}</p>}\n        {currentAccount && <p>PubKey:{currentAccount?.publicKey ?? ''}</p>}\n        {currentAccount && <p>ChainId:{currentAccount?.chains ?? ''}</p>}\n        {currentWallet && <p>Wallet Name:{currentWallet?.name ?? ''}</p>}\n        {currentWallet && <p>Wallet api version:{currentWallet?.version ?? ''}</p>}\n        {currentWallet && (\n          <p>Wallet Support Chains :{JSON.stringify(currentWallet?.chains ?? '')}</p>\n        )}\n        {currentWallet && (\n          <p>\n            Wallet Icon: <img src={currentWallet?.icon} />\n          </p>\n        )}\n        {connectionStatus && <p>Status :{connectionStatus}</p>}\n      </InfoLayout>\n\n      <ApiGroup title=\"SignMessage\">\n        {/* <ApiPayload\n          title=\"signMessage\"\n          description=\"签名消息, signMessage 不安全已经弃用, 目前（OneKey、Suiet、Sui Wallet、Martian） signMessage 实际实现已经变成了 signPersonalMessage\"\n          presupposeParams={params.signMessage}\n          onExecute={async (request: string) => {\n            const res = await signMessage({\n              message: hexToBytes(request),\n              account: currentAccount,\n            });\n            return JSON.stringify(res);\n          }}\n          onValidate={async (request: string, result: string) => {\n            const {\n              bytes,\n              signature,\n            }: {\n              bytes: string;\n              signature: string;\n            } = JSON.parse(result);\n\n            // const publicKey = await verifySignature(hexToBytes(request), signature);\n            const publicKey = await verifyPersonalMessage(Buffer.from(bytes, 'base64'), signature);\n\n            return (currentAccount.address === publicKey.toSuiAddress()).toString();\n          }}\n        /> */}\n\n        <ApiPayload\n          title=\"signPersonalMessage\"\n          description=\"签名消息（SDK 验证依赖网络可能会失败，可以刷新网页重试 或 稍后重试，问题上下文 https://github.com/MystenLabs/sui/issues/17912#issuecomment-2166621747）\"\n          presupposeParams={params.signPersonalMessage}\n          onExecute={async (request: string) => {\n            const res = await signPersonalMessage({\n              message: hexToBytes(request),\n              account: currentAccount,\n            });\n            return JSON.stringify(res);\n          }}\n          onValidate={async (request: string, result: string) => {\n            const {\n              bytes,\n              signature,\n            }: {\n              bytes: string;\n              signature: string;\n            } = JSON.parse(result);\n\n            const publicKey = await verifyPersonalMessageSignature(\n              Buffer.from(bytes, 'base64'),\n              signature,\n            );\n\n            return (currentAccount.address === publicKey.toSuiAddress()).toString();\n          }}\n        />\n      </ApiGroup>\n      <ApiGroup title=\"Transaction\">\n        <ApiPayload\n          title=\"signTransactionBlock\"\n          description=\"签名交易\"\n          presupposeParams={signTransactionPresupposeParams}\n          onExecute={async (request: string) => {\n            const {\n              from,\n              to,\n              amount,\n            }: {\n              from: string;\n              to: string;\n              amount: number;\n            } = JSON.parse(request);\n\n            const transfer = new Transaction();\n            const [coin] = transfer.splitCoins(transfer.gas, [amount]);\n            transfer.transferObjects([coin], to);\n\n            const tx = await sponsorTransaction(\n              client,\n              from,\n              await transfer.build({\n                client,\n                onlyTransactionKind: true,\n              }),\n            );\n\n            const res: unknown = await signTransaction({\n              transaction: tx,\n              account: currentAccount,\n            });\n            return JSON.stringify(res);\n          }}\n          onValidate={async (request: string, result: string) => {\n            const {\n              transactionBlockBytes,\n              signature,\n            }: {\n              transactionBlockBytes: string;\n              signature: string;\n            } = JSON.parse(result);\n            const publicKey = await verifyTransactionSignature(\n              Buffer.from(transactionBlockBytes, 'base64'),\n              signature,\n            );\n\n            return (currentAccount.address === publicKey.toSuiAddress()).toString();\n          }}\n        />\n\n        <ApiPayload\n          title=\"signAndExecuteTransactionBlock\"\n          description=\"签名并执行交易\"\n          presupposeParams={signTransactionPresupposeParams}\n          onExecute={async (request: string) => {\n            const {\n              from,\n              to,\n              amount,\n            }: {\n              from: string;\n              to: string;\n              amount: number;\n            } = JSON.parse(request);\n\n            const transfer = new Transaction();\n            transfer.setSender(from);\n            const [coin] = transfer.splitCoins(transfer.gas, [amount]);\n            transfer.transferObjects([coin], to);\n\n            const tx = await sponsorTransaction(\n              client,\n              from,\n              await transfer.build({\n                client,\n                onlyTransactionKind: true,\n              }),\n            );\n\n            const res: unknown = await signAndExecuteTransaction({\n              transaction: tx,\n              account: currentAccount,\n            });\n            return JSON.stringify(res);\n          }}\n        />\n\n        <ApiPayload\n          title=\"signTransactionBlock\"\n          description=\"签名交易 (特殊情况，带 clock、system 参数)\"\n          presupposeParams={signTransactionPresupposeParams}\n          onExecute={async (request: string) => {\n            const {\n              from,\n              to,\n              amount,\n            }: {\n              from: string;\n              to: string;\n              amount: number;\n            } = JSON.parse(request);\n\n            const transfer = new Transaction();\n            const [coin] = transfer.splitCoins(transfer.gas, [amount]);\n            transfer.transferObjects([coin], to);\n\n            const tx = await sponsorTransaction(\n              client,\n              from,\n              await transfer.build({\n                client,\n                onlyTransactionKind: true,\n              }),\n            );\n\n            // @ts-expect-error\n            tx.system = () => '0x5';\n            // @ts-expect-error\n            tx.clock = () => '0x6';\n            // @ts-expect-error\n            tx.random = () => '0x8';\n            // @ts-expect-error\n            tx.denyList = () => '0x403';\n\n            const res: unknown = await signTransaction({\n              transaction: tx,\n              account: currentAccount,\n            });\n            return JSON.stringify(res);\n          }}\n          onValidate={async (request: string, result: string) => {\n            const {\n              transactionBlockBytes,\n              signature,\n            }: {\n              transactionBlockBytes: string;\n              signature: string;\n            } = JSON.parse(result);\n            const publicKey = await verifyTransactionSignature(\n              Buffer.from(transactionBlockBytes, 'base64'),\n              signature,\n            );\n\n            return (currentAccount.address === publicKey.toSuiAddress()).toString();\n          }}\n        />\n        <ApiPayload\n          title=\"signTransactionBlock (USDC)\"\n          description=\"USDC代币转账签名\"\n          presupposeParams={signTokenTransactionParams}\n          onExecute={async (request: string) => {\n            const { from, to, amount, token } = JSON.parse(request) as {\n              from: string;\n              to: string;\n              amount: number;\n              token: string;\n            };\n\n            const transfer = new Transaction();\n            transfer.setSender(from);\n\n            const { data: coins } = await client.getCoins({\n              owner: from,\n              coinType: token,\n            });\n\n            if (!coins.length) {\n              throw new Error('No BUSD coins found');\n            }\n\n            const [coin] = transfer.splitCoins(transfer.object(coins[0].coinObjectId), [amount]);\n            transfer.transferObjects([coin], to);\n\n            const tx = await sponsorTransaction(\n              client,\n              from,\n              await transfer.build({\n                client,\n                onlyTransactionKind: true,\n              }),\n            );\n\n            const res = await signTransaction({\n              transaction: tx,\n              account: currentAccount,\n            });\n            return JSON.stringify(res);\n          }}\n          onValidate={async (request: string, result: string) => {\n            const { transactionBlockBytes, signature } = JSON.parse(result) as {\n              transactionBlockBytes: string;\n              signature: string;\n            };\n            const publicKey = await verifyTransactionSignature(\n              Buffer.from(transactionBlockBytes, 'base64'),\n              signature,\n            );\n\n            return (\n              bytesToHex(new Uint8Array(currentAccount.publicKey)) ===\n              bytesToHex(publicKey.toRawBytes())\n            ).toString();\n          }}\n        />\n\n        <ApiPayload\n          title=\"signAndExecuteTransactionBlock (USDC)\"\n          description=\"USDC代币转账签名并执行\"\n          presupposeParams={signTokenTransactionParams}\n          onExecute={async (request: string) => {\n            const { from, to, amount, token } = JSON.parse(request) as {\n              from: string;\n              to: string;\n              amount: number;\n              token: string;\n            };\n\n            const transfer = new Transaction();\n            transfer.setSender(from);\n\n            const { data: coins } = await client.getCoins({\n              owner: from,\n              coinType: token,\n            });\n\n            if (!coins.length) {\n              throw new Error('No BUSD coins found');\n            }\n\n            const [coin] = transfer.splitCoins(transfer.object(coins[0].coinObjectId), [amount]);\n            transfer.transferObjects([coin], to);\n\n            const tx = await sponsorTransaction(\n              client,\n              from,\n              await transfer.build({\n                client,\n                onlyTransactionKind: true,\n              }),\n            );\n\n            const res = await signAndExecuteTransaction({\n              transaction: tx,\n              account: currentAccount,\n            });\n\n            return JSON.stringify(res);\n          }}\n        />\n      </ApiGroup>\n\n      <ApiGroup title=\"业务测试\">\n        <TransferForm />\n      </ApiGroup>\n\n      <DappList dapps={dapps} />\n    </>\n  );\n}\n\nconst queryClient = new QueryClient();\n\nconst { networkConfig } = createNetworkConfig({\n  testnet: { url: getFullnodeUrl('testnet') },\n  mainnet: { url: getFullnodeUrl('mainnet') },\n});\n\nexport default function App() {\n  const [activeNetwork, setActiveNetwork] = useState('mainnet');\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <SuiClientProvider\n        networks={networkConfig}\n        // @ts-expect-error\n        network={activeNetwork}\n        onNetworkChange={(network) => {\n          setActiveNetwork(network);\n        }}\n      >\n        <WalletProvider enableUnsafeBurner autoConnect>\n          <ConnectButton />\n          <Example />\n        </WalletProvider>\n      </SuiClientProvider>\n    </QueryClientProvider>\n  );\n}\n"],"names":["InfoLayout","param","title","children","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Card","jsx","CardHeader","className","CardContent","dapps","name","url","params","signMessage","id","value","signPersonalMessage","signTransaction","JSON","stringify","from","address","to","amount","signTokenTransaction","token","sponsorTransaction","client","sender","transactionKindBytes","coinType","SUI_TYPE_ARG","payment","coins","getCoins","owner","limit","data","length","map","objectId","coin","coinObjectId","version","digest","tx","Transaction","fromKind","setSender","setGasOwner","setGasPayment","normalizeSuiCoinType","normalAddress","module","split","normalizeSuiAddress","toLowerCase","concat","e","AssetInfoView","viewRef","store","useFormContext","field","useAtom","fieldAtom","useEffect","coinInfo","getCoinMetadata","setValue","symbol","decimals","error","console","jsx_runtime","Fragment","TransferForm","useSuiClient","currentAccount","useCurrentAccount","mutateAsync","signAndExecuteTransaction","useSignAndExecuteTransaction","apiFromRef","useRef","assetsComboboxRef","getAllCoins","coinTypes","reduce","acc","has","set","get","push","Map","current","then","options","Array","keys","label","key","extra","setOptions","handleTransfer","asset","getCurrentOption","getValue","transfer","amountBN","BigNumber","shiftedBy","amountBNString","toString","log","totalBalance","plus","balance","lt","primaryCoin","mergeCoins","filter","splitCoins","gas","transferObjects","primaryCoinInput","object","res","transaction","account","ApiForm","description","ref","Combobox","placeholder","required","Text","type","hidden","Field","defaultValue","Button","onClick","availableDependencyFields","fieldIds","AutoHeightTextArea","Example","currentWallet","setProvider","useWallet","useAccounts","useConnectWallet","connectionStatus","isConnected","useCurrentWallet","connect","useSignTransaction","useSignPersonalMessage","useSignMessage","mutationKey","mutationOptions","arguments","useMutation","mutationFn","signMessageArgs","signerAccount","signMessageFeature","features","warn","messageBytes","signature","bytes","disconnect","useDisconnectWallet","signTransactionPresupposeParams","useMemo","signTokenTransactionParams","p","publicKey","chains","img","src","icon","ApiGroup","ApiPayload","presupposeParams","onExecute","request","message","hexToBytes","onValidate","result","parse","verifyPersonalMessageSignature","Buffer","toSuiAddress","build","onlyTransactionKind","transactionBlockBytes","verifyTransactionSignature","system","clock","random","denyList","bytesToHex","Uint8Array","toRawBytes","DappList","queryClient","QueryClient","networkConfig","createNetworkConfig","testnet","getFullnodeUrl","mainnet","App","activeNetwork","setActiveNetwork","useState","QueryClientProvider","SuiClientProvider","networks","network","onNetworkChange","WalletProvider","enableUnsafeBurner","autoConnect","ConnectButton"],"sourceRoot":""}