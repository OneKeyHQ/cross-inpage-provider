{"version":3,"file":"static/chunks/3525.2a6e13b09718a70a.js","mappings":"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","sources":["webpack://_N_E/./components/InfoLayout.tsx","webpack://_N_E/./components/chains/benfen/dapps.config.ts","webpack://_N_E/./components/chains/benfen/params.ts","webpack://_N_E/./components/chains/benfen/useSignMessage.tsx","webpack://_N_E/./components/chains/benfen/utils.ts","webpack://_N_E/./components/chains/benfen/example.tsx","webpack://_N_E/./components/connect/ConnectButton.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { Card, CardContent, CardHeader } from './ui/card';\n\nexport type InfoLayoutProps = {\n  title?: string;\n  children?: React.ReactNode;\n};\n\nexport default function InfoLayout({ title, children }: InfoLayoutProps) {\n  return (\n    <Card>\n      {title && <CardHeader className=\"font-medium\">{title}</CardHeader>}\n      <CardContent className=\"flex flex-col flex-wrap gap-3 break-all\">{children}</CardContent>\n    </Card>\n  );\n}\n","export const dapps = [\n  {\n    name: 'Bluefin',\n    url: 'https://trade.bluefin.io/',\n  },\n  {\n    name: 'Cetus',\n    url: 'https://app.cetus.zone/',\n  },\n  {\n    name: 'SuiSwap',\n    url: 'https://suiswap.app/',\n  },\n  {\n    name: 'Sui Names',\n    url: 'https://sui-names.com/',\n  },\n];\n","export default {\n  signMessage: [\n    {\n      id: 'signMessage hello',\n      name: 'signData Hello',\n      value: '48656c6c6f204f6e654b6579',\n    },\n    {\n      id: 'signMessage',\n      name: 'signMessage',\n      value: '010203',\n    },\n  ],\n  signPersonalMessage: [\n    {\n      id: 'signPersonalMessage hello',\n      name: 'signPersonalMessage Hello',\n      value: '48656c6c6f204f6e654b6579',\n    },\n    {\n      id: 'signPersonalMessage',\n      name: 'signPersonalMessage',\n      value: '010203',\n    },\n  ],\n  signTransaction: (address: string) => [\n    {\n      id: 'signTransaction',\n      name: 'signTransaction',\n      value: JSON.stringify({\n        from: address,\n        to: address,\n        amount: 100000,\n      }),\n    },\n  ],\n  signTokenTransaction: (address: string) => [\n    {\n      id: 'signUSDTransaction-BFC-gas',\n      name: 'BUSD_TYPE use BFC gas',\n      value: JSON.stringify({\n        busdGas: false,\n        from: address,\n        to: address,\n        amount: 1000, // 0.000001 USD\n        token: '0x00000000000000000000000000000000000000000000000000000000000000c8::busd::BUSD'\n      }),\n    },\n    {\n      id: 'signUSDTransaction-BUSD-gas',\n      name: 'BUSD_TYPE use busdGas',\n      value: JSON.stringify({\n        busdGas: true,\n        from: address,\n        to: address,\n        amount: 1000, // 0.000001 USD\n        token: '0x00000000000000000000000000000000000000000000000000000000000000c8::busd::BUSD'\n      }),\n    }\n  ],\n};\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useCurrentAccount, useCurrentWallet } from '@benfen/bfc.js/dapp-kit';\nimport type {\n  SuiSignPersonalMessageInput,\n  SuiSignPersonalMessageOutput,\n} from '@mysten/wallet-standard';\nimport type { UseMutationOptions, UseMutationResult } from '@tanstack/react-query';\nimport { useMutation } from '@tanstack/react-query';\n\ntype UseSignMessageArgs = Partial<SuiSignPersonalMessageInput>;\n\ntype UseSignMessageResult = SuiSignPersonalMessageOutput;\n\ntype UseSignMessageError = Error;\n\ntype UseSignMessageMutationOptions = Omit<\n  UseMutationOptions<UseSignMessageResult, UseSignMessageError, UseSignMessageArgs, unknown>,\n  'mutationFn'\n>;\n\n/**\n * Mutation hook for prompting the user to sign a message.\n */\nexport function useSignMessage({\n  mutationKey,\n  ...mutationOptions\n}: UseSignMessageMutationOptions = {}): UseMutationResult<\n  UseSignMessageResult,\n  UseSignMessageError,\n  UseSignMessageArgs\n> {\n  const { currentWallet } = useCurrentWallet();\n  const currentAccount = useCurrentAccount();\n\n  return useMutation({\n    mutationKey: ['wallet', 'sign-message'],\n    mutationFn: async (signMessageArgs) => {\n      if (!currentWallet) {\n        throw new Error('No wallet is connected.');\n      }\n\n      const signerAccount = signMessageArgs.account ?? currentAccount;\n      if (!signerAccount) {\n        throw new Error('No wallet account is selected to sign the personal message with.');\n      }\n\n      // TODO: Remove this once we officially discontinue sui:signMessage in the wallet standard\n      const signMessageFeature = currentWallet.features['sui:signMessage'];\n      if (signMessageFeature) {\n        console.warn(\n          \"This wallet doesn't support the `signPersonalMessage` feature... falling back to `signMessage`.\",\n        );\n\n        // @ts-expect-error\n        const { messageBytes, signature } = await signMessageFeature.signMessage({\n          ...signMessageArgs,\n          account: signerAccount,\n        });\n        return { bytes: messageBytes, signature };\n      }\n\n      throw new Error(\"This wallet doesn't support the `signPersonalMessage` feature.\");\n    },\n    ...mutationOptions,\n  });\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BenfenObjectRef, BenfenClient } from '@benfen/bfc.js/client';\nimport {\n  GAS_SAFE_OVERHEAD,\n  DEFAULT_GAS_PRICE,\n  TransactionBlock,\n} from '@benfen/bfc.js/transactions';\nimport {\n  bfc2HexAddress,\n  BFC_DECIMALS,\n  MIST_PER_BFC,\n  normalizeStructTag,\n  parseStructTag,\n} from '@benfen/bfc.js/utils';\n\nexport const normalizeStructTagForRpc = (address: string) => {\n  const tag = parseStructTag(address);\n  tag.address = bfc2HexAddress(tag.address);\n  return normalizeStructTag(tag);\n};\n\nexport async function sponsorTransaction(\n  client: BenfenClient,\n  sender: string,\n  transactionKindBytes: Uint8Array,\n) {\n  let payment: BenfenObjectRef[] = [];\n\n  const coins = await client.getCoins({ owner: sender, limit: 1 });\n  if (coins.data.length > 0) {\n    payment = coins.data.map((coin) => ({\n      objectId: coin.coinObjectId,\n      version: coin.version,\n      digest: coin.digest,\n    }));\n  }\n\n  const tx = TransactionBlock.fromKind(transactionKindBytes);\n  tx.setSender(sender);\n  tx.setGasOwner(sender);\n  tx.setGasPayment(payment);\n\n  return tx;\n}\n\nexport const TOKEN_INFO = {\n  BFC: {\n    address: 'BFC000000000000000000000000000000000000000000000000000000000000000268e4::bfc::BFC',\n    decimals: 9,\n    symbol: 'BFC',\n    logoURI: 'https://obstatic.243096.com/mili/images/currency/chain/Benfen2.png',\n  },\n  BUSD: {\n    address: 'BFC00000000000000000000000000000000000000000000000000000000000000c8e30a::busd::BUSD',\n    decimals: 9,\n    symbol: 'BUSD',\n    logoURI:\n      'https://obstatic.243096.com/download/token/images/BenfenTEST/BFC00000000000000000000000000000000000000000000000000000000000000c8e30a::busd::BUSD.png',\n  },\n};\n\nexport const computeTxBudget = async (\n  tx: TransactionBlock,\n  gasBalance: bigint,\n  gasToken: (typeof TOKEN_INFO)['BFC'],\n  client: BenfenClient,\n  reserveAmount = BigInt(0),\n) => {\n  const MAX_BFC_BUDGET = BigInt(50000000000);\n  let overhead = GAS_SAFE_OVERHEAD * DEFAULT_GAS_PRICE;\n\n  if (gasToken.address === TOKEN_INFO.BFC.address) {\n    const availableForGas = gasBalance - reserveAmount;\n    tx.setGasBudget(availableForGas < MAX_BFC_BUDGET ? availableForGas : MAX_BFC_BUDGET);\n  } else {\n    const rate = BigInt(await client.getStableRate(normalizeStructTagForRpc(gasToken.address)));\n    const max = (((MAX_BFC_BUDGET * MIST_PER_BFC) / rate) * BigInt(9)) / BigInt(10); // 10% overhead\n    overhead = (overhead * MIST_PER_BFC) / rate;\n    const availableForGas = gasBalance - reserveAmount;\n    tx.setGasBudget(availableForGas < max ? availableForGas : max);\n  }\n  const result = await client.dryRunTransactionBlock({\n    transactionBlock: await tx.build({ client }),\n  });\n  if (result.effects.status.status !== 'success') {\n    throw new Error(result.effects.status.error || 'Unknown error');\n  }\n  const gasUsed = result.effects.gasUsed;\n  const budget = BigInt(gasUsed.computationCost) + BigInt(gasUsed.storageCost) + overhead;\n  tx.setGasBudget(budget < gasBalance ? budget : gasBalance);\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable no-unsafe-optional-chaining */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { dapps } from './dapps.config';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport ConnectButton from '../../../components/connect/ConnectButton';\nimport { hexToBytes, bytesToHex } from '@noble/hashes/utils';\nimport { useWallet } from '../../../components/connect/WalletContext';\nimport DappList from '../../../components/DAppList';\nimport { BENFEN_CLOCK_OBJECT_ID, BFC_DECIMALS } from '@benfen/bfc.js/utils';\nimport params from './params';\nimport { CoinStruct, getFullnodeUrl } from '@benfen/bfc.js/client';\nimport {\n  useCurrentAccount,\n  useSignTransactionBlock,\n  useSignAndExecuteTransactionBlock,\n  useSignPersonalMessage,\n  useBenfenClient,\n  useWallets,\n  BenfenClientProvider,\n  useDisconnectWallet,\n  useConnectWallet,\n  useCurrentWallet,\n  WalletProvider,\n  createNetworkConfig,\n} from '@benfen/bfc.js/dapp-kit';\nimport InfoLayout from '../../../components/InfoLayout';\nimport { TransactionBlock } from '@benfen/bfc.js/transactions';\nimport {\n  verifySignature,\n  verifyPersonalMessage,\n  verifyTransactionBlock,\n} from '@benfen/bfc.js/verify';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useSignMessage } from './useSignMessage';\nimport { ApiGroup, ApiPayload } from '../../ApiActuator';\nimport { computeTxBudget, sponsorTransaction, TOKEN_INFO } from './utils';\nimport { IKnownWallet } from '../../connect/types';\nimport { WalletWithRequiredFeatures } from '@benfen/bfc.js/dist/cjs/wallet-standard';\nimport BigNumber from 'bignumber.js';\nimport { ApiForm } from '../../ApiForm';\nimport { log } from 'console';\n\n\n\nfunction Example() {\n  const client = useBenfenClient();\n  const { setProvider } = useWallet();\n  const [customToAddress, setCustomToAddress] = useState<string>('');\n\n  const currentAccount = useCurrentAccount();\n  const { isConnected } = useCurrentWallet();\n\n  const { mutateAsync: signTransactionBlock } = useSignTransactionBlock();\n  const { mutateAsync: signAndExecuteTransactionBlock } = useSignAndExecuteTransactionBlock({\n    executeFromWallet: true,\n  });\n  const { mutateAsync: signPersonalMessage } = useSignPersonalMessage();\n  const { mutateAsync: signMessage } = useSignMessage();\n\n  console.log('currentAccount', currentAccount);\n\n  useEffect(() => {\n    if (isConnected && currentAccount) {\n      setProvider(true);\n    } else {\n      setProvider(false);\n    }\n  }, [isConnected, currentAccount, setProvider]);\n\n  const signTransactionPresupposeParams = useMemo(() => {\n    return params.signTransaction(currentAccount?.address ?? '');\n  }, [currentAccount?.address]);\n\n  const signTokenTransactionParams = useMemo(() => {\n    return params.signTokenTransaction(currentAccount?.address ?? '');\n  }, [currentAccount?.address]);\n\n  return (\n    <>\n      <ApiGroup title=\"SignMessage\">\n        {/* <ApiPayload\n          title=\"signMessage\"\n          description=\"签名消息, signMessage 不安全已经弃用, 目前（OneKey、Suiet、Sui Wallet、Martian） signMessage 实际实现已经变成了 signPersonalMessage\"\n          presupposeParams={params.signMessage}\n          onExecute={async (request: string) => {\n            const res = await signMessage({\n              message: hexToBytes(request),\n              account: currentAccount,\n            });\n            return JSON.stringify(res);\n          }}\n          onValidate={async (request: string, result: string) => {\n            const {\n              bytes,\n              signature,\n            }: {\n              bytes: string;\n              signature: string;\n            } = JSON.parse(result);\n\n            // const publicKey = await verifySignature(hexToBytes(request), signature);\n            const publicKey = await verifyPersonalMessage(Buffer.from(bytes, 'base64'), signature);\n\n            return (\n              bytesToHex(currentAccount.publicKey) === bytesToHex(publicKey.toRawBytes())\n            ).toString();\n          }}\n        /> */}\n\n        <ApiPayload\n          title=\"signPersonalMessage\"\n          description=\"签名消息（SDK 验证依赖网络可能失败，可以刷新网页重试 或 稍后重试，问题上下文 https://github.com/MystenLabs/sui/issues/17912#issuecomment-2166621747）\"\n          presupposeParams={params.signPersonalMessage}\n          onExecute={async (request: string) => {\n            const res = await signPersonalMessage({\n              message: hexToBytes(request),\n              account: currentAccount,\n            });\n            return JSON.stringify(res);\n          }}\n          onValidate={async (request: string, result: string) => {\n            const {\n              bytes,\n              signature,\n            }: {\n              bytes: string;\n              signature: string;\n            } = JSON.parse(result);\n\n            const publicKey = await verifyPersonalMessage(Buffer.from(bytes, 'base64'), signature);\n\n            return (\n              bytesToHex(new Uint8Array(currentAccount?.publicKey)) ===\n              bytesToHex(publicKey.toRawBytes())\n            ).toString();\n          }}\n        />\n      </ApiGroup>\n      <ApiGroup title=\"Transaction\">\n        <ApiPayload\n          title=\"signTransactionBlock\"\n          description=\"签名交易\"\n          presupposeParams={signTransactionPresupposeParams}\n          onExecute={async (request: string) => {\n            const {\n              from,\n              to,\n              amount,\n            }: {\n              from: string;\n              to: string;\n              amount: number;\n            } = JSON.parse(request);\n\n            const transfer = new TransactionBlock();\n            const [coin] = transfer.splitCoins(transfer.gas, [transfer.pure(amount)]);\n            transfer.transferObjects([coin], transfer.pure(to));\n\n            const tx = await sponsorTransaction(\n              client,\n              from,\n              await transfer.build({\n                client,\n                onlyTransactionKind: true,\n              }),\n            );\n\n            const res: unknown = await signTransactionBlock({\n              transactionBlock: tx,\n              account: currentAccount,\n            });\n            return JSON.stringify(res);\n          }}\n          onValidate={async (request: string, result: string) => {\n            const {\n              transactionBlockBytes,\n              signature,\n            }: {\n              transactionBlockBytes: string;\n              signature: string;\n            } = JSON.parse(result);\n            const publicKey = await verifyTransactionBlock(\n              Buffer.from(transactionBlockBytes, 'base64'),\n              signature,\n            );\n\n            return (\n              bytesToHex(new Uint8Array(currentAccount?.publicKey)) ===\n              bytesToHex(publicKey.toRawBytes())\n            ).toString();\n          }}\n        />\n\n        <ApiPayload\n          title=\"signAndExecuteTransactionBlock\"\n          description=\"签名并执行交易\"\n          presupposeParams={signTransactionPresupposeParams}\n          onExecute={async (request: string) => {\n            const {\n              from,\n              to,\n              amount,\n            }: {\n              from: string;\n              to: string;\n              amount: number;\n            } = JSON.parse(request);\n\n            const transfer = new TransactionBlock();\n            transfer.setSender(from);\n            const [coin] = transfer.splitCoins(transfer.gas, [transfer.pure(amount)]);\n            transfer.transferObjects([coin], transfer.pure(customToAddress || to));\n\n            const tx = await sponsorTransaction(\n              client,\n              from,\n              await transfer.build({\n                client,\n                onlyTransactionKind: true,\n              }),\n            );\n\n            const res: unknown = await signAndExecuteTransactionBlock({\n              transactionBlock: tx,\n              account: currentAccount,\n            });\n            return JSON.stringify(res);\n          }}\n        />\n\n        <ApiPayload\n          title=\"signTransactionBlock\"\n          description=\"签名交易 (特殊情况，带 clock、system 参数)\"\n          presupposeParams={signTransactionPresupposeParams}\n          onExecute={async (request: string) => {\n            const {\n              from,\n              to,\n              amount,\n            }: {\n              from: string;\n              to: string;\n              amount: number;\n            } = JSON.parse(request);\n\n            const transfer = new TransactionBlock();\n            const [coin] = transfer.splitCoins(transfer.gas, [transfer.pure(amount)]);\n            transfer.transferObjects([coin], transfer.pure(to));\n\n            const tx = await sponsorTransaction(\n              client,\n              from,\n              await transfer.build({\n                client,\n                onlyTransactionKind: true,\n              }),\n            );\n\n            // @ts-expect-error\n            tx.system = () => '0x5';\n            // @ts-expect-error\n            tx.clock = () => '0x6';\n            // @ts-expect-error\n            tx.random = () => '0x8';\n            // @ts-expect-error\n            tx.denyList = () => '0x403';\n\n            const res: unknown = await signTransactionBlock({\n              transactionBlock: tx,\n              account: currentAccount,\n            });\n            return JSON.stringify(res);\n          }}\n          onValidate={async (request: string, result: string) => {\n            const {\n              transactionBlockBytes,\n              signature,\n            }: {\n              transactionBlockBytes: string;\n              signature: string;\n            } = JSON.parse(result);\n            const publicKey = await verifyTransactionBlock(\n              Buffer.from(transactionBlockBytes, 'base64'),\n              signature,\n            );\n\n            return (\n              bytesToHex(new Uint8Array(currentAccount?.publicKey)) ===\n              bytesToHex(publicKey.toRawBytes())\n            ).toString();\n          }}\n        />\n\n        <ApiPayload\n          title=\"signTransactionBlock (BUSD)\"\n          description=\"BUSD代币转账签名\"\n          presupposeParams={signTokenTransactionParams}\n          onExecute={async (request: string) => {\n            const { from, to, amount, token } = JSON.parse(request) as {\n              from: string;\n              to: string;\n              amount: number;\n              token: string;\n            };\n\n            const transfer = new TransactionBlock();\n            transfer.setSender(from);\n\n            const { data: coins } = await client.getCoins({\n              owner: from,\n              coinType: token,\n            });\n\n            if (!coins.length) {\n              throw new Error('No BUSD coins found');\n            }\n\n            const [coin] = transfer.splitCoins(transfer.object(coins[0].coinObjectId), [\n              transfer.pure(amount),\n            ]);\n            transfer.transferObjects([coin], transfer.pure(to));\n\n            const tx = await sponsorTransaction(\n              client,\n              from,\n              await transfer.build({\n                client,\n                onlyTransactionKind: true,\n              }),\n            );\n\n            const res = await signTransactionBlock({\n              transactionBlock: tx,\n              account: currentAccount,\n            });\n            return JSON.stringify(res);\n          }}\n          onValidate={async (request: string, result: string) => {\n            const { transactionBlockBytes, signature } = JSON.parse(result) as {\n              transactionBlockBytes: string;\n              signature: string;\n            };\n            const publicKey = await verifyTransactionBlock(\n              Buffer.from(transactionBlockBytes, 'base64'),\n              signature,\n            );\n\n            return (\n              bytesToHex(new Uint8Array(currentAccount?.publicKey)) ===\n              bytesToHex(publicKey.toRawBytes())\n            ).toString();\n          }}\n        />\n\n        <ApiPayload\n          title=\"signAndExecuteTransactionBlock (BUSD)\"\n          description=\"BUSD代币转账签名并执行\"\n          presupposeParams={signTokenTransactionParams}\n          onExecute={async (request: string) => {\n            const { from, to, amount, token,busdGas } = JSON.parse(request) as {\n              from: string;\n              to: string;\n              amount: number;\n              token: string;\n              busdGas: boolean;\n            };\n\n            const tx = new TransactionBlock();\n            const bigintAmount = BigInt(new BigNumber(amount).toFixed(0));\n            const { data: bfcCoins } = await client.getCoins({\n              owner: from,\n              coinType: TOKEN_INFO.BFC.address,\n            });\n\n            let gasCoins = bfcCoins;\n            let coin: ReturnType<(typeof tx)['splitCoins']>;\n            if (busdGas) {\n              const { data: busdCoins } = await client.getCoins({\n                owner: from,\n                coinType: TOKEN_INFO.BUSD.address,\n              });\n              gasCoins = busdCoins;\n              const [primaryCoins, ...otherCoins] = bfcCoins;\n              if (otherCoins.length > 0) {\n                tx.mergeCoins(\n                  tx.object(primaryCoins.coinObjectId),\n                  otherCoins.map((i) => tx.object(i.coinObjectId)),\n                );\n              }\n              coin = tx.splitCoins(tx.object(primaryCoins.coinObjectId), [tx.pure(bigintAmount)]);\n            } else {\n              // 使用 BFC 作为 gas，判断转账的代币类型\n              if (token === TOKEN_INFO.BFC.address) {\n                // 转账 BFC 代币，可以使用 tx.gas\n                coin = tx.splitCoins(tx.gas, [tx.pure(bigintAmount)]);\n              } else {\n                // 转账其他代币，需要获取对应的代币\n                const { data: tokenCoins } = await client.getCoins({\n                  owner: from,\n                  coinType: token,\n                });\n                const [primaryCoin, ...otherCoins] = tokenCoins;\n                if (otherCoins.length > 0) {\n                  tx.mergeCoins(\n                    tx.object(primaryCoin.coinObjectId),\n                    otherCoins.map((i) => tx.object(i.coinObjectId)),\n                  );\n                }\n                coin = tx.splitCoins(tx.object(primaryCoin.coinObjectId), [tx.pure(bigintAmount)]);\n              }\n            }\n\n            tx.setGasPayment(\n              gasCoins.map((i) => ({ objectId: i.coinObjectId, version: i.version, digest: i.digest })),\n            );\n            tx.transferObjects([coin], tx.pure(to));\n            tx.setSenderIfNotSet(from);\n\n            await computeTxBudget(\n              tx,\n              gasCoins.reduce((pre, cur) => BigInt(cur.balance) + pre, BigInt(0)),\n              busdGas ? TOKEN_INFO.BUSD : TOKEN_INFO.BFC,\n              client,\n            );\n\n            const res = await signAndExecuteTransactionBlock({\n              transactionBlock: tx,\n            });\n\n            return JSON.stringify(res);\n          }}\n        />\n\n        <ApiForm title=\"Benfen Swap\" description=\"Benfen Swap 相关操作\">\n          <ApiForm.Text id=\"swapButtonTitle\" value=\"测试 BFC 转 BUSD\" size=\"lg\" />\n\n          <ApiForm.Field type=\"number\" id=\"swapBfcAmount\" label=\"BFC 数量\" required defaultValue='0.01'/>\n          <ApiForm.Checkbox id=\"useBusdGasSwapBfc\" label=\"使用 BUSD 作为 gas\" />\n\n          <ApiForm.Button\n            id=\"swapButton\"\n            label=\"BFC 转 BUSD\"\n            onClick={async (formRef) => {\n              const amount = formRef?.getValue<string>('swapBfcAmount') ?? '0';\n              const busdGas = formRef?.getValue<boolean>('useBusdGasSwapBfc');\n\n              const tx = new TransactionBlock();\n              tx.setSenderIfNotSet(currentAccount?.address??'');\n\n              const bigintAmount = BigInt(new BigNumber(amount).shiftedBy(BFC_DECIMALS).toFixed(0));\n              const from = currentAccount?.address??'';\n\n              const { data: bfcCoins } = await client.getCoins({\n                owner: from,\n                coinType: TOKEN_INFO.BFC.address,\n              });\n\n              let gasCoins = bfcCoins;\n              let coin: ReturnType<(typeof tx)['splitCoins']>;\n              if (busdGas) {\n                const { data: busdCoins } = await client.getCoins({\n                  owner: from,\n                  coinType: TOKEN_INFO.BUSD.address,\n                });\n                gasCoins = busdCoins;\n                const [primaryCoins, ...otherCoins] = bfcCoins;\n                if (otherCoins.length > 0) {\n                  tx.mergeCoins(\n                    tx.object(primaryCoins.coinObjectId),\n                    otherCoins.map((i) => tx.object(i.coinObjectId)),\n                  );\n                }\n                coin = tx.splitCoins(tx.object(primaryCoins.coinObjectId), [tx.pure(bigintAmount)]);\n              } else {\n                coin = tx.splitCoins(tx.gas, [tx.pure(bigintAmount)]);\n              }\n\n              tx.setGasPayment(\n                gasCoins.map((i) => ({ objectId: i.coinObjectId, version: i.version, digest: i.digest })),\n              );\n              tx.moveCall({\n                target: '0xc8::bfc_system::swap_bfc_to_stablecoin',\n                typeArguments: [TOKEN_INFO.BUSD.address],\n                arguments: [\n                  tx.object('0xc9'),\n                  coin,\n                  tx.object(BENFEN_CLOCK_OBJECT_ID),\n                  tx.pure(bigintAmount),\n                  tx.pure('0'),\n                  // 30 minutes\n                  tx.pure(Date.now() + 30 * 60 * 1000),\n                ],\n              });\n              tx.setSenderIfNotSet(from);\n\n              await computeTxBudget(\n                tx,\n                gasCoins.reduce((pre, cur) => BigInt(cur.balance) + pre, BigInt(0)),\n                busdGas ? TOKEN_INFO.BUSD : TOKEN_INFO.BFC,\n                client,\n                bigintAmount\n              );\n\n              const res = await signAndExecuteTransactionBlock({\n                transactionBlock: tx,\n              });\n\n              formRef?.setValue('swapResponse', JSON.stringify(res, null, 2));\n            }}\n            validation={{\n              fields: ['swapBfcAmount'],\n              validator: (values) => {\n                if (!values.swapBfcAmount) {\n                  return '请输入 BFC 数量';\n                }\n              },\n            }}\n          />\n          <ApiForm.Field type=\"text\" id=\"swapResponse\" label=\"响应\"  />\n\n          <ApiForm.Separator/>\n\n          <ApiForm.Field type=\"number\" id=\"swapBusdAmount\" label=\"BUSD 数量\" required defaultValue='0.01' />\n          <ApiForm.Checkbox id=\"useBusdGasSwapBusd\" label=\"使用 BUSD 作为 gas\" />\n\n          <ApiForm.Button\n            id=\"swapBusdButton\"\n            label=\"BUSD 转 BFC\"\n            onClick={async (formRef) => {\n              const amount = formRef?.getValue<string>('swapBusdAmount') ?? '0';\n              const busdGas = formRef?.getValue<boolean>('useBusdGasSwapBusd');\n              const tx = new TransactionBlock();\n              const from = currentAccount?.address??'';\n\n              console.log('=====>>>>> busdGas', busdGas);\n\n              const bigintAmount = BigInt(new BigNumber(amount).shiftedBy(BFC_DECIMALS).toFixed(0));\n\n              const { data: busdCoins } = await client.getCoins({\n                owner: from,\n                coinType: TOKEN_INFO.BUSD.address,\n              });\n\n              let gasCoins = busdCoins;\n              let coin: ReturnType<(typeof tx)['splitCoins']>;\n              if(busdGas) {\n                // 先从合并后的 coin 分割出用于交换的部分\n                coin = tx.splitCoins(tx.gas ,[tx.pure(bigintAmount)]);\n              } else {\n                const [primaryCoin, ...otherCoins] = busdCoins;\n                if (otherCoins.length > 0) {\n                  tx.mergeCoins(\n                    tx.object(primaryCoin.coinObjectId),\n                    otherCoins.map((i) => tx.object(i.coinObjectId))\n                  );\n                }\n                // eslint-disable-next-line prefer-const\n                coin = tx.splitCoins(tx.object(primaryCoin.coinObjectId), [tx.pure(bigintAmount)]);\n                const { data: bfcCoins } = await client.getCoins({\n                  owner: from,\n                  coinType: TOKEN_INFO.BFC.address,\n                });\n                gasCoins = bfcCoins;\n              }\n\n              tx.setGasPayment(\n                gasCoins.map((i) => ({ objectId: i.coinObjectId, version: i.version, digest: i.digest })),\n              );\n              tx.setSenderIfNotSet(from);\n              tx.moveCall({\n                target: '0xc8::bfc_system::swap_stablecoin_to_bfc',\n                typeArguments: [TOKEN_INFO.BUSD.address],\n                arguments: [\n                  tx.object('0xc9'),\n                  coin,\n                  tx.object(BENFEN_CLOCK_OBJECT_ID),\n                  tx.pure(bigintAmount),\n                  tx.pure('0'),\n                  // 30 minutes\n                  tx.pure(Date.now() + 30 * 60 * 1000),\n                ],\n              });\n\n              await computeTxBudget(\n                tx,\n                gasCoins.reduce((pre, cur) => BigInt(cur.balance) + pre, BigInt(0)),\n                busdGas ? TOKEN_INFO.BUSD : TOKEN_INFO.BFC,\n                client,\n                bigintAmount\n              );\n\n              const res = await signAndExecuteTransactionBlock({\n                transactionBlock: tx,\n              });\n\n              formRef?.setValue('response', JSON.stringify(res, null, 2));\n            }}\n            validation={{\n              fields: ['swapBusdAmount'],\n              validator: (values) => {\n                if (!values.swapBusdAmount) {\n                  return '请输入 BFC 数量';\n                }\n              },\n            }}\n          />\n          <ApiForm.Field type=\"text\" id=\"response\" label=\"响应\"  />\n        </ApiForm>\n\n      </ApiGroup>\n\n      <DappList dapps={dapps} />\n    </>\n  );\n}\n\nconst queryClient = new QueryClient();\n\nconst { networkConfig } = createNetworkConfig({\n  testnet: { url: getFullnodeUrl('testnet') },\n  mainnet: { url: getFullnodeUrl('mainnet') },\n});\n\nfunction BenfenConnectButton() {\n  const wallets = useWallets();\n  const currentAccount = useCurrentAccount();\n  const { currentWallet, connectionStatus, isConnected } = useCurrentWallet();\n\n  const { mutateAsync: connect } = useConnectWallet();\n  const { mutateAsync: disconnect } = useDisconnectWallet();\n\n  const walletsRef = useRef<WalletWithRequiredFeatures[]>([]);\n  walletsRef.current = wallets;\n  console.log('Benfen Standard Wallets:', walletsRef.current);\n  const onConnectWallet = useCallback(\n    async (selectedWallet: IKnownWallet): Promise<{ provider: undefined }> => {\n      const wallet = walletsRef.current.find((w) => w.name === selectedWallet.id);\n      if (!wallet) {\n        return Promise.reject('Wallet not found');\n      }\n\n      void connect({ wallet, accountAddress: currentAccount?.address });\n\n      return {\n        provider: undefined,\n      };\n    },\n    [connect, currentAccount?.address],\n  );\n\n  return (\n    <>\n      <ConnectButton<any>\n        fetchWallets={() => {\n          return Promise.resolve(\n            walletsRef.current.map((wallet) => {\n              return {\n                id: wallet.name,\n                name: wallet.name,\n              };\n            }),\n          );\n        }}\n        onConnect={onConnectWallet}\n        onDisconnect={() => void disconnect()}\n      />\n\n      <InfoLayout title=\"Base Info\">\n        {currentAccount && <p>Account:{currentAccount?.address ?? ''}</p>}\n        {currentAccount && <p>PubKey:{currentAccount?.publicKey ?? ''}</p>}\n        {currentAccount && <p>ChainId:{currentAccount?.chains ?? ''}</p>}\n        {currentWallet && <p>Wallet Name:{currentWallet?.name ?? ''}</p>}\n        {currentWallet && <p>Wallet api version:{currentWallet?.version ?? ''}</p>}\n        {currentWallet && (\n          <p>Wallet Support Chains :{JSON.stringify(currentWallet?.chains ?? '')}</p>\n        )}\n        {currentWallet && (\n          <p>\n            Wallet Icon: <img src={currentWallet?.icon} />\n          </p>\n        )}\n        {connectionStatus && <p>Status :{connectionStatus}</p>}\n        {currentWallet && (\n          <p>Wallet Support Features: {JSON.stringify(currentWallet?.features ?? '', null, 2)}</p>\n        )}\n      </InfoLayout>\n    </>\n  );\n}\n\nexport default function App() {\n  const [activeNetwork, setActiveNetwork] = useState<'mainnet' | 'testnet'>('mainnet');\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <BenfenClientProvider\n        networks={networkConfig}\n        network={activeNetwork}\n        onNetworkChange={(network) => {\n          setActiveNetwork(network);\n        }}\n      >\n        <WalletProvider autoConnect>\n          <BenfenConnectButton />\n          <Example />\n        </WalletProvider>\n      </BenfenClientProvider>\n    </QueryClientProvider>\n  );\n}\n","/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { Button } from '../ui/button';\nimport { Card, CardContent } from '../ui/card';\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '../ui/dialog';\nimport type { IAccountInfo, IKnownWallet } from './types';\nimport { useWallet } from './WalletContext';\nimport { toast } from '../ui/use-toast';\nimport { get } from 'lodash';\nimport { useSettings } from '../../hooks/useSettings';\n\nexport type ConnectButtonProps<T> = {\n  fetchWallets: () => Promise<IKnownWallet[]>;\n  onConnect: (wallet: IKnownWallet) => Promise<\n    {\n      provider: T;\n    } & Partial<IAccountInfo>\n  >;\n  onDisconnect?: () => Promise<void>;\n};\n\nconst accountInfoKeys: Record<string, string> = {\n  address: '地址',\n  publicKey: '公钥',\n  chainId: '网络',\n};\n\nexport default function ConnectButton<T>({\n  fetchWallets,\n  onConnect,\n  onDisconnect,\n}: ConnectButtonProps<T>) {\n  const { settings } = useSettings();\n  const connectDialogRef = useRef<any>(null);\n  const autoConnectedRef = useRef<boolean>(false);\n\n  const [wallets, setWallets] = useState<IKnownWallet[]>([]);\n\n  const { setProvider, setAccount, provider, account } = useWallet();\n\n  const connectWallet = useCallback(\n    async (wallet: IKnownWallet) => {\n      try {\n        const { provider: _provider, ...accountInfo } = await onConnect(wallet);\n        setProvider(_provider);\n        setAccount(accountInfo);\n      } catch (error) {\n        console.log('connectWallet error', error);\n\n        toast({\n          title: '连接失败',\n          description: get(error, 'message', ''),\n        });\n      }\n    },\n    [onConnect, setAccount, setProvider],\n  );\n\n  const disconnectWallet = useCallback(async () => {\n    autoConnectedRef.current = false;\n    await onDisconnect?.();\n    setProvider(null);\n    setAccount(null);\n  }, [onDisconnect, setAccount, setProvider]);\n\n  const closeDialog = useCallback(() => {\n    setTimeout(() => {\n      try {\n        connectDialogRef.current?.click();\n      } catch (error) {\n        // ignore\n      }\n    }, 150);\n  }, []);\n\n  const connectWalletWithDialog = useCallback(\n    async (options?: { directConnection?: boolean }) => {\n      const wallets = await fetchWallets?.();\n\n      if (wallets?.length === 0) {\n        closeDialog();\n        return;\n      }\n\n      const { directConnection } = options ?? { directConnection: false };\n      if (wallets?.length === 1 || (wallets?.length > 0 && directConnection)) {\n        closeDialog();\n        await connectWallet(wallets[0]);\n      } else {\n        setWallets(wallets);\n      }\n    },\n    [closeDialog, connectWallet, fetchWallets],\n  );\n\n  useEffect(() => {\n    const timeout = setTimeout(async () => {\n      if (autoConnectedRef.current) return;\n\n      console.log('settings.autoConnect', settings.autoConnect);\n      if (settings.autoConnect) {\n        autoConnectedRef.current = true;\n        await connectWalletWithDialog({\n          directConnection: true,\n        });\n      }\n    }, 500);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [settings.autoConnect]);\n\n  return (\n    <Card>\n      <CardContent className=\"flex flex-col flex-wrap gap-3\">\n        <div className=\"flex flex-row flex-wrap justify-between\">\n          <Dialog>\n            <DialogTrigger asChild>\n              <Button onClick={() => connectWalletWithDialog()}>Connect Wallet</Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogClose ref={connectDialogRef} />\n              <DialogHeader>\n                <DialogTitle>选择钱包开始连接</DialogTitle>\n                {!!wallets &&\n                  wallets.map((wallet) => (\n                    <DialogClose asChild key={wallet.id}>\n                      <Button onClick={() => connectWallet(wallet)} className=\"gap-2\">\n                        {wallet.logo && (\n                          <img\n                            alt={wallet.name}\n                            src={wallet.logo}\n                            className=\"w-5 h-5 rounded-full\"\n                          />\n                        )}\n                        <span className=\"font-medium\">{wallet.name}</span>\n                        {wallet.tags?.map((tag) => (\n                          <span key={tag} className=\"text-xs font-light\">\n                            {tag}\n                          </span>\n                        ))}\n                      </Button>\n                    </DialogClose>\n                  ))}\n                {!wallets ||\n                  (wallets.length === 0 && (\n                    <DialogDescription>\n                      没有钱包可用，请安装 OneKey Extension\n                      <a target=\"_blank\" href={'https://www.onekey.so/download/'}>\n                        Install OneKey Extension →\n                      </a>\n                    </DialogDescription>\n                  ))}\n              </DialogHeader>\n            </DialogContent>\n          </Dialog>\n          {provider && (\n            <Button variant=\"destructive\" onClick={disconnectWallet}>\n              断开链接\n            </Button>\n          )}\n        </div>\n        {account && (\n          <div className=\"flex grid-cols-1 xl:grid-cols-2 flex-wrap gap-x-6 gap-y-3 mt-4\">\n            {Object.keys(account).map((key) => {\n              return (\n                <div key={key}>\n                  <span>{`${accountInfoKeys?.[key] ?? key}`}: </span>\n                  {/* @ts-expect-error */}\n                  <span className=\"font-normal flex flex-wrap text-break\">{`${account?.[key]}`}</span>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":["InfoLayout","param","title","children","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Card","jsx","CardHeader","className","CardContent","dapps","name","url","params","signMessage","id","value","signPersonalMessage","signTransaction","JSON","stringify","from","address","to","amount","signTokenTransaction","busdGas","token","normalizeStructTagForRpc","tag","parseStructTag","bfc2HexAddress","normalizeStructTag","sponsorTransaction","client","sender","transactionKindBytes","payment","coins","getCoins","owner","limit","data","length","map","objectId","coin","coinObjectId","version","digest","tx","TransactionBlock","fromKind","setSender","setGasOwner","setGasPayment","TOKEN_INFO","BFC","decimals","symbol","logoURI","BUSD","computeTxBudget","gasBalance","gasToken","reserveAmount","BigInt","MAX_BFC_BUDGET","overhead","GAS_SAFE_OVERHEAD","DEFAULT_GAS_PRICE","availableForGas","setGasBudget","rate","getStableRate","max","MIST_PER_BFC","result","dryRunTransactionBlock","transactionBlock","build","effects","status","error","gasUsed","budget","computationCost","storageCost","Example","useBenfenClient","setProvider","useWallet","customToAddress","setCustomToAddress","useState","currentAccount","useCurrentAccount","isConnected","useCurrentWallet","mutateAsync","signTransactionBlock","useSignTransactionBlock","signAndExecuteTransactionBlock","useSignAndExecuteTransactionBlock","executeFromWallet","useSignPersonalMessage","useSignMessage","mutationKey","mutationOptions","arguments","currentWallet","useMutation","mutationFn","signMessageArgs","signerAccount","account","signMessageFeature","features","console","warn","messageBytes","signature","bytes","log","useEffect","signTransactionPresupposeParams","useMemo","signTokenTransactionParams","jsx_runtime","Fragment","ApiGroup","ApiPayload","description","presupposeParams","onExecute","request","res","message","hexToBytes","onValidate","parse","publicKey","verifyPersonalMessage","Buffer","bytesToHex","Uint8Array","toRawBytes","toString","transfer","splitCoins","gas","pure","transferObjects","onlyTransactionKind","transactionBlockBytes","verifyTransactionBlock","system","clock","random","denyList","coinType","object","bigintAmount","BigNumber","toFixed","bfcCoins","gasCoins","busdCoins","primaryCoins","otherCoins","mergeCoins","i","tokenCoins","primaryCoin","setSenderIfNotSet","reduce","pre","cur","balance","ApiForm","Text","size","Field","type","label","required","defaultValue","Checkbox","Button","onClick","formRef","getValue","shiftedBy","BFC_DECIMALS","moveCall","target","typeArguments","BENFEN_CLOCK_OBJECT_ID","Date","now","setValue","validation","fields","validator","values","swapBfcAmount","Separator","swapBusdAmount","DappList","queryClient","QueryClient","networkConfig","example_networkConfig","createNetworkConfig","testnet","getFullnodeUrl","mainnet","BenfenConnectButton","wallets","useWallets","connectionStatus","connect","useConnectWallet","disconnect","useDisconnectWallet","walletsRef","useRef","current","onConnectWallet","useCallback","selectedWallet","wallet","find","w","accountAddress","provider","undefined","Promise","reject","ConnectButton","fetchWallets","resolve","onConnect","onDisconnect","p","chains","img","src","icon","App","activeNetwork","setActiveNetwork","QueryClientProvider","BenfenClientProvider","networks","network","onNetworkChange","WalletProvider","autoConnect","accountInfoKeys","chainId","settings","useSettings","connectDialogRef","autoConnectedRef","setWallets","setAccount","connectWallet","_provider","accountInfo","toast","get","disconnectWallet","closeDialog","setTimeout","click","connectWalletWithDialog","options","directConnection","timeout","clearTimeout","div","Dialog","DialogTrigger","asChild","DialogContent","DialogClose","ref","DialogHeader","DialogTitle","logo","alt","span","tags","DialogDescription","a","href","variant","Object","keys","concat","key"],"sourceRoot":""}