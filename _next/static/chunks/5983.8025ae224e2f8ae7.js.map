{"version":3,"file":"static/chunks/5983.8025ae224e2f8ae7.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@noble/hashes/_u64.js","webpack://_N_E/./node_modules/@noble/hashes/sha3.js","webpack://_N_E/./node_modules/ethereum-cryptography/keccak.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/curves/_shortw_utils.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/curve.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/hash-to-curve.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/modular.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/utils.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/weierstrass.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/curves/secp256k1.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_assert.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_md.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_u64.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/hashes/crypto.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/hashes/hmac.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha256.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha3.js","webpack://_N_E/./node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js","webpack://_N_E/./node_modules/ethereum-cryptography/secp256k1.js","webpack://_N_E/./node_modules/ethereum-cryptography/utils.js","webpack://_N_E/<anon>"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = void 0;\nexports.fromBig = fromBig;\nexports.split = split;\nexports.add = add;\n/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n//# sourceMappingURL=_u64.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = void 0;\nexports.keccakP = keccakP;\n/**\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\n * Different from older hashes, the internal state is bigger than output size.\n *\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\n * [Website](https://keccak.team/keccak.html),\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\n *\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\n * @module\n */\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s));\n/** `keccakf1600` internal function, additionally allows to adjust round count. */\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\n/** Keccak sponge function. */\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        (0, _assert_js_1.anumber)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        // 0 < blockLen < 200\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        if (!utils_js_1.isLE)\n            (0, utils_js_1.byteSwap32)(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!utils_js_1.isLE)\n            (0, utils_js_1.byteSwap32)(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0, _assert_js_1.aexists)(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0, _assert_js_1.aexists)(this, false);\n        (0, _assert_js_1.abytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0, _assert_js_1.anumber)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0, _assert_js_1.aoutput)(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\n/** SHA3-224 hash function. */\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/** SHA3-256 hash function. Different from keccak-256. */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\n/** SHA3-384 hash function. */\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\n/** SHA3-512 hash function. */\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\n/** keccak-224 hash function. */\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/** keccak-256 hash function. Different from SHA3-256. */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\n/** keccak-384 hash function. */\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\n/** keccak-512 hash function. */\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\n/** SHAKE128 XOF with 128-bit security. */\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\n/** SHAKE256 XOF with 256-bit security. */\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keccak512 = exports.keccak384 = exports.keccak256 = exports.keccak224 = void 0;\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst utils_js_1 = require(\"./utils.js\");\nexports.keccak224 = (0, utils_js_1.wrapHash)(sha3_1.keccak_224);\nexports.keccak256 = (() => {\n    const k = (0, utils_js_1.wrapHash)(sha3_1.keccak_256);\n    k.create = sha3_1.keccak_256.create;\n    return k;\n})();\nexports.keccak384 = (0, utils_js_1.wrapHash)(sha3_1.keccak_384);\nexports.keccak512 = (0, utils_js_1.wrapHash)(sha3_1.keccak_512);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getHash = getHash;\nexports.createCurve = createCurve;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst weierstrass_js_1 = require(\"./abstract/weierstrass.js\");\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),\n        randomBytes: utils_1.randomBytes,\n    };\n}\nfunction createCurve(curveDef, defHash) {\n    const create = (hash) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wNAF = wNAF;\nexports.validateBasic = validateBasic;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nconst modular_js_1 = require(\"./modular.js\");\nconst utils_js_1 = require(\"./utils.js\");\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nfunction validateBasic(curve) {\n    (0, modular_js_1.validateField)(curve.Fp);\n    (0, utils_js_1.validateObject)(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.expand_message_xmd = expand_message_xmd;\nexports.expand_message_xof = expand_message_xof;\nexports.hash_to_field = hash_to_field;\nexports.isogenyMap = isogenyMap;\nexports.createHasher = createHasher;\nconst modular_js_1 = require(\"./modular.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = utils_js_1.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    (0, utils_js_1.abytes)(msg);\n    (0, utils_js_1.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H((0, utils_js_1.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    (0, utils_js_1.abytes)(msg);\n    (0, utils_js_1.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n    (0, utils_js_1.validateObject)(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    (0, utils_js_1.abytes)(msg);\n    anum(count);\n    const DST = typeof _DST === 'string' ? (0, utils_js_1.utf8ToBytes)(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0, modular_js_1.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Same as encodeToCurve, but without hash\n        mapToCurve(scalars) {\n            if (!Array.isArray(scalars))\n                throw new Error('mapToCurve: expected array of bigints');\n            for (const i of scalars)\n                if (typeof i !== 'bigint')\n                    throw new Error(`mapToCurve: expected array of bigints, got ${i} in array`);\n            const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isNegativeLE = void 0;\nexports.mod = mod;\nexports.pow = pow;\nexports.pow2 = pow2;\nexports.invert = invert;\nexports.tonelliShanks = tonelliShanks;\nexports.FpSqrt = FpSqrt;\nexports.validateField = validateField;\nexports.FpPow = FpPow;\nexports.FpInvertBatch = FpInvertBatch;\nexports.FpDiv = FpDiv;\nexports.FpIsSquare = FpIsSquare;\nexports.nLength = nLength;\nexports.Field = Field;\nexports.FpSqrtOdd = FpSqrtOdd;\nexports.FpSqrtEven = FpSqrtEven;\nexports.hashToPrivateScalar = hashToPrivateScalar;\nexports.getFieldBytesLength = getFieldBytesLength;\nexports.getMinHashLength = getMinHashLength;\nexports.mapHashToField = mapHashToField;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nconst utils_js_1 = require(\"./utils.js\");\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nfunction tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\nexports.isNegativeLE = isNegativeLE;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return (0, utils_js_1.validateObject)(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nfunction FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nfunction FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: (0, utils_js_1.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0, utils_js_1.ensureBytes)('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nfunction getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nfunction getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bitMask = void 0;\nexports.isBytes = isBytes;\nexports.abytes = abytes;\nexports.bytesToHex = bytesToHex;\nexports.numberToHexUnpadded = numberToHexUnpadded;\nexports.hexToNumber = hexToNumber;\nexports.hexToBytes = hexToBytes;\nexports.bytesToNumberBE = bytesToNumberBE;\nexports.bytesToNumberLE = bytesToNumberLE;\nexports.numberToBytesBE = numberToBytesBE;\nexports.numberToBytesLE = numberToBytesLE;\nexports.numberToVarBytesBE = numberToVarBytesBE;\nexports.ensureBytes = ensureBytes;\nexports.concatBytes = concatBytes;\nexports.equalBytes = equalBytes;\nexports.utf8ToBytes = utf8ToBytes;\nexports.bitLen = bitLen;\nexports.bitGet = bitGet;\nexports.bitSet = bitSet;\nexports.createHmacDrbg = createHmacDrbg;\nexports.validateObject = validateObject;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nfunction equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nfunction bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\nexports.bitMask = bitMask;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DER = void 0;\nexports.weierstrassPoints = weierstrassPoints;\nexports.weierstrass = weierstrass;\nexports.SWUFpSqrtRatio = SWUFpSqrtRatio;\nexports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nconst curve_js_1 = require(\"./curve.js\");\nconst mod = require(\"./modular.js\");\nconst ut = require(\"./utils.js\");\nconst utils_js_1 = require(\"./utils.js\");\nfunction validatePointOpts(curve) {\n    const opts = (0, curve_js_1.validateBasic)(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexports.DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = exports.DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = exports.DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = exports.DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = (0, curve_js_1.validateBasic)(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0, utils_js_1.ensureBytes)('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0, utils_js_1.ensureBytes)('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return exports.DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n        if (prehash)\n            msgHash = (0, utils_js_1.ensureBytes)('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0, utils_js_1.ensureBytes)('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n        publicKey = (0, utils_js_1.ensureBytes)('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || ut.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof exports.DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst _shortw_utils_js_1 = require(\"./_shortw_utils.js\");\nconst hash_to_curve_js_1 = require(\"./abstract/hash-to-curve.js\");\nconst modular_js_1 = require(\"./abstract/modular.js\");\nconst utils_js_1 = require(\"./abstract/utils.js\");\nconst weierstrass_js_1 = require(\"./abstract/weierstrass.js\");\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = ((0, modular_js_1.pow2)(b3, _3n, P) * b3) % P;\n    const b9 = ((0, modular_js_1.pow2)(b6, _3n, P) * b3) % P;\n    const b11 = ((0, modular_js_1.pow2)(b9, _2n, P) * b2) % P;\n    const b22 = ((0, modular_js_1.pow2)(b11, _11n, P) * b11) % P;\n    const b44 = ((0, modular_js_1.pow2)(b22, _22n, P) * b22) % P;\n    const b88 = ((0, modular_js_1.pow2)(b44, _44n, P) * b44) % P;\n    const b176 = ((0, modular_js_1.pow2)(b88, _88n, P) * b88) % P;\n    const b220 = ((0, modular_js_1.pow2)(b176, _44n, P) * b44) % P;\n    const b223 = ((0, modular_js_1.pow2)(b220, _3n, P) * b3) % P;\n    const t1 = ((0, modular_js_1.pow2)(b223, _23n, P) * b22) % P;\n    const t2 = ((0, modular_js_1.pow2)(t1, _6n, P) * b2) % P;\n    const root = (0, modular_js_1.pow2)(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = (0, modular_js_1.Field)(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);\n            let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256_1.sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);\nconst modP = (x) => (0, modular_js_1.mod)(x, secp256k1P);\nconst modN = (x) => (0, modular_js_1.mod)(x, secp256k1N);\nconst Point = exports.secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN((0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {\n    const m = (0, utils_js_1.ensureBytes)('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = (0, utils_js_1.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = (0, utils_js_1.ensureBytes)('signature', signature, 64);\n    const m = (0, utils_js_1.ensureBytes)('message', message);\n    const pub = (0, utils_js_1.ensureBytes)('publicKey', publicKey, 32);\n    try {\n        const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexports.schnorr = (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE: utils_js_1.numberToBytesBE,\n        bytesToNumberBE: utils_js_1.bytesToNumberBE,\n        taggedHash,\n        mod: modular_js_1.mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256_1.sha256,\n}))();\nexports.hashToCurve = (() => htf.hashToCurve)();\nexports.encodeToCurve = (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = exports.isBytes = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\nexports.bool = bool;\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexports.isBytes = isBytes;\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = { number, bool, bytes, hash, exists, output };\nexports.default = assert;\n//# sourceMappingURL=_assert.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HashMD = exports.Maj = exports.Chi = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\nexports.Chi = Chi;\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\nexports.Maj = Maj;\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nclass HashMD extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        (0, _assert_js_1.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0, _assert_js_1.exists)(this);\n        (0, _assert_js_1.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.HashMD = HashMD;\n//# sourceMappingURL=_md.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n//# sourceMappingURL=_u64.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = exports.HMAC = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0, _assert_js_1.hash)(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0, _assert_js_1.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0, _assert_js_1.exists)(this);\n        (0, _assert_js_1.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\nexports.HMAC = HMAC;\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _md_js_1 = require(\"./_md.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_js_1.HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + (0, _md_js_1.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + (0, _md_js_1.Maj)(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        (0, _assert_js_1.number)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        if (!utils_js_1.isLE)\n            (0, utils_js_1.byteSwap32)(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!utils_js_1.isLE)\n            (0, utils_js_1.byteSwap32)(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0, _assert_js_1.exists)(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0, _assert_js_1.exists)(this, false);\n        (0, _assert_js_1.bytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0, _assert_js_1.number)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0, _assert_js_1.output)(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.byteSwap32 = exports.byteSwapIfBE = exports.byteSwap = exports.isLE = exports.rotl = exports.rotr = exports.createView = exports.u32 = exports.u8 = exports.isBytes = void 0;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\nconst _assert_js_1 = require(\"./_assert.js\");\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexports.isBytes = isBytes;\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexports.rotl = rotl;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nconst byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\nexports.byteSwap = byteSwap;\n// Conditionally byte swap if on a big-endian platform\nexports.byteSwapIfBE = exports.isLE ? (n) => n : (n) => (0, exports.byteSwap)(n);\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = (0, exports.byteSwap)(arr[i]);\n    }\n}\nexports.byteSwap32 = byteSwap32;\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    (0, _assert_js_1.bytes)(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nexports.utf8ToBytes = utf8ToBytes;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    (0, _assert_js_1.bytes)(data);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        (0, _assert_js_1.bytes)(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {\n        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\nexports.randomBytes = randomBytes;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.secp256k1 = void 0;\nvar secp256k1_1 = require(\"@noble/curves/secp256k1\");\nObject.defineProperty(exports, \"secp256k1\", { enumerable: true, get: function () { return secp256k1_1.secp256k1; } });\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = exports.utf8ToBytes = exports.createView = exports.concatBytes = exports.toHex = exports.bytesToHex = exports.assertBytes = exports.assertBool = void 0;\nexports.bytesToUtf8 = bytesToUtf8;\nexports.hexToBytes = hexToBytes;\nexports.equalsBytes = equalsBytes;\nexports.wrapHash = wrapHash;\nconst _assert_1 = __importDefault(require(\"@noble/hashes/_assert\"));\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst assertBool = _assert_1.default.bool;\nexports.assertBool = assertBool;\nconst assertBytes = _assert_1.default.bytes;\nexports.assertBytes = assertBytes;\nvar utils_2 = require(\"@noble/hashes/utils\");\nObject.defineProperty(exports, \"bytesToHex\", { enumerable: true, get: function () { return utils_2.bytesToHex; } });\nObject.defineProperty(exports, \"toHex\", { enumerable: true, get: function () { return utils_2.bytesToHex; } });\nObject.defineProperty(exports, \"concatBytes\", { enumerable: true, get: function () { return utils_2.concatBytes; } });\nObject.defineProperty(exports, \"createView\", { enumerable: true, get: function () { return utils_2.createView; } });\nObject.defineProperty(exports, \"utf8ToBytes\", { enumerable: true, get: function () { return utils_2.utf8ToBytes; } });\n// buf.toString('utf8') -> bytesToUtf8(buf)\nfunction bytesToUtf8(data) {\n    if (!(data instanceof Uint8Array)) {\n        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);\n    }\n    return new TextDecoder().decode(data);\n}\nfunction hexToBytes(data) {\n    const sliced = data.startsWith(\"0x\") ? data.substring(2) : data;\n    return (0, utils_1.hexToBytes)(sliced);\n}\n// buf.equals(buf2) -> equalsBytes(buf, buf2)\nfunction equalsBytes(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n// Internal utils\nfunction wrapHash(hash) {\n    return (msg) => {\n        _assert_1.default.bytes(msg);\n        return hash(msg);\n    };\n}\n// TODO(v3): switch away from node crypto, remove this unnecessary variable.\nexports.crypto = (() => {\n    const webCrypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : undefined;\n    const nodeRequire = typeof module !== \"undefined\" &&\n        typeof module.require === \"function\" &&\n        module.require.bind(module);\n    return {\n        node: nodeRequire && !webCrypto ? nodeRequire(\"crypto\") : undefined,\n        web: webCrypto\n    };\n})();\n"],"names":["Object","defineProperty","exports","value","add5L","add5H","add4H","add4L","add3H","add3L","rotlBL","rotlBH","rotlSL","rotlSH","rotr32L","rotr32H","rotrBL","rotrBH","rotrSL","rotrSH","shrSL","shrSH","toBig","fromBig","split","add","U32_MASK64","BigInt","_32n","n","le","h","Number","l","lst","Ah","Uint32Array","length","Al","i","_l","s","_h","Bh","Bl","Cl","low","Ch","Dl","Dh","El","Eh","shake256","shake128","keccak_512","keccak_384","keccak_256","keccak_224","sha3_512","sha3_384","sha3_256","sha3_224","Keccak","keccakP","_assert_js_1","__webpack_require__","_u64_js_1","utils_js_1","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","j","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","rounds","B","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","fill","Hash","constructor","blockLen","suffix","outputLen","enableXOF","pos","posOut","finished","destroyed","anumber","state","Uint8Array","state32","u32","keccak","isLE","byteSwap32","update","data","aexists","toBytes","len","take","Math","min","finish","writeInto","out","abytes","bufferOut","set","subarray","xofInto","xof","bytes","digestInto","aoutput","destroy","digest","_cloneInto","to","gen","wrapConstructor","genShake","wrapXOFConstructorWithOpts","opts","undefined","dkLen","keccak512","keccak384","keccak256","keccak224","sha3_1","wrapHash","k","create","getHash","createCurve","curveDef","defHash","weierstrass_js_1","weierstrass","hash","freeze","hmac_1","utils_1","hmac","key","msgs","concatBytes","randomBytes","wNAF","c","bits","constTimeNegate","condition","item","neg","negate","windows","ceil","W","windowSize","unsafeLadder","elm","p","ZERO","d","double","precomputeWindow","points","base","window","precomputes","f","BASE","mask","maxNumber","shiftBy","offset","wbits","offset2","abs","cond1","cond2","wNAFCached","P","precomputesMap","transform","_WINDOW_SIZE","comp","get","validateBasic","curve","modular_js_1","validateField","Fp","validateObject","Gx","Gy","nBitLength","nByteLength","nLength","ORDER","expand_message_xmd","expand_message_xof","hash_to_field","isogenyMap","field","map","COEFF","Array","from","reverse","xNum","xDen","yNum","yDen","val","reduce","acc","mul","div","createHasher","Point","mapToCurve","def","hashToCurve","msg","options","u","DST","u0","fromAffine","u1","clearCofactor","assertValidity","encodeToCurve","encodeDST","scalars","isArray","os2ip","bytesToNumberBE","i2osp","res","anum","isSafeInteger","lenInBytes","H","utf8ToBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b","b_0","args","strxor","a","arr","pseudo_random_bytes","slice","count","prb","m","expand","_DST","log2p","toString","L","len_in_bytes","e","elm_offset","tv","mod","isNegativeLE","pow","pow2","power","modulo","invert","tonelliShanks","FpSqrt","FIELD_FIELDS","MASK","BYTES","BITS","FpPow","FpInvertBatch","FpDiv","lhs","rhs","inv","FpIsSquare","legendreConst","eql","ONE","Field","bitLen","redef","sqrtP","bitMask","num","isValid","is0","isOdd","sqr","sub","sqrN","addN","subN","mulN","sqrt","invertBatch","cmov","numberToBytesLE","numberToBytesBE","fromBytes","bytesToNumberLE","FpSqrtOdd","root","FpSqrtEven","hashToPrivateScalar","groupOrder","ensureBytes","hashLen","minLen","getFieldBytesLength","getMinHashLength","mapHashToField","fieldOrder","fieldLen","reduced","_3n","_4n","_5n","_8n","result","number","v","q","r","gcd","Q","S","Z","legendreC","p1div4","Q1div2","g","t2","ge","c1","n2","nv","nums","tmp","lastMultiplied","inverted","reduceRight","_nBitLength","bitLength","isBytes","bytesToHex","numberToHexUnpadded","hexToNumber","hexToBytes","numberToVarBytesBE","title","hex","expectedLength","equalBytes","diff","str","TextEncoder","encode","bitGet","bitSet","createHmacDrbg","qByteLen","hmacFn","u8n","reset","reseed","seed","u8fr","sl","pred","object","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","validatorFns","String","entries","name","hexes","_","padStart","asciis","_0","_9","_A","_F","_a","_f","asciiToBase16","char","hl","al","array","ai","hi","n1","charCodeAt","arrays","sum","pad","bigint","function","boolean","string","stringOrUint8Array","DER","weierstrassPoints","CURVE","validateOpts","curve_js_1","ut","bits2int","bits2int_modN","lowS","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","ProjectivePoint","normPrivateKeyToScalar","weierstrassEquation","isWithinCurveOrder","_c","point","isCompressed","toAffine","cat","hasEvenY","head","tail","y2","sqrtError","Error","message","isYOdd","numToNByteStr","isBiggerThanHalfOrder","HALF","slcNum","Signature","recovery","fromCompact","fromDER","toSig","addRecoveryBit","recoverPublicKey","msgHash","rec","includes","radj","prefix","fromHex","ir","u2","multiplyAndAddUnsafe","hasHighS","normalizeS","toDERRawBytes","toDERHex","hexFromSig","toCompactRawBytes","toCompactHex","isProbPub","delta","ORDER_MASK","int2octets","defaultSigOpts","prehash","defaultVerOpts","_setWindowSize","getPublicKey","privateKey","fromPrivateKey","toRawBytes","getSharedSecret","privateA","publicB","multiply","sign","privKey","k2sig","prepSig","some","extraEntropy","ent","h1int","seedArgs","kBytes","ik","normS","drbg","C","verify","signature","publicKey","_sig","derError","Err","sg","error","is","utils","isValidPrivateKey","randomPrivateKey","precompute","SWUFpSqrtRatio","mapToCurveSimpleSWU","A","sqrtRatio","tv1","tv2","tv3","tv4","tv5","tv6","e1","b2n","h2b","_parseInt","E","sBytes","rBytesLeft","sig","parseInt","shl","rhl","rl","validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","allowInfinityPoint","endo","beta","splitScalar","_isCompressed","x2","x3","assertGE","lengths","pointPrecomputes","Map","assertPrjPoint","other","px","py","pz","normalizeZ","toInv","delete","left","right","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wnaf","multiplyUnsafe","I","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f1p","f2p","G","iz","z","ax","ay","zz","cofactor","toHex","_bits","o","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c6","c7","isQR","tvv5","y1","schnorr","secp256k1","sha256_1","_shortw_utils_js_1","hash_to_curve_js_1","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","a1","b1","a2","POW_2_128","sha256","fe","TAGGED_HASH_PREFIXES","taggedHash","tag","messages","tagP","tagH","pointToBytes","numTo32b","modP","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrVerify","pub","auxRand","rand","k_","rx","isoMap","mapSWU","htf","bool","exists","instance","checkFinished","output","HashMD","Maj","Chi","padOffset","buffer","view","createView","dataView","process","roundClean","setBigUint64","byteOffset","_u32_max","wh","wl","setUint32","oview","outLen","crypto","globalThis","HMAC","_key","iHash","oHash","buf","getPrototypeOf","sha224","_md_js_1","SHA256_K","SHA256_IV","SHA256_W","SHA256","D","F","getUint32","W15","W2","s0","rotr","s1","sigma1","T1","sigma0","T2","SHA224","wrapConstructorWithOpts","checkOpts","asyncLoop","nextTick","byteSwapIfBE","byteSwap","rotl","u8","crypto_1","byteLength","floor","DataView","word","iters","tick","cb","ts","Date","now","clone","toStr","defaults","call","merged","assign","hashCons","hashC","bytesLength","getRandomValues","secp256k1_1","enumerable","__importDefault","__esModule","assertBytes","assertBool","bytesToUtf8","TextDecoder","decode","sliced","startsWith","substring","equalsBytes","_assert_1","default","utils_2","webCrypto","nodeRequire","module","require","bind","node","web"],"sourceRoot":""}