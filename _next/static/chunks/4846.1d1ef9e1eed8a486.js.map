{"version":3,"file":"static/chunks/4846.1d1ef9e1eed8a486.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/bs58/index.js","webpack://_N_E/./node_modules/@solana/buffer-layout/lib/Layout.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/bs58/index.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/eventemitter3/index.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/jayson/lib/client/browser/index.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/jayson/lib/generateRequest.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/rpc-websockets/dist/lib/client.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/rpc-websockets/dist/lib/utils.js","webpack://_N_E/./node_modules/bigint-buffer/dist/browser.js","webpack://_N_E/./node_modules/borsh/lib/index.js","webpack://_N_E/./node_modules/borsh/node_modules/bs58/index.js","webpack://_N_E/./node_modules/eventemitter3/index.js","webpack://_N_E/./node_modules/jayson/lib/client/browser/index.js","webpack://_N_E/./node_modules/jayson/lib/generateRequest.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/v1.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/parse.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/v35.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/md5.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/v3.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/sha1.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/v5.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/nil.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/version.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/index.js","webpack://_N_E/./node_modules/@noble/hashes/esm/_u64.js","webpack://_N_E/./node_modules/@noble/hashes/esm/sha3.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/lib/esm/base.mjs","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/lib/esm/bigint.mjs","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/lib/esm/decimal.mjs","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/lib/esm/native.mjs","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/lib/esm/web3.mjs","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/lib/esm/index.mjs","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/abstract/curve.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/abstract/modular.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/abstract/utils.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_u64.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/node_modules/@noble/hashes/esm/sha512.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/abstract/edwards.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/ed25519.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/node_modules/@noble/hashes/esm/sha256.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/node_modules/@noble/hashes/esm/hmac.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/abstract/weierstrass.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/_shortw_utils.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/esm/secp256k1.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_assert.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_md.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/node_modules/@noble/hashes/esm/crypto.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/@noble/curves/node_modules/@noble/hashes/esm/utils.js","webpack://_N_E/./node_modules/@solana/buffer-layout-utils/node_modules/superstruct/dist/index.mjs","webpack://_N_E/./node_modules/@solana/spl-token/lib/esm/constants.js","webpack://_N_E/./node_modules/@solana/spl-token/lib/esm/instructions/internal.js","webpack://_N_E/./node_modules/@solana/spl-token/lib/esm/instructions/types.js","webpack://_N_E/./node_modules/@solana/spl-token/lib/esm/instructions/transfer.js","webpack://_N_E/./node_modules/@solana/spl-token/lib/esm/errors.js","webpack://_N_E/./node_modules/@solana/spl-token/lib/esm/state/mint.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/esm/abstract/curve.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/esm/abstract/modular.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/esm/abstract/utils.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_u64.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/sha512.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/esm/abstract/edwards.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/esm/ed25519.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/sha256.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/hmac.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/esm/abstract/weierstrass.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/esm/_shortw_utils.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/esm/secp256k1.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_assert.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_md.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/crypto.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/utils.js","webpack://_N_E/./node_modules/@solana/web3.js/node_modules/superstruct/lib/index.es.js","webpack://_N_E/./node_modules/eventemitter3/index.mjs","webpack://_N_E/./node_modules/rpc-websockets/dist/index.browser.mjs","webpack://_N_E/<anon>"],"sourcesContent":["var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nconst buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n    if (!(b instanceof Uint8Array)) {\n        throw new TypeError('b must be a Uint8Array');\n    }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n    checkUint8Array(b);\n    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n    constructor(span, property) {\n        if (!Number.isInteger(span)) {\n            throw new TypeError('span must be an integer');\n        }\n        /** The span of the layout in bytes.\n         *\n         * Positive values are generally expected.\n         *\n         * Zero will only appear in {@link Constant}s and in {@link\n         * Sequence}s where the {@link Sequence#count|count} is zero.\n         *\n         * A negative value indicates that the span is value-specific, and\n         * must be obtained using {@link Layout#getSpan|getSpan}. */\n        this.span = span;\n        /** The property name used when this layout is represented in an\n         * Object.\n         *\n         * Used only for layouts that {@link Layout#decode|decode} to Object\n         * instances.  If left undefined the span of the unnamed layout will\n         * be treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n        return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(b, offset) {\n        if (0 > this.span) {\n            throw new RangeError('indeterminate span');\n        }\n        return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(property) {\n        const rv = Object.create(this.constructor.prototype);\n        Object.assign(rv, this);\n        rv.property = property;\n        return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(values) {\n        return undefined;\n    }\n}\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n    if (lo.property) {\n        return name + '[' + lo.property + ']';\n    }\n    return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction bindConstructorLayout(Class, layout) {\n    if ('function' !== typeof Class) {\n        throw new TypeError('Class must be constructor');\n    }\n    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n        throw new Error('Class is already bound to a layout');\n    }\n    if (!(layout && (layout instanceof Layout))) {\n        throw new TypeError('layout must be a Layout');\n    }\n    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n        throw new Error('layout is already bound to a constructor');\n    }\n    Class.layout_ = layout;\n    layout.boundConstructor_ = Class;\n    layout.makeDestinationObject = (() => new Class());\n    Object.defineProperty(Class.prototype, 'encode', {\n        value(b, offset) {\n            return layout.encode(this, b, offset);\n        },\n        writable: true,\n    });\n    Object.defineProperty(Class, 'decode', {\n        value(b, offset) {\n            return layout.decode(b, offset);\n        },\n        writable: true,\n    });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n        throw new Error('ExternalLayout is abstract');\n    }\n}\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n    constructor(elementSpan = 1, property) {\n        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n            throw new TypeError('elementSpan must be a (positive) integer');\n        }\n        super(-1, property);\n        /** The layout for individual elements of the sequence.  The value\n         * must be a positive integer.  If not provided, the value will be\n         * 1. */\n        this.elementSpan = elementSpan;\n    }\n    /** @override */\n    isCount() {\n        return true;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const rem = b.length - offset;\n        return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n    encode(src, b, offset) {\n        return 0;\n    }\n}\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n    constructor(layout, offset = 0, property) {\n        if (!(layout instanceof Layout)) {\n            throw new TypeError('layout must be a Layout');\n        }\n        if (!Number.isInteger(offset)) {\n            throw new TypeError('offset must be integer or undefined');\n        }\n        super(layout.span, property || layout.property);\n        /** The subordinated layout. */\n        this.layout = layout;\n        /** The location of {@link OffsetLayout#layout} relative to the\n         * start of another layout.\n         *\n         * The value may be positive or negative, but an error will thrown\n         * if at the point of use it goes outside the span of the Uint8Array\n         * being accessed.  */\n        this.offset = offset;\n    }\n    /** @override */\n    isCount() {\n        return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        return this.layout.encode(src, b, offset + this.offset);\n    }\n}\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.IntBE = IntBE;\nconst V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n    const hi32 = Math.floor(src / V2E32);\n    const lo32 = src - (hi32 * V2E32);\n    return { hi32, lo32 };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n    return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readUInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeUInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readUInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n        return 4;\n    }\n}\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n        return 4;\n    }\n}\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n        return 8;\n    }\n}\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n        return 8;\n    }\n}\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n    constructor(elementLayout, count, property) {\n        if (!(elementLayout instanceof Layout)) {\n            throw new TypeError('elementLayout must be a Layout');\n        }\n        if (!(((count instanceof ExternalLayout) && count.isCount())\n            || (Number.isInteger(count) && (0 <= count)))) {\n            throw new TypeError('count must be non-negative integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if ((!(count instanceof ExternalLayout))\n            && (0 < elementLayout.span)) {\n            span = count * elementLayout.span;\n        }\n        super(span, property);\n        /** The layout for individual elements of the sequence. */\n        this.elementLayout = elementLayout;\n        /** The number of elements in the sequence.\n         *\n         * This will be either a non-negative integer or an instance of\n         * {@link ExternalLayout} for which {@link\n         * ExternalLayout#isCount|isCount()} is `true`. */\n        this.count = count;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        if (0 < this.elementLayout.span) {\n            span = count * this.elementLayout.span;\n        }\n        else {\n            let idx = 0;\n            while (idx < count) {\n                span += this.elementLayout.getSpan(b, offset + span);\n                ++idx;\n            }\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const rv = [];\n        let i = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        while (i < count) {\n            rv.push(this.elementLayout.decode(b, offset));\n            offset += this.elementLayout.getSpan(b, offset);\n            i += 1;\n        }\n        return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset = 0) {\n        const elo = this.elementLayout;\n        const span = src.reduce((span, v) => {\n            return span + elo.encode(v, b, offset + span);\n        }, 0);\n        if (this.count instanceof ExternalLayout) {\n            this.count.encode(src.length, b, offset);\n        }\n        return span;\n    }\n}\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n    constructor(fields, property, decodePrefixes) {\n        if (!(Array.isArray(fields)\n            && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n            throw new TypeError('fields must be array of Layout instances');\n        }\n        if (('boolean' === typeof property)\n            && (undefined === decodePrefixes)) {\n            decodePrefixes = property;\n            property = undefined;\n        }\n        /* Verify absence of unnamed variable-length fields. */\n        for (const fd of fields) {\n            if ((0 > fd.span)\n                && (undefined === fd.property)) {\n                throw new Error('fields cannot contain unnamed variable-length layout');\n            }\n        }\n        let span = -1;\n        try {\n            span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n        }\n        catch (e) {\n            // ignore error\n        }\n        super(span, property);\n        /** The sequence of {@link Layout} values that comprise the\n         * structure.\n         *\n         * The individual elements need not be the same type, and may be\n         * either scalar or aggregate layouts.  If a member layout leaves\n         * its {@link Layout#property|property} undefined the\n         * corresponding region of the buffer associated with the element\n         * will not be mutated.\n         *\n         * @type {Layout[]} */\n        this.fields = fields;\n        /** Control behavior of {@link Layout#decode|decode()} given short\n         * buffers.\n         *\n         * In some situations a structure many be extended with additional\n         * fields over time, with older installations providing only a\n         * prefix of the full structure.  If this property is `true`\n         * decoding will accept those buffers and leave subsequent fields\n         * undefined, as long as the buffer ends at a field boundary.\n         * Defaults to `false`. */\n        this.decodePrefixes = !!decodePrefixes;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        try {\n            span = this.fields.reduce((span, fd) => {\n                const fsp = fd.getSpan(b, offset);\n                offset += fsp;\n                return span + fsp;\n            }, 0);\n        }\n        catch (e) {\n            throw new RangeError('indeterminate span');\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b, offset);\n            }\n            offset += fd.getSpan(b, offset);\n            if (this.decodePrefixes\n                && (b.length === offset)) {\n                break;\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(src, b, offset = 0) {\n        const firstOffset = offset;\n        let lastOffset = 0;\n        let lastWrote = 0;\n        for (const fd of this.fields) {\n            let span = fd.span;\n            lastWrote = (0 < span) ? span : 0;\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    lastWrote = fd.encode(fv, b, offset);\n                    if (0 > span) {\n                        /* Read the as-encoded span, which is not necessarily the\n                         * same as what we wrote. */\n                        span = fd.getSpan(b, offset);\n                    }\n                }\n            }\n            lastOffset = offset;\n            offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n        return (lastOffset + lastWrote) - firstOffset;\n    }\n    /** @override */\n    fromArray(values) {\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if ((undefined !== fd.property)\n                && (0 < values.length)) {\n                dest[fd.property] = values.shift();\n            }\n        }\n        return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        let offset = 0;\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return offset;\n            }\n            if (0 > fd.span) {\n                offset = -1;\n            }\n            else if (0 <= offset) {\n                offset += fd.span;\n            }\n        }\n        return undefined;\n    }\n}\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n    constructor(property) {\n        /** The {@link Layout#property|property} to be used when the\n         * discriminator is referenced in isolation (generally when {@link\n         * Union#decode|Union decode} cannot delegate to a specific\n         * variant). */\n        this.property = property;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(src, b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n}\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n    constructor(layout, property) {\n        if (!((layout instanceof ExternalLayout)\n            && layout.isCount())) {\n            throw new TypeError('layout must be an unsigned integer ExternalLayout');\n        }\n        super(property || layout.property || 'variant');\n        /** The {@link ExternalLayout} used to access the discriminator\n         * value. */\n        this.layout = layout;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(b, offset) {\n        return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(src, b, offset) {\n        return this.layout.encode(src, b, offset);\n    }\n}\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n    constructor(discr, defaultLayout, property) {\n        let discriminator;\n        if ((discr instanceof UInt)\n            || (discr instanceof UIntBE)) {\n            discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n        }\n        else if ((discr instanceof ExternalLayout)\n            && discr.isCount()) {\n            discriminator = new UnionLayoutDiscriminator(discr);\n        }\n        else if (!(discr instanceof UnionDiscriminator)) {\n            throw new TypeError('discr must be a UnionDiscriminator '\n                + 'or an unsigned integer layout');\n        }\n        else {\n            discriminator = discr;\n        }\n        if (undefined === defaultLayout) {\n            defaultLayout = null;\n        }\n        if (!((null === defaultLayout)\n            || (defaultLayout instanceof Layout))) {\n            throw new TypeError('defaultLayout must be null or a Layout');\n        }\n        if (null !== defaultLayout) {\n            if (0 > defaultLayout.span) {\n                throw new Error('defaultLayout must have constant span');\n            }\n            if (undefined === defaultLayout.property) {\n                defaultLayout = defaultLayout.replicate('content');\n            }\n        }\n        /* The union span can be estimated only if there's a default\n         * layout.  The union spans its default layout, plus any prefix\n         * variant layout.  By construction both layouts, if present, have\n         * non-negative span. */\n        let span = -1;\n        if (defaultLayout) {\n            span = defaultLayout.span;\n            if ((0 <= span) && ((discr instanceof UInt)\n                || (discr instanceof UIntBE))) {\n                span += discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The interface for the discriminator value in isolation.\n         *\n         * This a {@link UnionDiscriminator} either passed to the\n         * constructor or synthesized from the `discr` constructor\n         * argument.  {@link\n         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n         * `true` iff the `discr` parameter was a non-offset {@link\n         * Layout} instance. */\n        this.discriminator = discriminator;\n        /** `true` if the {@link Union#discriminator|discriminator} is the\n         * first field in the union.\n         *\n         * If `false` the discriminator is obtained from somewhere\n         * else. */\n        this.usesPrefixDiscriminator = (discr instanceof UInt)\n            || (discr instanceof UIntBE);\n        /** The layout for non-discriminator content when the value of the\n         * discriminator is not recognized.\n         *\n         * This is the value passed to the constructor.  It is\n         * structurally equivalent to the second component of {@link\n         * Union#layout|layout} but may have a different property\n         * name. */\n        this.defaultLayout = defaultLayout;\n        /** A registry of allowed variants.\n         *\n         * The keys are unsigned integers which should be compatible with\n         * {@link Union.discriminator|discriminator}.  The property value\n         * is the corresponding {@link VariantLayout} instances assigned\n         * to this union by {@link Union#addVariant|addVariant}.\n         *\n         * **NOTE** The registry remains mutable so that variants can be\n         * {@link Union#addVariant|added} at any time.  Users should not\n         * manipulate the content of this property. */\n        this.registry = {};\n        /* Private variable used when invoking getSourceVariant */\n        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n        /** Function to infer the variant selected by a source object.\n         *\n         * Defaults to {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n         * be overridden using {@link\n         * Union#configGetSourceVariant|configGetSourceVariant}.\n         *\n         * @param {Object} src - as with {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * @returns {(undefined|VariantLayout)} The default variant\n         * (`undefined`) or first registered variant that uses a property\n         * available in `src`. */\n        this.getSourceVariant = function (src) {\n            return boundGetSourceVariant(src);\n        };\n        /** Function to override the implementation of {@link\n         * Union#getSourceVariant|getSourceVariant}.\n         *\n         * Use this if the desired variant cannot be identified using the\n         * algorithm of {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * **NOTE** The provided function will be invoked bound to this\n         * Union instance, providing local access to {@link\n         * Union#registry|registry}.\n         *\n         * @param {Function} gsv - a function that follows the API of\n         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n        this.configGetSourceVariant = function (gsv) {\n            boundGetSourceVariant = gsv.bind(this);\n        };\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        /* Default layouts always have non-negative span, so we don't have\n         * one and we have to recognize the variant which will in turn\n         * determine the span. */\n        const vlo = this.getVariant(b, offset);\n        if (!vlo) {\n            throw new Error('unable to determine span for unrecognized variant');\n        }\n        return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(src) {\n        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n            if (this.defaultLayout && this.defaultLayout.property\n                && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n                return undefined;\n            }\n            const vlo = this.registry[src[this.discriminator.property]];\n            if (vlo\n                && ((!vlo.layout)\n                    || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {\n                return vlo;\n            }\n        }\n        else {\n            for (const tag in this.registry) {\n                const vlo = this.registry[tag];\n                if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n                    return vlo;\n                }\n            }\n        }\n        throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(b, offset = 0) {\n        let dest;\n        const dlo = this.discriminator;\n        const discr = dlo.decode(b, offset);\n        const clo = this.registry[discr];\n        if (undefined === clo) {\n            const defaultLayout = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dest = this.makeDestinationObject();\n            dest[dlo.property] = discr;\n            // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n        }\n        else {\n            dest = clo.decode(b, offset);\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(src, b, offset = 0) {\n        const vlo = this.getSourceVariant(src);\n        if (undefined === vlo) {\n            const dlo = this.discriminator;\n            // this.defaultLayout is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const clo = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dlo.encode(src[dlo.property], b, offset);\n            // clo.property is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n        }\n        return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(variant, layout, property) {\n        const rv = new VariantLayout(this, variant, layout, property);\n        this.registry[variant] = rv;\n        return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(vb, offset = 0) {\n        let variant;\n        if (vb instanceof Uint8Array) {\n            variant = this.discriminator.decode(vb, offset);\n        }\n        else {\n            variant = vb;\n        }\n        return this.registry[variant];\n    }\n}\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n    constructor(union, variant, layout, property) {\n        if (!(union instanceof Union)) {\n            throw new TypeError('union must be a Union');\n        }\n        if ((!Number.isInteger(variant)) || (0 > variant)) {\n            throw new TypeError('variant must be a (non-negative) integer');\n        }\n        if (('string' === typeof layout)\n            && (undefined === property)) {\n            property = layout;\n            layout = null;\n        }\n        if (layout) {\n            if (!(layout instanceof Layout)) {\n                throw new TypeError('layout must be a Layout');\n            }\n            if ((null !== union.defaultLayout)\n                && (0 <= layout.span)\n                && (layout.span > union.defaultLayout.span)) {\n                throw new Error('variant span exceeds span of containing union');\n            }\n            if ('string' !== typeof property) {\n                throw new TypeError('variant must have a String property');\n            }\n        }\n        let span = union.span;\n        if (0 > union.span) {\n            span = layout ? layout.span : 0;\n            if ((0 <= span) && union.usesPrefixDiscriminator) {\n                span += union.discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The {@link Union} to which this variant belongs. */\n        this.union = union;\n        /** The unsigned integral value identifying this variant within\n         * the {@link Union#discriminator|discriminator} of the containing\n         * union. */\n        this.variant = variant;\n        /** The {@link Layout} to be used when reading/writing the\n         * non-discriminator part of the {@link\n         * VariantLayout#union|union}.  If `null` the variant carries no\n         * data. */\n        this.layout = layout || null;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            /* Will be equal to the containing union span if that is not\n             * variable. */\n            return this.span;\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        /* Span is defined solely by the variant (and prefix discriminator) */\n        let span = 0;\n        if (this.layout) {\n            span = this.layout.getSpan(b, offset + contentOffset);\n        }\n        return contentOffset + span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        if (this !== this.union.getVariant(b, offset)) {\n            throw new Error('variant mismatch');\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout) {\n            dest[this.property] = this.layout.decode(b, offset + contentOffset);\n        }\n        else if (this.property) {\n            dest[this.property] = true;\n        }\n        else if (this.union.usesPrefixDiscriminator) {\n            dest[this.union.discriminator.property] = this.variant;\n        }\n        return dest;\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout\n            && (!Object.prototype.hasOwnProperty.call(src, this.property))) {\n            throw new TypeError('variant lacks property ' + this.property);\n        }\n        this.union.discriminator.encode(this.variant, b, offset);\n        let span = contentOffset;\n        if (this.layout) {\n            this.layout.encode(src[this.property], b, offset + contentOffset);\n            span += this.layout.getSpan(b, offset + contentOffset);\n            if ((0 <= this.union.span)\n                && (span > this.union.span)) {\n                throw new Error('encoded variant overruns containing union');\n            }\n        }\n        return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(values) {\n        if (this.layout) {\n            return this.layout.fromArray(values);\n        }\n        return undefined;\n    }\n}\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n    if (0 > v) {\n        v += 0x100000000;\n    }\n    return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n    constructor(word, msb, property) {\n        if (!((word instanceof UInt)\n            || (word instanceof UIntBE))) {\n            throw new TypeError('word must be a UInt or UIntBE layout');\n        }\n        if (('string' === typeof msb)\n            && (undefined === property)) {\n            property = msb;\n            msb = false;\n        }\n        if (4 < word.span) {\n            throw new RangeError('word cannot exceed 32 bits');\n        }\n        super(word.span, property);\n        /** The layout used for the packed value.  {@link BitField}\n         * instances are packed sequentially depending on {@link\n         * BitStructure#msb|msb}. */\n        this.word = word;\n        /** Whether the bit sequences are packed starting at the most\n         * significant bit growing down (`true`), or the least significant\n         * bit growing up (`false`).\n         *\n         * **NOTE** Regardless of this value, the least significant bit of\n         * any {@link BitField} value is the least significant bit of the\n         * corresponding section of the packed value. */\n        this.msb = !!msb;\n        /** The sequence of {@link BitField} layouts that comprise the\n         * packed structure.\n         *\n         * **NOTE** The array remains mutable to allow fields to be {@link\n         * BitStructure#addField|added} after construction.  Users should\n         * not manipulate the content of this property.*/\n        this.fields = [];\n        /* Storage for the value.  Capture a variable instead of using an\n         * instance property because we don't want anything to change the\n         * value without going through the mutator. */\n        let value = 0;\n        this._packedSetValue = function (v) {\n            value = fixBitwiseResult(v);\n            return this;\n        };\n        this._packedGetValue = function () {\n            return value;\n        };\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b);\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(src, b, offset = 0) {\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    fd.encode(fv);\n                }\n            }\n        }\n        return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(bits, property) {\n        const bf = new BitField(this, bits, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(property) {\n        // This is my Boolean, not the Javascript one.\n        const bf = new Boolean(this, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n}\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n    constructor(container, bits, property) {\n        if (!(container instanceof BitStructure)) {\n            throw new TypeError('container must be a BitStructure');\n        }\n        if ((!Number.isInteger(bits)) || (0 >= bits)) {\n            throw new TypeError('bits must be positive integer');\n        }\n        const totalBits = 8 * container.span;\n        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n        if ((bits + usedBits) > totalBits) {\n            throw new Error('bits too long for span remainder ('\n                + (totalBits - usedBits) + ' of '\n                + totalBits + ' remain)');\n        }\n        /** The {@link BitStructure} instance to which this bit field\n         * belongs. */\n        this.container = container;\n        /** The span of this value in bits. */\n        this.bits = bits;\n        /** A mask of {@link BitField#bits|bits} bits isolating value bits\n         * that fit within the field.\n         *\n         * That is, it masks a value that has not yet been shifted into\n         * position within its containing packed integer. */\n        this.valueMask = (1 << bits) - 1;\n        if (32 === bits) { // shifted value out of range\n            this.valueMask = 0xFFFFFFFF;\n        }\n        /** The offset of the value within the containing packed unsigned\n         * integer.  The least significant bit of the packed value is at\n         * offset zero, regardless of bit ordering used. */\n        this.start = usedBits;\n        if (this.container.msb) {\n            this.start = totalBits - usedBits - bits;\n        }\n        /** A mask of {@link BitField#bits|bits} isolating the field value\n         * within the containing packed unsigned integer. */\n        this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n        /** The property name used when this bitfield is represented in an\n         * Object.\n         *\n         * Intended to be functionally equivalent to {@link\n         * Layout#property}.\n         *\n         * If left undefined the corresponding span of bits will be\n         * treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(b, offset) {\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(word & this.wordMask);\n        const value = wordValue >>> this.start;\n        return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(value) {\n        if ('number' !== typeof value\n            || !Number.isInteger(value)\n            || (value !== fixBitwiseResult(value & this.valueMask))) {\n            throw new TypeError(nameWithProperty('BitField.encode', this)\n                + ' value must be integer not exceeding ' + this.valueMask);\n        }\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(value << this.start);\n        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n            | wordValue);\n    }\n}\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n    constructor(container, property) {\n        super(container, 1, property);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(b, offset) {\n        return !!super.decode(b, offset);\n    }\n    /** @override */\n    encode(value) {\n        if ('boolean' === typeof value) {\n            // BitField requires integer values\n            value = +value;\n        }\n        super.encode(value);\n    }\n}\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n    constructor(length, property) {\n        if (!(((length instanceof ExternalLayout) && length.isCount())\n            || (Number.isInteger(length) && (0 <= length)))) {\n            throw new TypeError('length must be positive integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if (!(length instanceof ExternalLayout)) {\n            span = length;\n        }\n        super(span, property);\n        /** The number of bytes in the blob.\n         *\n         * This may be a non-negative integer, or an instance of {@link\n         * ExternalLayout} that satisfies {@link\n         * ExternalLayout#isCount|isCount()}. */\n        this.length = length;\n    }\n    /** @override */\n    getSpan(b, offset) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset) {\n        let span = this.length;\n        if (this.length instanceof ExternalLayout) {\n            span = src.length;\n        }\n        if (!(src instanceof Uint8Array && span === src.length)) {\n            throw new TypeError(nameWithProperty('Blob.encode', this)\n                + ' requires (length ' + span + ') Uint8Array as src');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Uint8Array');\n        }\n        const srcBuffer = uint8ArrayToBuffer(src);\n        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n        if (this.length instanceof ExternalLayout) {\n            this.length.encode(span, b, offset);\n        }\n        return span;\n    }\n}\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n    constructor(property) {\n        super(-1, property);\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        let idx = offset;\n        while ((idx < b.length) && (0 !== b[idx])) {\n            idx += 1;\n        }\n        return 1 + idx - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        const buffer = uint8ArrayToBuffer(b);\n        srcb.copy(buffer, offset);\n        buffer[offset + span] = 0;\n        return span + 1;\n    }\n}\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n    constructor(maxSpan, property) {\n        if (('string' === typeof maxSpan) && (undefined === property)) {\n            property = maxSpan;\n            maxSpan = undefined;\n        }\n        if (undefined === maxSpan) {\n            maxSpan = -1;\n        }\n        else if (!Number.isInteger(maxSpan)) {\n            throw new TypeError('maxSpan must be an integer');\n        }\n        super(-1, property);\n        /** The maximum span of the layout in bytes.\n         *\n         * Positive values are generally expected.  Zero is abnormal.\n         * Attempts to encode or decode a value that exceeds this length\n         * will throw a `RangeError`.\n         *\n         * A negative value indicates that there is no bound on the length\n         * of the content. */\n        this.maxSpan = maxSpan;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        return b.length - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        srcb.copy(uint8ArrayToBuffer(b), offset);\n        return span;\n    }\n}\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n    constructor(value, property) {\n        super(0, property);\n        /** The value produced by this constant when the layout is {@link\n         * Constant#decode|decoded}.\n         *\n         * Any JavaScript value including `null` and `undefined` is\n         * permitted.\n         *\n         * **WARNING** If `value` passed in the constructor was not\n         * frozen, it is possible for users of decoded values to change\n         * the content of the value. */\n        this.value = value;\n    }\n    /** @override */\n    decode(b, offset) {\n        return this.value;\n    }\n    /** @override */\n    encode(src, b, offset) {\n        /* Constants take no space */\n        return 0;\n    }\n}\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = ((property) => new UInt(1, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = ((property) => new UInt(2, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = ((property) => new UInt(3, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = ((property) => new UInt(4, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = ((property) => new UInt(5, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = ((property) => new UInt(6, property));\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = ((property) => new NearUInt64(property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = ((property) => new UIntBE(2, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = ((property) => new UIntBE(3, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = ((property) => new UIntBE(4, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = ((property) => new UIntBE(5, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = ((property) => new UIntBE(6, property));\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = ((property) => new NearUInt64BE(property));\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = ((property) => new Int(1, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = ((property) => new Int(2, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = ((property) => new Int(3, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = ((property) => new Int(4, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = ((property) => new Int(5, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = ((property) => new Int(6, property));\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = ((property) => new NearInt64(property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = ((property) => new IntBE(2, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = ((property) => new IntBE(3, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = ((property) => new IntBE(4, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = ((property) => new IntBE(5, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = ((property) => new IntBE(6, property));\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = ((property) => new NearInt64BE(property));\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = ((property) => new Float(property));\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = ((property) => new FloatBE(property));\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = ((property) => new Double(property));\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = ((property) => new DoubleBE(property));\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n/** Factory for {@link CString} values. */\nexports.cstr = ((property) => new CString(property));\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n/** Factory for {@link Constant} values. */\nexports.constant = ((value, property) => new Constant(value, property));\n//# sourceMappingURL=Layout.js.map","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore\nconst eventemitter3_1 = require(\"eventemitter3\");\nconst utils_1 = require(\"./utils\");\nclass CommonClient extends eventemitter3_1.EventEmitter {\n    address;\n    rpc_id;\n    queue;\n    options;\n    autoconnect;\n    ready;\n    reconnect;\n    reconnect_timer_id;\n    reconnect_interval;\n    max_reconnects;\n    rest_options;\n    current_reconnects;\n    generate_request_id;\n    socket;\n    webSocketFactory;\n    dataPack;\n    /**\n     * Instantiate a Client class.\n     * @constructor\n     * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n     * @param {String} address - url to a websocket server\n     * @param {Object} options - ws options object with reconnect parameters\n     * @param {Function} generate_request_id - custom generation request Id\n     * @param {DataPack} dataPack - data pack contains encoder and decoder\n     * @return {CommonClient}\n     */\n    constructor(webSocketFactory, address = \"ws://localhost:8080\", { autoconnect = true, reconnect = true, reconnect_interval = 1000, max_reconnects = 5, ...rest_options } = {}, generate_request_id, dataPack) {\n        super();\n        this.webSocketFactory = webSocketFactory;\n        this.queue = {};\n        this.rpc_id = 0;\n        this.address = address;\n        this.autoconnect = autoconnect;\n        this.ready = false;\n        this.reconnect = reconnect;\n        this.reconnect_timer_id = undefined;\n        this.reconnect_interval = reconnect_interval;\n        this.max_reconnects = max_reconnects;\n        this.rest_options = rest_options;\n        this.current_reconnects = 0;\n        this.generate_request_id = generate_request_id || (() => ++this.rpc_id);\n        if (!dataPack)\n            this.dataPack = new utils_1.DefaultDataPack();\n        else\n            this.dataPack = dataPack;\n        if (this.autoconnect)\n            this._connect(this.address, {\n                autoconnect: this.autoconnect,\n                reconnect: this.reconnect,\n                reconnect_interval: this.reconnect_interval,\n                max_reconnects: this.max_reconnects,\n                ...this.rest_options\n            });\n    }\n    /**\n     * Connects to a defined server if not connected already.\n     * @method\n     * @return {Undefined}\n     */\n    connect() {\n        if (this.socket)\n            return;\n        this._connect(this.address, {\n            autoconnect: this.autoconnect,\n            reconnect: this.reconnect,\n            reconnect_interval: this.reconnect_interval,\n            max_reconnects: this.max_reconnects,\n            ...this.rest_options\n        });\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n    call(method, params, timeout, ws_opts) {\n        if (!ws_opts && \"object\" === typeof timeout) {\n            ws_opts = timeout;\n            timeout = null;\n        }\n        return new Promise((resolve, reject) => {\n            if (!this.ready)\n                return reject(new Error(\"socket not ready\"));\n            const rpc_id = this.generate_request_id(method, params);\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params: params || undefined,\n                id: rpc_id\n            };\n            this.socket.send(this.dataPack.encode(message), ws_opts, (error) => {\n                if (error)\n                    return reject(error);\n                this.queue[rpc_id] = { promise: [resolve, reject] };\n                if (timeout) {\n                    this.queue[rpc_id].timeout = setTimeout(() => {\n                        delete this.queue[rpc_id];\n                        reject(new Error(\"reply timeout\"));\n                    }, timeout);\n                }\n            });\n        });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n    async login(params) {\n        const resp = await this.call(\"rpc.login\", params);\n        if (!resp)\n            throw new Error(\"authentication failed\");\n        return resp;\n    }\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n    async listMethods() {\n        return await this.call(\"__listMethods\");\n    }\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n    notify(method, params) {\n        return new Promise((resolve, reject) => {\n            if (!this.ready)\n                return reject(new Error(\"socket not ready\"));\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params\n            };\n            this.socket.send(this.dataPack.encode(message), (error) => {\n                if (error)\n                    return reject(error);\n                resolve();\n            });\n        });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n    async subscribe(event) {\n        if (typeof event === \"string\")\n            event = [event];\n        const result = await this.call(\"rpc.on\", event);\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n        return result;\n    }\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n    async unsubscribe(event) {\n        if (typeof event === \"string\")\n            event = [event];\n        const result = await this.call(\"rpc.off\", event);\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\"Failed unsubscribing from an event with: \" + result);\n        return result;\n    }\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n    close(code, data) {\n        this.socket.close(code || 1000, data);\n    }\n    /**\n     * Enable / disable automatic reconnection.\n     * @method\n     * @param {Boolean} reconnect - enable / disable reconnection\n     * @return {Undefined}\n     */\n    setAutoReconnect(reconnect) {\n        this.reconnect = reconnect;\n    }\n    /**\n     * Set the interval between reconnection attempts.\n     * @method\n     * @param {Number} interval - reconnection interval in milliseconds\n     * @return {Undefined}\n     */\n    setReconnectInterval(interval) {\n        this.reconnect_interval = interval;\n    }\n    /**\n     * Set the maximum number of reconnection attempts.\n     * @method\n     * @param {Number} max_reconnects - maximum reconnection attempts\n     * @return {Undefined}\n     */\n    setMaxReconnects(max_reconnects) {\n        this.max_reconnects = max_reconnects;\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n    _connect(address, options) {\n        clearTimeout(this.reconnect_timer_id);\n        this.socket = this.webSocketFactory(address, options);\n        this.socket.addEventListener(\"open\", () => {\n            this.ready = true;\n            this.emit(\"open\");\n            this.current_reconnects = 0;\n        });\n        this.socket.addEventListener(\"message\", ({ data: message }) => {\n            if (message instanceof ArrayBuffer)\n                message = Buffer.from(message).toString();\n            try {\n                message = this.dataPack.decode(message);\n            }\n            catch (error) {\n                return;\n            }\n            // check if any listeners are attached and forward event\n            if (message.notification && this.listeners(message.notification).length) {\n                if (!Object.keys(message.params).length)\n                    return this.emit(message.notification);\n                const args = [message.notification];\n                if (message.params.constructor === Object)\n                    args.push(message.params);\n                else\n                    // using for-loop instead of unshift/spread because performance is better\n                    for (let i = 0; i < message.params.length; i++)\n                        args.push(message.params[i]);\n                // run as microtask so that pending queue messages are resolved first\n                // eslint-disable-next-line prefer-spread\n                return Promise.resolve().then(() => { this.emit.apply(this, args); });\n            }\n            if (!this.queue[message.id]) {\n                // general JSON RPC 2.0 events\n                if (message.method) {\n                    // run as microtask so that pending queue messages are resolved first\n                    return Promise.resolve().then(() => {\n                        this.emit(message.method, message?.params);\n                    });\n                }\n                return;\n            }\n            // reject early since server's response is invalid\n            if (\"error\" in message === \"result\" in message)\n                this.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" +\n                    \" or \\\"error\\\", but not both.\"));\n            if (this.queue[message.id].timeout)\n                clearTimeout(this.queue[message.id].timeout);\n            if (message.error)\n                this.queue[message.id].promise[1](message.error);\n            else\n                this.queue[message.id].promise[0](message.result);\n            delete this.queue[message.id];\n        });\n        this.socket.addEventListener(\"error\", (error) => this.emit(\"error\", error));\n        this.socket.addEventListener(\"close\", ({ code, reason }) => {\n            if (this.ready) // Delay close event until internal state is updated\n                setTimeout(() => this.emit(\"close\", code, reason), 0);\n            this.ready = false;\n            this.socket = undefined;\n            if (code === 1000)\n                return;\n            this.current_reconnects++;\n            if (this.reconnect && ((this.max_reconnects > this.current_reconnects) ||\n                this.max_reconnects === 0))\n                this.reconnect_timer_id = setTimeout(() => this._connect(address, options), this.reconnect_interval);\n        });\n    }\n}\nexports.default = CommonClient;\n","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst eventemitter3_1 = require(\"eventemitter3\");\nclass WebSocketBrowserImpl extends eventemitter3_1.EventEmitter {\n    socket;\n    /** Instantiate a WebSocket class\n     * @constructor\n     * @param {String} address - url to a websocket server\n     * @param {(Object)} options - websocket options\n     * @param {(String|Array)} protocols - a list of protocols\n     * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n     */\n    constructor(address, options, protocols) {\n        super();\n        this.socket = new window.WebSocket(address, protocols);\n        this.socket.onopen = () => this.emit(\"open\");\n        this.socket.onmessage = (event) => this.emit(\"message\", event.data);\n        this.socket.onerror = (error) => this.emit(\"error\", error);\n        this.socket.onclose = (event) => {\n            this.emit(\"close\", event.code, event.reason);\n        };\n    }\n    /**\n     * Sends data through a websocket connection\n     * @method\n     * @param {(String|Object)} data - data to be sent via websocket\n     * @param {Object} optionsOrCallback - ws options\n     * @param {Function} callback - a callback called once the data is sent\n     * @return {Undefined}\n     */\n    send(data, optionsOrCallback, callback) {\n        const cb = callback || optionsOrCallback;\n        try {\n            this.socket.send(data);\n            cb();\n        }\n        catch (error) {\n            cb(error);\n        }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n    close(code, reason) {\n        this.socket.close(code, reason);\n    }\n    addEventListener(type, listener, options) {\n        this.socket.addEventListener(type, listener, options);\n    }\n}\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\nfunction default_1(address, options) {\n    return new WebSocketBrowserImpl(address, options);\n}\nexports.default = default_1;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createError = exports.DefaultDataPack = void 0;\nconst errors = new Map([\n    [-32000, \"Event not provided\"],\n    [-32600, \"Invalid Request\"],\n    [-32601, \"Method not found\"],\n    [-32602, \"Invalid params\"],\n    [-32603, \"Internal error\"],\n    [-32604, \"Params not found\"],\n    [-32605, \"Method forbidden\"],\n    [-32606, \"Event forbidden\"],\n    [-32700, \"Parse error\"]\n]);\nclass DefaultDataPack {\n    encode(value) {\n        return JSON.stringify(value);\n    }\n    decode(value) {\n        return JSON.parse(value);\n    }\n}\nexports.DefaultDataPack = DefaultDataPack;\n/**\n * Creates a JSON-RPC 2.0-compliant error.\n * @param {Number} code - error code\n * @param {String} details - error details\n * @return {Object}\n */\nfunction createError(code, details) {\n    const error = {\n        code: code,\n        message: errors.get(code) || \"Internal Server Error\"\n    };\n    if (details)\n        error[\"data\"] = details;\n    return error;\n}\nexports.createError = createError;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;","import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;","import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;","import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;","// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;","import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;","export default '00000000-0000-0000-0000-000000000000';","import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nexport default version;","export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';","/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","/**\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\n * Different from older hashes, the internal state is bigger than output size.\n *\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\n * [Website](https://keccak.team/keccak.html),\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\n *\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\n * @module\n */\nimport { abytes, aexists, anumber, aoutput } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { byteSwap32, Hash, isLE, toBytes, u32, wrapConstructor, wrapXOFConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n/** `keccakf1600` internal function, additionally allows to adjust round count. */\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\n/** Keccak sponge function. */\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        anumber(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        // 0 < blockLen < 200\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        if (!isLE)\n            byteSwap32(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!isLE)\n            byteSwap32(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        aexists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        aexists(this, false);\n        abytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        anumber(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        aoutput(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n/** SHA3-224 hash function. */\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/** SHA3-256 hash function. Different from keccak-256. */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\n/** SHA3-384 hash function. */\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\n/** SHA3-512 hash function. */\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\n/** keccak-224 hash function. */\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/** keccak-256 hash function. Different from SHA3-256. */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\n/** keccak-384 hash function. */\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\n/** keccak-512 hash function. */\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\n/** SHAKE128 XOF with 128-bit security. */\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\n/** SHAKE256 XOF with 256-bit security. */\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","export const encodeDecode = (layout) => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n//# sourceMappingURL=base.js.map","import { blob } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base.mjs';\nexport const bigInt = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntLE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferLE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const bigIntBE = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntBE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferBE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const u64 = bigInt(8);\nexport const u64be = bigIntBE(8);\nexport const u128 = bigInt(16);\nexport const u128be = bigIntBE(16);\nexport const u192 = bigInt(24);\nexport const u192be = bigIntBE(24);\nexport const u256 = bigInt(32);\nexport const u256be = bigIntBE(32);\n//# sourceMappingURL=bigint.js.map","import BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base.mjs';\nimport { u128 } from './bigint.mjs';\nexport const WAD = new BigNumber('1e+18');\nexport const decimal = (property) => {\n    const layout = u128(property);\n    const { encode, decode } = encodeDecode(layout);\n    const decimalLayout = layout;\n    decimalLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset).toString();\n        return new BigNumber(src).div(WAD);\n    };\n    decimalLayout.encode = (decimal, buffer, offset) => {\n        const src = BigInt(decimal.times(WAD).integerValue().toString());\n        return encode(src, buffer, offset);\n    };\n    return decimalLayout;\n};\n//# sourceMappingURL=decimal.js.map","import { u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base.mjs';\nexport const bool = (property) => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n    const boolLayout = layout;\n    boolLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n    boolLayout.encode = (bool, buffer, offset) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n    return boolLayout;\n};\n//# sourceMappingURL=native.js.map","import { blob } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base.mjs';\nexport const publicKey = (property) => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n    const publicKeyLayout = layout;\n    publicKeyLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n    publicKeyLayout.encode = (publicKey, buffer, offset) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n    return publicKeyLayout;\n};\n//# sourceMappingURL=web3.js.map","export * from './base.mjs';\nexport * from './bigint.mjs';\nexport * from './decimal.mjs';\nexport * from './native.mjs';\nexport * from './web3.mjs';\n//# sourceMappingURL=index.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject, bitLen } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, bits) {\n    validateW(W, bits);\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    return {\n        constTimeNegate,\n        hasPrecomputes(elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n, p = c.ZERO) {\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = calcWOpts(W, bits);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */\n        wNAFUnsafe(W, precomputes, n, acc = c.ZERO) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                if (n === _0n)\n                    break; // No need to go over empty scalar\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                if (wbits === 0)\n                    continue;\n                let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n                if (wbits < 0)\n                    curr = curr.negate();\n                // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n                acc = acc.add(curr);\n            }\n            return acc;\n        },\n        getPrecomputes(W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1)\n                    pointPrecomputes.set(P, transform(comp));\n            }\n            return comp;\n        },\n        wNAFCached(P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe(P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1)\n                return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    if (points.length !== scalars.length)\n        throw new Error('arrays of points and scalars must have equal length');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(points.length));\n    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n    const MASK = (1 << windowSize) - 1;\n    const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < scalars.length; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = BigInt((1 << windowSize) - 1);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// prettier-ignore\nconst _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (modulo <= _0n)\n        throw new Error('invalid modulus');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++) {\n        // Crash instead of infinity loop, we cannot reasonable count until P.\n        if (Z > 1000)\n            throw new Error('Cannot find square root: likely non-prime P');\n    }\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\nexport function FpLegendre(order) {\n    // (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n    // (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n    return (f, x) => f.pow(x, legendreConst);\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendre = FpLegendre(f.ORDER);\n    return (x) => {\n        const p = legendre(f, x);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * NOTE: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// BigUint64Array is too slow as per 2024, so we implement it using Uint32Array.\n// TODO: re-check https://issues.chromium.org/issues/42212588\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { validateBasic, wNAF, pippenger, } from './curve.js';\nimport { mod, Field } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, memoized, abool } from './utils.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(curve, {\n        hash: 'function',\n        a: 'bigint',\n        d: 'bigint',\n        randomBytes: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        domain: 'function',\n        uvRatio: 'function',\n        mapToCurve: 'function',\n    });\n    // Set defaults\n    return Object.freeze({ ...opts });\n}\n/**\n * Creates Twisted Edwards curve with EdDSA signatures.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h\n * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })\n */\nexport function twistedEdwards(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;\n    // Important:\n    // There are some places where Fp.BYTES is used instead of nByteLength.\n    // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n    // TODO: test and find curves which behave otherwise.\n    const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n    const modP = Fp.create; // Function overrides\n    const Fn = Field(CURVE.n, CURVE.nBitLength);\n    // sqrt(u/v)\n    const uvRatio = CURVE.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = CURVE.domain ||\n        ((data, ctx, phflag) => {\n            abool('phflag', phflag);\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    // 0 <= n < MASK\n    // Coordinates larger than Fp.ORDER are allowed for zip215\n    function aCoordinate(title, n) {\n        ut.aInRange('coordinate ' + title, n, _0n, MASK);\n    }\n    function assertPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    const toAffineMemo = memoized((p, iz) => {\n        const { ex: x, ey: y, ez: z } = p;\n        const is0 = p.is0();\n        if (iz == null)\n            iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n        const ax = modP(x * iz);\n        const ay = modP(y * iz);\n        const zz = modP(z * iz);\n        if (is0)\n            return { x: _0n, y: _1n };\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    const assertValidMemo = memoized((p) => {\n        const { a, d } = CURVE;\n        if (p.is0())\n            throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n        // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n        // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n        const { ex: X, ey: Y, ez: Z, et: T } = p;\n        const X2 = modP(X * X); // X²\n        const Y2 = modP(Y * Y); // Y²\n        const Z2 = modP(Z * Z); // Z²\n        const Z4 = modP(Z2 * Z2); // Z⁴\n        const aX2 = modP(X2 * a); // aX²\n        const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n        const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n        if (left !== right)\n            throw new Error('bad point: equation left != right (1)');\n        // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n        const XY = modP(X * Y);\n        const ZT = modP(Z * T);\n        if (XY !== ZT)\n            throw new Error('bad point: equation left != right (2)');\n        return true;\n    });\n    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = ex;\n            this.ey = ey;\n            this.ez = ez;\n            this.et = et;\n            aCoordinate('x', ex);\n            aCoordinate('y', ey);\n            aCoordinate('z', ez);\n            aCoordinate('t', et);\n            Object.freeze(this);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            aCoordinate('x', x);\n            aCoordinate('y', y);\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.ez));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        // Compare one point to another.\n        equals(other) {\n            assertPoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            assertPoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            // Faster algo for adding 2 Extended Points when curve's a=-1.\n            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n            // Cost: 8M + 8add + 2*2.\n            // Note: It does not check whether the `other` point is valid.\n            if (a === BigInt(-1)) {\n                const A = modP((Y1 - X1) * (Y2 + X2));\n                const B = modP((Y1 + X1) * (Y2 - X2));\n                const F = modP(B - A);\n                if (F === _0n)\n                    return this.double(); // Same point. Tests say it doesn't affect timing\n                const C = modP(Z1 * _2n * T2);\n                const D = modP(T1 * _2n * Z2);\n                const E = D + C;\n                const G = B + A;\n                const H = D - C;\n                const X3 = modP(E * F);\n                const Y3 = modP(G * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const n = scalar;\n            ut.aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n            const { p, f } = this.wNAF(n);\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n        multiplyUnsafe(scalar, acc = Point.ZERO) {\n            const n = scalar;\n            ut.aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n            if (n === _0n)\n                return I;\n            if (this.is0() || n === _1n)\n                return this;\n            return wnaf.wNAFCachedUnsafe(this, n, Point.normalizeZ, acc);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        clearCofactor() {\n            const { h: cofactor } = CURVE;\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n            abool('zip215', zip215);\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = ut.bytesToNumberLE(normed);\n            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n            // RFC8032 prohibits >= p, but ZIP215 doesn't\n            // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n            // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n            const max = zip215 ? MASK : Fp.ORDER;\n            ut.aInRange('pointHex.y', y, _0n, max);\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateKey(privKey) {\n            return getExtendedPublicKey(privKey).point;\n        }\n        toRawBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        toHex() {\n            return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    const { BASE: G, ZERO: I } = Point;\n    const wnaf = wNAF(Point, nByteLength * 8);\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        return modN(ut.bytesToNumberLE(hash));\n    }\n    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n    function getExtendedPublicKey(key) {\n        const len = Fp.BYTES;\n        key = ensureBytes('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toRawBytes(); // Uint8Array representation\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n        const msg = ut.concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toRawBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        ut.aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n        const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n        return ensureBytes('result', res, Fp.BYTES * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    /**\n     * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n     * An extended group equation is checked.\n     */\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = ensureBytes('message', msg);\n        publicKey = ensureBytes('publicKey', publicKey, len);\n        if (zip215 !== undefined)\n            abool('zip215', zip215);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n        let A, R, SB;\n        try {\n            // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n            // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n            // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // Extended group equation\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n    }\n    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n        randomPrivateKey: () => randomBytes(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3));\n            return point;\n        },\n    };\n    return {\n        CURVE,\n        getPublicKey,\n        sign,\n        verify,\n        ExtendedPoint: Point,\n        utils,\n    };\n}\n//# sourceMappingURL=edwards.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { createHasher, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE, } from './abstract/utils.js';\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\nfunction ed25519_pow_2_252_3(x) {\n    // prettier-ignore\n    const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n    const P = ED25519_P;\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P; // x^3, 11\n    const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n    const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n    const b10 = (pow2(b5, _5n, P) * b5) % P;\n    const b20 = (pow2(b10, _10n, P) * b10) % P;\n    const b40 = (pow2(b20, _20n, P) * b20) % P;\n    const b80 = (pow2(b40, _40n, P) * b40) % P;\n    const b160 = (pow2(b80, _80n, P) * b80) % P;\n    const b240 = (pow2(b160, _80n, P) * b80) % P;\n    const b250 = (pow2(b240, _10n, P) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n    const P = ED25519_P;\n    const v3 = mod(v * v * v, P); // v³\n    const v7 = mod(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = mod(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if (isNegativeLE(x, P))\n        x = mod(-x, P);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n    '0100000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n    '0000000000000000000000000000000000000000000000000000000000000080',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n    'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n    '0000000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\nconst Fp = /* @__PURE__ */ (() => Field(ED25519_P, undefined, true))();\nconst ed25519Defaults = /* @__PURE__ */ (() => ({\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: _8n,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n}))();\n/**\n * ed25519 curve with EdDSA signatures.\n */\nexport const ed25519 = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\nfunction ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255)\n        throw new Error('Context is too big');\n    return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport const ed25519ctx = /* @__PURE__ */ (() => twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n}))();\nexport const ed25519ph = /* @__PURE__ */ (() => twistedEdwards(Object.assign({}, ed25519Defaults, {\n    domain: ed25519_domain,\n    prehash: sha512,\n})))();\nexport const x25519 = /* @__PURE__ */ (() => montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x) => {\n        const P = ED25519_P;\n        // x^(p-2) aka x^(2^255-21)\n        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n        return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n    const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n    const ELL2_J = BigInt(486662);\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const inv = Fp.invertBatch([xd, yd]); // batch division\n    return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */ (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistPoint))\n        throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_255B = /* @__PURE__ */ BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n    const { d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!isNegativeLE(s_, P))\n        s_ = mod(-s_);\n    if (!Ns_D_is_sq)\n        s = s_; // 7\n    if (!Ns_D_is_sq)\n        c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n    // Private property to discourage combining ExtendedPoint + RistrettoPoint\n    // Always use Ristretto encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = ensureBytes('ristrettoHash', hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = calcElligatorRistrettoMap(r2);\n        return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n        hex = ensureBytes('ristrettoHex', hex, 32);\n        const { a, d } = ed25519.CURVE;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 3. Check that s is non-negative, or else abort\n        if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2); // 4 (a is -1)\n        const u2 = mod(_1n - a * s2); // 5\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2); // 6\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n        const Dx = mod(I * u2); // 8\n        const Dy = mod(I * Dx * v); // 9\n        let x = mod((s + s) * Dx); // 10\n        if (isNegativeLE(x, P))\n            x = mod(-x); // 10\n        const y = mod(u1 * Dy); // 11\n        const t = mod(x * y); // 12\n        if (!isValid || isNegativeLE(t, P) || y === _0n)\n            throw new Error(emsg);\n        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */\n    toRawBytes() {\n        let { ex: x, ey: y, ez: z, et: t } = this.ep;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const u1 = mod(mod(z + y) * mod(z - y)); // 1\n        const u2 = mod(x * y); // 2\n        // Square root always exists\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n        const D1 = mod(invsqrt * u1); // 4\n        const D2 = mod(invsqrt * u2); // 5\n        const zInv = mod(D1 * D2 * t); // 6\n        let D; // 7\n        if (isNegativeLE(t * zInv, P)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2; // 8\n        }\n        if (isNegativeLE(x * zInv, P))\n            y = mod(-y); // 9\n        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n        if (isNegativeLE(s, P))\n            s = mod(-s);\n        return numberToBytesLE(s, 32); // 11\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    // Compare one point to another.\n    equals(other) {\n        assertRstPoint(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = ed25519.CURVE.Fp.create;\n        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n        const one = mod(X1 * Y2) === mod(Y1 * X2);\n        const two = mod(Y1 * Y2) === mod(X1 * X2);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new RistPoint(this.ep.double());\n    }\n    negate() {\n        return new RistPoint(this.ep.negate());\n    }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n    if (!RistPoint.BASE)\n        RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n    if (!RistPoint.ZERO)\n        RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n    return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n    const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n    const P = RistPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n//# sourceMappingURL=ed25519.js.map","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per late 2024.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/**\n * SHA2-224 hash function\n */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","import { ahash, abytes, aexists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport { validateBasic, wNAF, pippenger, } from './curve.js';\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, memoized, abool } from './utils.js';\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = ut.numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = ut.numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = ut.numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return b2n(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = mod.Field(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return ut.inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('invalid private key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error('invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, N); // disabled by default, enabled for BLS\n        ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not FE');\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        if (!Fp.eql(left, right))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', sc, _0n, N);\n            const I = Point.ZERO;\n            if (sc === _0n)\n                return I;\n            if (this.is0() || sc === _1n)\n                return this;\n            // Case a: no endomorphism. Case b: has precomputes.\n            if (!endo || wnaf.hasPrecomputes(this))\n                return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n            // Case c: endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            abool('isCompressed', isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!ut.inRange(x, _1n, Fp.ORDER))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                const cl = compressedLen;\n                const ul = uncompressedLen;\n                throw new Error('invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n            ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // Our custom check \"just in case\"\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        const { lowS, prehash, format } = opts;\n        // Verify opts, deduce signature format\n        validateSigVerOpts(opts);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        if (format !== undefined && format !== 'compact' && format !== 'der')\n            throw new Error('format must be compact or der');\n        const isHex = typeof sg === 'string' || ut.isBytes(sg);\n        const isObj = !isHex &&\n            !format &&\n            typeof sg === 'object' &&\n            sg !== null &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        let _sig = undefined;\n        let P;\n        try {\n            if (isObj)\n                _sig = new Signature(sg.r, sg.s);\n            if (isHex) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    if (format !== 'compact')\n                        _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                }\n                if (!_sig && format !== 'der')\n                    _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n        if (!_sig)\n            return false;\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { inRange, aInRange, bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE, } from './abstract/utils.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n */\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp: Fpk1, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1P))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1N))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n// copied from utils\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\nfunction ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\nfunction aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\nexport { anumber, anumber as number, abytes, abytes as bytes, ahash, aexists, aoutput };\nconst assert = {\n    number: anumber,\n    bytes: abytes,\n    hash: ahash,\n    exists: aexists,\n    output: aoutput,\n};\nexport default assert;\n//# sourceMappingURL=_assert.js.map","import { aexists, aoutput } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n/**\n * Polyfill for Safari 14\n */\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a, b, c) => (a & b) ^ (~a & c);\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport const byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('utf8ToBytes expected string, got ' + typeof str);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return crypto.randomBytes(bytesLength);\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n    constructor(failure, failures) {\n        let cached;\n        const { message, explanation, ...rest } = failure;\n        const { path } = failure;\n        const msg = path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`;\n        super(explanation ?? msg);\n        if (explanation != null)\n            this.cause = msg;\n        Object.assign(this, rest);\n        this.name = this.constructor.name;\n        this.failures = () => {\n            return (cached ?? (cached = [failure, ...failures()]));\n        };\n    }\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n    return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isObject(x) {\n    return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a non-array object.\n */\nfunction isNonArrayObject(x) {\n    return isObject(x) && !Array.isArray(x);\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isPlainObject(x) {\n    if (Object.prototype.toString.call(x) !== '[object Object]') {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(x);\n    return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\nfunction print(value) {\n    if (typeof value === 'symbol') {\n        return value.toString();\n    }\n    return typeof value === 'string' ? JSON.stringify(value) : `${value}`;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\nfunction shiftIterator(input) {\n    const { done, value } = input.next();\n    return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\nfunction toFailure(result, context, struct, value) {\n    if (result === true) {\n        return;\n    }\n    else if (result === false) {\n        result = {};\n    }\n    else if (typeof result === 'string') {\n        result = { message: result };\n    }\n    const { path, branch } = context;\n    const { type } = struct;\n    const { refinement, message = `Expected a value of type \\`${type}\\`${refinement ? ` with refinement \\`${refinement}\\`` : ''}, but received: \\`${print(value)}\\``, } = result;\n    return {\n        value,\n        type,\n        refinement,\n        key: path[path.length - 1],\n        path,\n        branch,\n        ...result,\n        message,\n    };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\nfunction* toFailures(result, context, struct, value) {\n    if (!isIterable(result)) {\n        result = [result];\n    }\n    for (const r of result) {\n        const failure = toFailure(r, context, struct, value);\n        if (failure) {\n            yield failure;\n        }\n    }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\nfunction* run(value, struct, options = {}) {\n    const { path = [], branch = [value], coerce = false, mask = false } = options;\n    const ctx = { path, branch, mask };\n    if (coerce) {\n        value = struct.coercer(value, ctx);\n    }\n    let status = 'valid';\n    for (const failure of struct.validator(value, ctx)) {\n        failure.explanation = options.message;\n        status = 'not_valid';\n        yield [failure, undefined];\n    }\n    for (let [k, v, s] of struct.entries(value, ctx)) {\n        const ts = run(v, s, {\n            path: k === undefined ? path : [...path, k],\n            branch: k === undefined ? branch : [...branch, v],\n            coerce,\n            mask,\n            message: options.message,\n        });\n        for (const t of ts) {\n            if (t[0]) {\n                status = t[0].refinement != null ? 'not_refined' : 'not_valid';\n                yield [t[0], undefined];\n            }\n            else if (coerce) {\n                v = t[1];\n                if (k === undefined) {\n                    value = v;\n                }\n                else if (value instanceof Map) {\n                    value.set(k, v);\n                }\n                else if (value instanceof Set) {\n                    value.add(v);\n                }\n                else if (isObject(value)) {\n                    if (v !== undefined || k in value)\n                        value[k] = v;\n                }\n            }\n        }\n    }\n    if (status !== 'not_valid') {\n        for (const failure of struct.refiner(value, ctx)) {\n            failure.explanation = options.message;\n            status = 'not_refined';\n            yield [failure, undefined];\n        }\n    }\n    if (status === 'valid') {\n        yield [undefined, value];\n    }\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\nclass Struct {\n    constructor(props) {\n        const { type, schema, validator, refiner, coercer = (value) => value, entries = function* () { }, } = props;\n        this.type = type;\n        this.schema = schema;\n        this.entries = entries;\n        this.coercer = coercer;\n        if (validator) {\n            this.validator = (value, context) => {\n                const result = validator(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.validator = () => [];\n        }\n        if (refiner) {\n            this.refiner = (value, context) => {\n                const result = refiner(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.refiner = () => [];\n        }\n    }\n    /**\n     * Assert that a value passes the struct's validation, throwing if it doesn't.\n     */\n    assert(value, message) {\n        return assert(value, this, message);\n    }\n    /**\n     * Create a value with the struct's coercion logic, then validate it.\n     */\n    create(value, message) {\n        return create(value, this, message);\n    }\n    /**\n     * Check if a value passes the struct's validation.\n     */\n    is(value) {\n        return is(value, this);\n    }\n    /**\n     * Mask a value, coercing and validating it, but returning only the subset of\n     * properties defined by the struct's schema. Masking applies recursively to\n     * props of `object` structs only.\n     */\n    mask(value, message) {\n        return mask(value, this, message);\n    }\n    /**\n     * Validate a value with the struct's validation logic, returning a tuple\n     * representing the result.\n     *\n     * You may optionally pass `true` for the `coerce` argument to coerce\n     * the value before attempting to validate it. If you do, the result will\n     * contain the coerced result when successful. Also, `mask` will turn on\n     * masking of the unknown `object` props recursively if passed.\n     */\n    validate(value, options = {}) {\n        return validate(value, this, options);\n    }\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\nfunction assert(value, struct, message) {\n    const result = validate(value, struct, { message });\n    if (result[0]) {\n        throw result[0];\n    }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\nfunction create(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\nfunction mask(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, mask: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Check if a value passes a struct.\n */\nfunction is(value, struct) {\n    const result = validate(value, struct);\n    return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\nfunction validate(value, struct, options = {}) {\n    const tuples = run(value, struct, options);\n    const tuple = shiftIterator(tuples);\n    if (tuple[0]) {\n        const error = new StructError(tuple[0], function* () {\n            for (const t of tuples) {\n                if (t[0]) {\n                    yield t[0];\n                }\n            }\n        });\n        return [error, undefined];\n    }\n    else {\n        const v = tuple[1];\n        return [undefined, v];\n    }\n}\n\nfunction assign(...Structs) {\n    const isType = Structs[0].type === 'type';\n    const schemas = Structs.map((s) => s.schema);\n    const schema = Object.assign({}, ...schemas);\n    return isType ? type(schema) : object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\nfunction define(name, validator) {\n    return new Struct({ type: name, schema: null, validator });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\nfunction deprecated(struct, log) {\n    return new Struct({\n        ...struct,\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n        validator(value, ctx) {\n            if (value === undefined) {\n                return true;\n            }\n            else {\n                log(value, ctx);\n                return struct.validator(value, ctx);\n            }\n        },\n    });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\nfunction dynamic(fn) {\n    return new Struct({\n        type: 'dynamic',\n        schema: null,\n        *entries(value, ctx) {\n            const struct = fn(value, ctx);\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\nfunction lazy(fn) {\n    let struct;\n    return new Struct({\n        type: 'lazy',\n        schema: null,\n        *entries(value, ctx) {\n            struct ?? (struct = fn());\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\nfunction omit(struct, keys) {\n    const { schema } = struct;\n    const subschema = { ...schema };\n    for (const key of keys) {\n        delete subschema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\nfunction partial(struct) {\n    const isStruct = struct instanceof Struct;\n    const schema = isStruct ? { ...struct.schema } : { ...struct };\n    for (const key in schema) {\n        schema[key] = optional(schema[key]);\n    }\n    if (isStruct && struct.type === 'type') {\n        return type(schema);\n    }\n    return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\nfunction pick(struct, keys) {\n    const { schema } = struct;\n    const subschema = {};\n    for (const key of keys) {\n        subschema[key] = schema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\nfunction struct(name, validator) {\n    console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n    return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\nfunction any() {\n    return define('any', () => true);\n}\nfunction array(Element) {\n    return new Struct({\n        type: 'array',\n        schema: Element,\n        *entries(value) {\n            if (Element && Array.isArray(value)) {\n                for (const [i, v] of value.entries()) {\n                    yield [i, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return Array.isArray(value) ? value.slice() : value;\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array value, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a bigint.\n */\nfunction bigint() {\n    return define('bigint', (value) => {\n        return typeof value === 'bigint';\n    });\n}\n/**\n * Ensure that a value is a boolean.\n */\nfunction boolean() {\n    return define('boolean', (value) => {\n        return typeof value === 'boolean';\n    });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\nfunction date() {\n    return define('date', (value) => {\n        return ((value instanceof Date && !isNaN(value.getTime())) ||\n            `Expected a valid \\`Date\\` object, but received: ${print(value)}`);\n    });\n}\nfunction enums(values) {\n    const schema = {};\n    const description = values.map((v) => print(v)).join();\n    for (const key of values) {\n        schema[key] = key;\n    }\n    return new Struct({\n        type: 'enums',\n        schema,\n        validator(value) {\n            return (values.includes(value) ||\n                `Expected one of \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a function.\n */\nfunction func() {\n    return define('func', (value) => {\n        return (typeof value === 'function' ||\n            `Expected a function, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\nfunction instance(Class) {\n    return define('instance', (value) => {\n        return (value instanceof Class ||\n            `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an integer.\n */\nfunction integer() {\n    return define('integer', (value) => {\n        return ((typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n            `Expected an integer, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value matches all of a set of types.\n */\nfunction intersection(Structs) {\n    return new Struct({\n        type: 'intersection',\n        schema: null,\n        *entries(value, ctx) {\n            for (const S of Structs) {\n                yield* S.entries(value, ctx);\n            }\n        },\n        *validator(value, ctx) {\n            for (const S of Structs) {\n                yield* S.validator(value, ctx);\n            }\n        },\n        *refiner(value, ctx) {\n            for (const S of Structs) {\n                yield* S.refiner(value, ctx);\n            }\n        },\n    });\n}\nfunction literal(constant) {\n    const description = print(constant);\n    const t = typeof constant;\n    return new Struct({\n        type: 'literal',\n        schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n        validator(value) {\n            return (value === constant ||\n                `Expected the literal \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\nfunction map(Key, Value) {\n    return new Struct({\n        type: 'map',\n        schema: null,\n        *entries(value) {\n            if (Key && Value && value instanceof Map) {\n                for (const [k, v] of value.entries()) {\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Map ? new Map(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Map ||\n                `Expected a \\`Map\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that no value ever passes validation.\n */\nfunction never() {\n    return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\nfunction nullable(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === null || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is a number.\n */\nfunction number() {\n    return define('number', (value) => {\n        return ((typeof value === 'number' && !isNaN(value)) ||\n            `Expected a number, but received: ${print(value)}`);\n    });\n}\nfunction object(schema) {\n    const knowns = schema ? Object.keys(schema) : [];\n    const Never = never();\n    return new Struct({\n        type: 'object',\n        schema: schema ? schema : null,\n        *entries(value) {\n            if (schema && isObject(value)) {\n                const unknowns = new Set(Object.keys(value));\n                for (const key of knowns) {\n                    unknowns.delete(key);\n                    yield [key, value[key], schema[key]];\n                }\n                for (const key of unknowns) {\n                    yield [key, value[key], Never];\n                }\n            }\n        },\n        validator(value) {\n            return (isNonArrayObject(value) ||\n                `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value, ctx) {\n            if (!isNonArrayObject(value)) {\n                return value;\n            }\n            const coerced = { ...value };\n            // The `object` struct has special behaviour enabled by the mask flag.\n            // When masking, properties that are not in the schema are deleted from\n            // the coerced object instead of eventually failing validaiton.\n            if (ctx.mask && schema) {\n                for (const key in coerced) {\n                    if (schema[key] === undefined) {\n                        delete coerced[key];\n                    }\n                }\n            }\n            return coerced;\n        },\n    });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\nfunction optional(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\nfunction record(Key, Value) {\n    return new Struct({\n        type: 'record',\n        schema: null,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k in value) {\n                    const v = value[k];\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        validator(value) {\n            return (isNonArrayObject(value) ||\n                `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isNonArrayObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\nfunction regexp() {\n    return define('regexp', (value) => {\n        return value instanceof RegExp;\n    });\n}\nfunction set(Element) {\n    return new Struct({\n        type: 'set',\n        schema: null,\n        *entries(value) {\n            if (Element && value instanceof Set) {\n                for (const v of value) {\n                    yield [v, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Set ? new Set(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Set ||\n                `Expected a \\`Set\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a string.\n */\nfunction string() {\n    return define('string', (value) => {\n        return (typeof value === 'string' ||\n            `Expected a string, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\nfunction tuple(Structs) {\n    const Never = never();\n    return new Struct({\n        type: 'tuple',\n        schema: null,\n        *entries(value) {\n            if (Array.isArray(value)) {\n                const length = Math.max(Structs.length, value.length);\n                for (let i = 0; i < length; i++) {\n                    yield [i, value[i], Structs[i] || Never];\n                }\n            }\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return Array.isArray(value) ? value.slice() : value;\n        },\n    });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\nfunction type(schema) {\n    const keys = Object.keys(schema);\n    return new Struct({\n        type: 'type',\n        schema,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k of keys) {\n                    yield [k, value[k], schema[k]];\n                }\n            }\n        },\n        validator(value) {\n            return (isNonArrayObject(value) ||\n                `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isNonArrayObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Ensure that a value matches one of a set of types.\n */\nfunction union(Structs) {\n    const description = Structs.map((s) => s.type).join(' | ');\n    return new Struct({\n        type: 'union',\n        schema: null,\n        coercer(value, ctx) {\n            for (const S of Structs) {\n                const [error, coerced] = S.validate(value, {\n                    coerce: true,\n                    mask: ctx.mask,\n                });\n                if (!error) {\n                    return coerced;\n                }\n            }\n            return value;\n        },\n        validator(value, ctx) {\n            const failures = [];\n            for (const S of Structs) {\n                const [...tuples] = run(value, S, ctx);\n                const [first] = tuples;\n                if (!first[0]) {\n                    return [];\n                }\n                else {\n                    for (const [failure] of tuples) {\n                        if (failure) {\n                            failures.push(failure);\n                        }\n                    }\n                }\n            }\n            return [\n                `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(value)}`,\n                ...failures,\n            ];\n        },\n    });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\nfunction unknown() {\n    return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction coerce(struct, condition, coercer) {\n    return new Struct({\n        ...struct,\n        coercer: (value, ctx) => {\n            return is(value, condition)\n                ? struct.coercer(coercer(value, ctx), ctx)\n                : struct.coercer(value, ctx);\n        },\n    });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction defaulted(struct, fallback, options = {}) {\n    return coerce(struct, unknown(), (x) => {\n        const f = typeof fallback === 'function' ? fallback() : fallback;\n        if (x === undefined) {\n            return f;\n        }\n        if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n            const ret = { ...x };\n            let changed = false;\n            for (const key in f) {\n                if (ret[key] === undefined) {\n                    ret[key] = f[key];\n                    changed = true;\n                }\n            }\n            if (changed) {\n                return ret;\n            }\n        }\n        return x;\n    });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction trimmed(struct) {\n    return coerce(struct, string(), (x) => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\nfunction empty(struct) {\n    return refine(struct, 'empty', (value) => {\n        const size = getSize(value);\n        return (size === 0 ||\n            `Expected an empty ${struct.type} but received one with a size of \\`${size}\\``);\n    });\n}\nfunction getSize(value) {\n    if (value instanceof Map || value instanceof Set) {\n        return value.size;\n    }\n    else {\n        return value.length;\n    }\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\nfunction max(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'max', (value) => {\n        return exclusive\n            ? value < threshold\n            : value <= threshold ||\n                `Expected a ${struct.type} less than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\nfunction min(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'min', (value) => {\n        return exclusive\n            ? value > threshold\n            : value >= threshold ||\n                `Expected a ${struct.type} greater than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a string, array, map or set is not empty.\n */\nfunction nonempty(struct) {\n    return refine(struct, 'nonempty', (value) => {\n        const size = getSize(value);\n        return (size > 0 || `Expected a nonempty ${struct.type} but received an empty one`);\n    });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\nfunction pattern(struct, regexp) {\n    return refine(struct, 'pattern', (value) => {\n        return (regexp.test(value) ||\n            `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`);\n    });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\nfunction size(struct, min, max = min) {\n    const expected = `Expected a ${struct.type}`;\n    const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``;\n    return refine(struct, 'size', (value) => {\n        if (typeof value === 'number' || value instanceof Date) {\n            return ((min <= value && value <= max) ||\n                `${expected} ${of} but received \\`${value}\\``);\n        }\n        else if (value instanceof Map || value instanceof Set) {\n            const { size } = value;\n            return ((min <= size && size <= max) ||\n                `${expected} with a size ${of} but received one with a size of \\`${size}\\``);\n        }\n        else {\n            const { length } = value;\n            return ((min <= length && length <= max) ||\n                `${expected} with a length ${of} but received one with a length of \\`${length}\\``);\n        }\n    });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\nfunction refine(struct, name, refiner) {\n    return new Struct({\n        ...struct,\n        *refiner(value, ctx) {\n            yield* struct.refiner(value, ctx);\n            const result = refiner(value, ctx);\n            const failures = toFailures(result, ctx, struct, value);\n            for (const failure of failures) {\n                yield { ...failure, refinement: name };\n            }\n        },\n    });\n}\n\nexport { Struct, StructError, any, array, assert, assign, bigint, boolean, coerce, create, date, defaulted, define, deprecated, dynamic, empty, enums, func, instance, integer, intersection, is, lazy, literal, map, mask, max, min, never, nonempty, nullable, number, object, omit, optional, partial, pattern, pick, record, refine, regexp, set, size, string, struct, trimmed, tuple, type, union, unknown, validate };\n//# sourceMappingURL=index.mjs.map\n","import { PublicKey } from '@solana/web3.js';\n/** Address of the SPL Token program */\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n/** Address of the SPL Token 2022 program */\nexport const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb');\n/** Address of the SPL Associated Token Account program */\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n/** Address of the special mint for wrapped native SOL in spl-token */\nexport const NATIVE_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n/** Address of the special mint for wrapped native SOL in spl-token-2022 */\nexport const NATIVE_MINT_2022 = new PublicKey('9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP');\n/** Check that the token program provided is not `Tokenkeg...`, useful when using extensions */\nexport function programSupportsExtensions(programId) {\n    if (programId.equals(TOKEN_PROGRAM_ID)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n//# sourceMappingURL=constants.js.map","import { PublicKey } from '@solana/web3.js';\n/** @internal */\nexport function addSigners(keys, ownerOrAuthority, multiSigners) {\n    if (multiSigners.length) {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });\n        for (const signer of multiSigners) {\n            keys.push({\n                pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n                isSigner: true,\n                isWritable: false,\n            });\n        }\n    }\n    else {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });\n    }\n    return keys;\n}\n//# sourceMappingURL=internal.js.map","/** Instructions defined by the program */\nexport var TokenInstruction;\n(function (TokenInstruction) {\n    TokenInstruction[TokenInstruction[\"InitializeMint\"] = 0] = \"InitializeMint\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount\"] = 1] = \"InitializeAccount\";\n    TokenInstruction[TokenInstruction[\"InitializeMultisig\"] = 2] = \"InitializeMultisig\";\n    TokenInstruction[TokenInstruction[\"Transfer\"] = 3] = \"Transfer\";\n    TokenInstruction[TokenInstruction[\"Approve\"] = 4] = \"Approve\";\n    TokenInstruction[TokenInstruction[\"Revoke\"] = 5] = \"Revoke\";\n    TokenInstruction[TokenInstruction[\"SetAuthority\"] = 6] = \"SetAuthority\";\n    TokenInstruction[TokenInstruction[\"MintTo\"] = 7] = \"MintTo\";\n    TokenInstruction[TokenInstruction[\"Burn\"] = 8] = \"Burn\";\n    TokenInstruction[TokenInstruction[\"CloseAccount\"] = 9] = \"CloseAccount\";\n    TokenInstruction[TokenInstruction[\"FreezeAccount\"] = 10] = \"FreezeAccount\";\n    TokenInstruction[TokenInstruction[\"ThawAccount\"] = 11] = \"ThawAccount\";\n    TokenInstruction[TokenInstruction[\"TransferChecked\"] = 12] = \"TransferChecked\";\n    TokenInstruction[TokenInstruction[\"ApproveChecked\"] = 13] = \"ApproveChecked\";\n    TokenInstruction[TokenInstruction[\"MintToChecked\"] = 14] = \"MintToChecked\";\n    TokenInstruction[TokenInstruction[\"BurnChecked\"] = 15] = \"BurnChecked\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount2\"] = 16] = \"InitializeAccount2\";\n    TokenInstruction[TokenInstruction[\"SyncNative\"] = 17] = \"SyncNative\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount3\"] = 18] = \"InitializeAccount3\";\n    TokenInstruction[TokenInstruction[\"InitializeMultisig2\"] = 19] = \"InitializeMultisig2\";\n    TokenInstruction[TokenInstruction[\"InitializeMint2\"] = 20] = \"InitializeMint2\";\n    TokenInstruction[TokenInstruction[\"GetAccountDataSize\"] = 21] = \"GetAccountDataSize\";\n    TokenInstruction[TokenInstruction[\"InitializeImmutableOwner\"] = 22] = \"InitializeImmutableOwner\";\n    TokenInstruction[TokenInstruction[\"AmountToUiAmount\"] = 23] = \"AmountToUiAmount\";\n    TokenInstruction[TokenInstruction[\"UiAmountToAmount\"] = 24] = \"UiAmountToAmount\";\n    TokenInstruction[TokenInstruction[\"InitializeMintCloseAuthority\"] = 25] = \"InitializeMintCloseAuthority\";\n    TokenInstruction[TokenInstruction[\"TransferFeeExtension\"] = 26] = \"TransferFeeExtension\";\n    TokenInstruction[TokenInstruction[\"ConfidentialTransferExtension\"] = 27] = \"ConfidentialTransferExtension\";\n    TokenInstruction[TokenInstruction[\"DefaultAccountStateExtension\"] = 28] = \"DefaultAccountStateExtension\";\n    TokenInstruction[TokenInstruction[\"Reallocate\"] = 29] = \"Reallocate\";\n    TokenInstruction[TokenInstruction[\"MemoTransferExtension\"] = 30] = \"MemoTransferExtension\";\n    TokenInstruction[TokenInstruction[\"CreateNativeMint\"] = 31] = \"CreateNativeMint\";\n    TokenInstruction[TokenInstruction[\"InitializeNonTransferableMint\"] = 32] = \"InitializeNonTransferableMint\";\n    TokenInstruction[TokenInstruction[\"InterestBearingMintExtension\"] = 33] = \"InterestBearingMintExtension\";\n    TokenInstruction[TokenInstruction[\"CpiGuardExtension\"] = 34] = \"CpiGuardExtension\";\n    TokenInstruction[TokenInstruction[\"InitializePermanentDelegate\"] = 35] = \"InitializePermanentDelegate\";\n    TokenInstruction[TokenInstruction[\"TransferHookExtension\"] = 36] = \"TransferHookExtension\";\n    // ConfidentialTransferFeeExtension = 37,\n    // WithdrawalExcessLamports = 38,\n    TokenInstruction[TokenInstruction[\"MetadataPointerExtension\"] = 39] = \"MetadataPointerExtension\";\n    TokenInstruction[TokenInstruction[\"GroupPointerExtension\"] = 40] = \"GroupPointerExtension\";\n    TokenInstruction[TokenInstruction[\"GroupMemberPointerExtension\"] = 41] = \"GroupMemberPointerExtension\";\n})(TokenInstruction || (TokenInstruction = {}));\n//# sourceMappingURL=types.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const transferInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a Transfer instruction\n *\n * @param source       Source account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferInstruction(source, destination, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(transferInstructionData.span);\n    transferInstructionData.encode({\n        instruction: TokenInstruction.Transfer,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a Transfer instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { source, destination, owner, multiSigners }, data, } = decodeTransferInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Transfer)\n        throw new TokenInvalidInstructionTypeError();\n    if (!source || !destination || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a Transfer instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferInstructionUnchecked({ programId, keys: [source, destination, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=transfer.js.map","/** Base class for errors */\nexport class TokenError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenAccountNotFoundError';\n    }\n}\n/** Thrown if a program state account is not a valid Account */\nexport class TokenInvalidAccountError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountError';\n    }\n}\n/** Thrown if a program state account does not contain valid data */\nexport class TokenInvalidAccountDataError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountDataError';\n    }\n}\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountOwnerError';\n    }\n}\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountSizeError';\n    }\n}\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidMintError';\n    }\n}\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidOwnerError';\n    }\n}\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenOwnerOffCurveError';\n    }\n}\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionProgramError';\n    }\n}\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionKeysError';\n    }\n}\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionDataError';\n    }\n}\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionTypeError';\n    }\n}\n/** Thrown if the program does not support the desired instruction */\nexport class TokenUnsupportedInstructionError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenUnsupportedInstructionError';\n    }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nexport class TokenTransferHookAccountNotFound extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookAccountNotFound';\n    }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nexport class TokenTransferHookInvalidSeed extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookInvalidSeed';\n    }\n}\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookAccountDataNotFound';\n    }\n}\n//# sourceMappingURL=errors.js.map","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError, TokenInvalidMintError, TokenOwnerOffCurveError, } from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport { getMintLen } from '../extensions/extensionType.js';\nimport { ACCOUNT_SIZE } from './account.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n/** Buffer layout for de/serializing a mint */\nexport const MintLayout = struct([\n    u32('mintAuthorityOption'),\n    publicKey('mintAuthority'),\n    u64('supply'),\n    u8('decimals'),\n    bool('isInitialized'),\n    u32('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n/** Byte length of a mint */\nexport const MINT_SIZE = MintLayout.span;\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nexport async function getMint(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n}\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nexport function unpackMint(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < MINT_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const rawMint = MintLayout.decode(info.data.slice(0, MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > MINT_SIZE) {\n        if (info.data.length <= ACCOUNT_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data.length === MULTISIG_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Mint)\n            throw new TokenInvalidMintError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMint(connection, commitment) {\n    return await getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n}\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMintWithExtensions(connection, extensions, commitment) {\n    const mintLen = getMintLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n}\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nexport async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = await PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nexport function getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n//# sourceMappingURL=mint.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(curve, {\n        hash: 'function',\n        a: 'bigint',\n        d: 'bigint',\n        randomBytes: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        domain: 'function',\n        uvRatio: 'function',\n        mapToCurve: 'function',\n    });\n    // Set defaults\n    return Object.freeze({ ...opts });\n}\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;\n    const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n    const modP = Fp.create; // Function overrides\n    // sqrt(u/v)\n    const uvRatio = CURVE.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = CURVE.domain ||\n        ((data, ctx, phflag) => {\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    const inBig = (n) => typeof n === 'bigint' && _0n < n; // n in [1..]\n    const inRange = (n, max) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n    const in0MaskRange = (n) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n    function assertInRange(n, max) {\n        // n in [1..max-1]\n        if (inRange(n, max))\n            return n;\n        throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n    }\n    function assertGE0(n) {\n        // n in [0..CURVE_ORDER-1]\n        return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n    }\n    const pointPrecomputes = new Map();\n    function isPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = ex;\n            this.ey = ey;\n            this.ez = ez;\n            this.et = et;\n            if (!in0MaskRange(ex))\n                throw new Error('x required');\n            if (!in0MaskRange(ey))\n                throw new Error('y required');\n            if (!in0MaskRange(ez))\n                throw new Error('z required');\n            if (!in0MaskRange(et))\n                throw new Error('t required');\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            if (!in0MaskRange(x) || !in0MaskRange(y))\n                throw new Error('invalid affine point');\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.ez));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            const { a, d } = CURVE;\n            if (this.is0())\n                throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n            // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n            // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n            const { ex: X, ey: Y, ez: Z, et: T } = this;\n            const X2 = modP(X * X); // X²\n            const Y2 = modP(Y * Y); // Y²\n            const Z2 = modP(Z * Z); // Z²\n            const Z4 = modP(Z2 * Z2); // Z⁴\n            const aX2 = modP(X2 * a); // aX²\n            const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n            const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n            if (left !== right)\n                throw new Error('bad point: equation left != right (1)');\n            // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n            const XY = modP(X * Y);\n            const ZT = modP(Z * T);\n            if (XY !== ZT)\n                throw new Error('bad point: equation left != right (2)');\n        }\n        // Compare one point to another.\n        equals(other) {\n            isPoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            isPoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            // Faster algo for adding 2 Extended Points when curve's a=-1.\n            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n            // Cost: 8M + 8add + 2*2.\n            // Note: It does not check whether the `other` point is valid.\n            if (a === BigInt(-1)) {\n                const A = modP((Y1 - X1) * (Y2 + X2));\n                const B = modP((Y1 + X1) * (Y2 - X2));\n                const F = modP(B - A);\n                if (F === _0n)\n                    return this.double(); // Same point. Tests say it doesn't affect timing\n                const C = modP(Z1 * _2n * T2);\n                const D = modP(T1 * _2n * Z2);\n                const E = D + C;\n                const G = B + A;\n                const H = D - C;\n                const X3 = modP(E * F);\n                const Y3 = modP(G * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        multiplyUnsafe(scalar) {\n            let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n            if (n === _0n)\n                return I;\n            if (this.equals(I) || n === _1n)\n                return this;\n            if (this.equals(G))\n                return this.wNAF(n).p;\n            return wnaf.unsafeLadder(this, n);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(iz) {\n            const { ex: x, ey: y, ez: z } = this;\n            const is0 = this.is0();\n            if (iz == null)\n                iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n            const ax = modP(x * iz);\n            const ay = modP(y * iz);\n            const zz = modP(z * iz);\n            if (is0)\n                return { x: _0n, y: _1n };\n            if (zz !== _1n)\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        clearCofactor() {\n            const { h: cofactor } = CURVE;\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = ut.bytesToNumberLE(normed);\n            if (y === _0n) {\n                // y=0 is allowed\n            }\n            else {\n                // RFC8032 prohibits >= p, but ZIP215 doesn't\n                if (zip215)\n                    assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n                else\n                    assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n            }\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateKey(privKey) {\n            return getExtendedPublicKey(privKey).point;\n        }\n        toRawBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        toHex() {\n            return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    const { BASE: G, ZERO: I } = Point;\n    const wnaf = wNAF(Point, nByteLength * 8);\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        return modN(ut.bytesToNumberLE(hash));\n    }\n    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n    function getExtendedPublicKey(key) {\n        const len = nByteLength;\n        key = ensureBytes('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toRawBytes(); // Uint8Array representation\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n        const msg = ut.concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toRawBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        assertGE0(s); // 0 <= s < l\n        const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n        return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n        // zip215: true is good for consensus-critical apps and allows points < 2^256\n        // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n        let A, R, SB;\n        try {\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n    }\n    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n        randomPrivateKey: () => randomBytes(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3));\n            return point;\n        },\n    };\n    return {\n        CURVE,\n        getPublicKey,\n        sign,\n        verify,\n        ExtendedPoint: Point,\n        utils,\n    };\n}\n//# sourceMappingURL=edwards.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE, } from './abstract/utils.js';\nimport { createHasher, expand_message_xmd } from './abstract/hash-to-curve.js';\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\nfunction ed25519_pow_2_252_3(x) {\n    const P = ED25519_P;\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P; // x^3, 11\n    const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n    const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n    const b10 = (pow2(b5, _5n, P) * b5) % P;\n    const b20 = (pow2(b10, _10n, P) * b10) % P;\n    const b40 = (pow2(b20, _20n, P) * b20) % P;\n    const b80 = (pow2(b40, _40n, P) * b40) % P;\n    const b160 = (pow2(b80, _80n, P) * b80) % P;\n    const b240 = (pow2(b160, _80n, P) * b80) % P;\n    const b250 = (pow2(b240, _10n, P) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n    const P = ED25519_P;\n    const v3 = mod(v * v * v, P); // v³\n    const v7 = mod(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = mod(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if (isNegativeLE(x, P))\n        x = mod(-x, P);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n    '0100000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n    '0000000000000000000000000000000000000000000000000000000000000080',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n    'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n    '0000000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\nconst Fp = Field(ED25519_P, undefined, true);\nconst ed25519Defaults = {\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: BigInt(8),\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n};\nexport const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);\nfunction ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255)\n        throw new Error('Context is too big');\n    return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport const ed25519ctx = /* @__PURE__ */ twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n});\nexport const ed25519ph = /* @__PURE__ */ twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n    prehash: sha512,\n});\nexport const x25519 = /* @__PURE__ */ (() => montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x) => {\n        const P = ED25519_P;\n        // x^(p-2) aka x^(2^255-21)\n        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n        return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const inv = Fp.invertBatch([xd, yd]); // batch division\n    return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */ (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistPoint))\n        throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n    const { d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!isNegativeLE(s_, P))\n        s_ = mod(-s_);\n    if (!Ns_D_is_sq)\n        s = s_; // 7\n    if (!Ns_D_is_sq)\n        c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n    // Private property to discourage combining ExtendedPoint + RistrettoPoint\n    // Always use Ristretto encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = ensureBytes('ristrettoHash', hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = calcElligatorRistrettoMap(r2);\n        return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n        hex = ensureBytes('ristrettoHex', hex, 32);\n        const { a, d } = ed25519.CURVE;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 3. Check that s is non-negative, or else abort\n        if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2); // 4 (a is -1)\n        const u2 = mod(_1n - a * s2); // 5\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2); // 6\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n        const Dx = mod(I * u2); // 8\n        const Dy = mod(I * Dx * v); // 9\n        let x = mod((s + s) * Dx); // 10\n        if (isNegativeLE(x, P))\n            x = mod(-x); // 10\n        const y = mod(u1 * Dy); // 11\n        const t = mod(x * y); // 12\n        if (!isValid || isNegativeLE(t, P) || y === _0n)\n            throw new Error(emsg);\n        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */\n    toRawBytes() {\n        let { ex: x, ey: y, ez: z, et: t } = this.ep;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const u1 = mod(mod(z + y) * mod(z - y)); // 1\n        const u2 = mod(x * y); // 2\n        // Square root always exists\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n        const D1 = mod(invsqrt * u1); // 4\n        const D2 = mod(invsqrt * u2); // 5\n        const zInv = mod(D1 * D2 * t); // 6\n        let D; // 7\n        if (isNegativeLE(t * zInv, P)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2; // 8\n        }\n        if (isNegativeLE(x * zInv, P))\n            y = mod(-y); // 9\n        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n        if (isNegativeLE(s, P))\n            s = mod(-s);\n        return numberToBytesLE(s, 32); // 11\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    // Compare one point to another.\n    equals(other) {\n        assertRstPoint(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = ed25519.CURVE.Fp.create;\n        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n        const one = mod(X1 * Y2) === mod(Y1 * X2);\n        const two = mod(Y1 * Y2) === mod(X1 * X2);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new RistPoint(this.ep.double());\n    }\n    negate() {\n        return new RistPoint(this.ep.negate());\n    }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n    if (!RistPoint.BASE)\n        RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n    if (!RistPoint.ZERO)\n        RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n    return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n    const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n    const P = RistPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n//# sourceMappingURL=ed25519.js.map","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || ut.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nexport const Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n  constructor(failure, failures) {\n    let cached;\n    const {\n      message,\n      ...rest\n    } = failure;\n    const {\n      path\n    } = failure;\n    const msg = path.length === 0 ? message : \"At path: \" + path.join('.') + \" -- \" + message;\n    super(msg);\n    Object.assign(this, rest);\n    this.name = this.constructor.name;\n\n    this.failures = () => {\n      var _cached;\n\n      return (_cached = cached) != null ? _cached : cached = [failure, ...failures()];\n    };\n  }\n\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\n\n\nfunction isObject(x) {\n  return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a plain object.\n */\n\nfunction isPlainObject(x) {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false;\n  }\n\n  const prototype = Object.getPrototypeOf(x);\n  return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\n\nfunction print(value) {\n  return typeof value === 'string' ? JSON.stringify(value) : \"\" + value;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nfunction shiftIterator(input) {\n  const {\n    done,\n    value\n  } = input.next();\n  return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\n\nfunction toFailure(result, context, struct, value) {\n  if (result === true) {\n    return;\n  } else if (result === false) {\n    result = {};\n  } else if (typeof result === 'string') {\n    result = {\n      message: result\n    };\n  }\n\n  const {\n    path,\n    branch\n  } = context;\n  const {\n    type\n  } = struct;\n  const {\n    refinement,\n    message = \"Expected a value of type `\" + type + \"`\" + (refinement ? \" with refinement `\" + refinement + \"`\" : '') + \", but received: `\" + print(value) + \"`\"\n  } = result;\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message\n  };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nfunction* toFailures(result, context, struct, value) {\n  if (!isIterable(result)) {\n    result = [result];\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value);\n\n    if (failure) {\n      yield failure;\n    }\n  }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nfunction* run(value, struct, options = {}) {\n  const {\n    path = [],\n    branch = [value],\n    coerce = false,\n    mask = false\n  } = options;\n  const ctx = {\n    path,\n    branch\n  };\n\n  if (coerce) {\n    value = struct.coercer(value, ctx);\n\n    if (mask && struct.type !== 'type' && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key];\n        }\n      }\n    }\n  }\n\n  let valid = true;\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false;\n    yield [failure, undefined];\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask\n    });\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false;\n        yield [t[0], undefined];\n      } else if (coerce) {\n        v = t[1];\n\n        if (k === undefined) {\n          value = v;\n        } else if (value instanceof Map) {\n          value.set(k, v);\n        } else if (value instanceof Set) {\n          value.add(v);\n        } else if (isObject(value)) {\n          value[k] = v;\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value, ctx)) {\n      valid = false;\n      yield [failure, undefined];\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value];\n  }\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nclass Struct {\n  constructor(props) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = value => value,\n      entries = function* () {}\n    } = props;\n    this.type = type;\n    this.schema = schema;\n    this.entries = entries;\n    this.coercer = coercer;\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.validator = () => [];\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context);\n        return toFailures(result, context, this, value);\n      };\n    } else {\n      this.refiner = () => [];\n    }\n  }\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n\n  assert(value) {\n    return assert(value, this);\n  }\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n\n  create(value) {\n    return create(value, this);\n  }\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n\n  is(value) {\n    return is(value, this);\n  }\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n\n  mask(value) {\n    return mask(value, this);\n  }\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n\n  validate(value, options = {}) {\n    return validate(value, this, options);\n  }\n\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nfunction assert(value, struct) {\n  const result = validate(value, struct);\n\n  if (result[0]) {\n    throw result[0];\n  }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nfunction create(value, struct) {\n  const result = validate(value, struct, {\n    coerce: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nfunction mask(value, struct) {\n  const result = validate(value, struct, {\n    coerce: true,\n    mask: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Check if a value passes a struct.\n */\n\nfunction is(value, struct) {\n  const result = validate(value, struct);\n  return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nfunction validate(value, struct, options = {}) {\n  const tuples = run(value, struct, options);\n  const tuple = shiftIterator(tuples);\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0];\n        }\n      }\n    });\n    return [error, undefined];\n  } else {\n    const v = tuple[1];\n    return [undefined, v];\n  }\n}\n\nfunction assign(...Structs) {\n  const schemas = Structs.map(s => s.schema);\n  const schema = Object.assign({}, ...schemas);\n  return object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\n\nfunction define(name, validator) {\n  return new Struct({\n    type: name,\n    schema: null,\n    validator\n  });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nfunction deprecated(struct, log) {\n  return new Struct({ ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true;\n      } else {\n        log(value, ctx);\n        return struct.validator(value, ctx);\n      }\n    }\n\n  });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nfunction dynamic(fn) {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n\n    *entries(value, ctx) {\n      const struct = fn(value, ctx);\n      yield* struct.entries(value, ctx);\n    },\n\n    validator(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.validator(value, ctx);\n    },\n\n    coercer(value, ctx) {\n      const struct = fn(value, ctx);\n      return struct.coercer(value, ctx);\n    }\n\n  });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nfunction lazy(fn) {\n  let struct;\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n\n    *entries(value, ctx) {\n      var _struct;\n\n      (_struct = struct) != null ? _struct : struct = fn();\n      yield* struct.entries(value, ctx);\n    },\n\n    validator(value, ctx) {\n      var _struct2;\n\n      (_struct2 = struct) != null ? _struct2 : struct = fn();\n      return struct.validator(value, ctx);\n    },\n\n    coercer(value, ctx) {\n      var _struct3;\n\n      (_struct3 = struct) != null ? _struct3 : struct = fn();\n      return struct.coercer(value, ctx);\n    }\n\n  });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nfunction omit(struct, keys) {\n  const {\n    schema\n  } = struct;\n  const subschema = { ...schema\n  };\n\n  for (const key of keys) {\n    delete subschema[key];\n  }\n\n  return object(subschema);\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nfunction partial(struct) {\n  const schema = struct instanceof Struct ? { ...struct.schema\n  } : { ...struct\n  };\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key]);\n  }\n\n  return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nfunction pick(struct, keys) {\n  const {\n    schema\n  } = struct;\n  const subschema = {};\n\n  for (const key of keys) {\n    subschema[key] = schema[key];\n  }\n\n  return object(subschema);\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nfunction struct(name, validator) {\n  console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n  return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\n\nfunction any() {\n  return define('any', () => true);\n}\nfunction array(Element) {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element];\n        }\n      }\n    },\n\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value;\n    },\n\n    validator(value) {\n      return Array.isArray(value) || \"Expected an array value, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a boolean.\n */\n\nfunction boolean() {\n  return define('boolean', value => {\n    return typeof value === 'boolean';\n  });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nfunction date() {\n  return define('date', value => {\n    return value instanceof Date && !isNaN(value.getTime()) || \"Expected a valid `Date` object, but received: \" + print(value);\n  });\n}\nfunction enums(values) {\n  const schema = {};\n  const description = values.map(v => print(v)).join();\n\n  for (const key of values) {\n    schema[key] = key;\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n\n    validator(value) {\n      return values.includes(value) || \"Expected one of `\" + description + \"`, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a function.\n */\n\nfunction func() {\n  return define('func', value => {\n    return typeof value === 'function' || \"Expected a function, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nfunction instance(Class) {\n  return define('instance', value => {\n    return value instanceof Class || \"Expected a `\" + Class.name + \"` instance, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an integer.\n */\n\nfunction integer() {\n  return define('integer', value => {\n    return typeof value === 'number' && !isNaN(value) && Number.isInteger(value) || \"Expected an integer, but received: \" + print(value);\n  });\n}\nfunction intersection(Structs) {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx);\n      }\n    },\n\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx);\n      }\n    },\n\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx);\n      }\n    }\n\n  });\n}\nfunction literal(constant) {\n  const description = print(constant);\n  const t = typeof constant;\n  return new Struct({\n    type: 'literal',\n    schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n\n    validator(value) {\n      return value === constant || \"Expected the literal `\" + description + \"`, but received: \" + print(value);\n    }\n\n  });\n}\nfunction map(Key, Value) {\n  return new Struct({\n    type: 'map',\n    schema: null,\n\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k, k, Key];\n          yield [k, v, Value];\n        }\n      }\n    },\n\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value;\n    },\n\n    validator(value) {\n      return value instanceof Map || \"Expected a `Map` object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that no value ever passes validation.\n */\n\nfunction never() {\n  return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nfunction nullable(struct) {\n  return new Struct({ ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is a number.\n */\n\nfunction number() {\n  return define('number', value => {\n    return typeof value === 'number' && !isNaN(value) || \"Expected a number, but received: \" + print(value);\n  });\n}\nfunction object(schema) {\n  const knowns = schema ? Object.keys(schema) : [];\n  const Never = never();\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value));\n\n        for (const key of knowns) {\n          unknowns.delete(key);\n          yield [key, value[key], schema[key]];\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    },\n\n    coercer(value) {\n      return isObject(value) ? { ...value\n      } : value;\n    }\n\n  });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nfunction optional(struct) {\n  return new Struct({ ...struct,\n    validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx)\n  });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nfunction record(Key, Value) {\n  return new Struct({\n    type: 'record',\n    schema: null,\n\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k];\n          yield [k, k, Key];\n          yield [k, v, Value];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nfunction regexp() {\n  return define('regexp', value => {\n    return value instanceof RegExp;\n  });\n}\nfunction set(Element) {\n  return new Struct({\n    type: 'set',\n    schema: null,\n\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v, v, Element];\n        }\n      }\n    },\n\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value;\n    },\n\n    validator(value) {\n      return value instanceof Set || \"Expected a `Set` object, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value is a string.\n */\n\nfunction string() {\n  return define('string', value => {\n    return typeof value === 'string' || \"Expected a string, but received: \" + print(value);\n  });\n}\nfunction tuple(Elements) {\n  const Never = never();\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length);\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never];\n        }\n      }\n    },\n\n    validator(value) {\n      return Array.isArray(value) || \"Expected an array, but received: \" + print(value);\n    }\n\n  });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nfunction type(schema) {\n  const keys = Object.keys(schema);\n  return new Struct({\n    type: 'type',\n    schema,\n\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]];\n        }\n      }\n    },\n\n    validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n\n  });\n}\nfunction union(Structs) {\n  const description = Structs.map(s => s.type).join(' | ');\n  return new Struct({\n    type: 'union',\n    schema: null,\n\n    validator(value, ctx) {\n      const failures = [];\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx);\n        const [first] = tuples;\n\n        if (!first[0]) {\n          return [];\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure);\n            }\n          }\n        }\n      }\n\n      return [\"Expected the value to satisfy a union of `\" + description + \"`, but received: \" + print(value), ...failures];\n    }\n\n  });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nfunction unknown() {\n  return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction coerce(struct, condition, coercer) {\n  return new Struct({ ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);\n    }\n  });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction defaulted(struct, fallback, options = {}) {\n  return coerce(struct, unknown(), x => {\n    const f = typeof fallback === 'function' ? fallback() : fallback;\n\n    if (x === undefined) {\n      return f;\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x\n      };\n      let changed = false;\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key];\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        return ret;\n      }\n    }\n\n    return x;\n  });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nfunction trimmed(struct) {\n  return coerce(struct, string(), x => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\n\nfunction empty(struct) {\n  const expected = \"Expected an empty \" + struct.type;\n  return refine(struct, 'empty', value => {\n    if (value instanceof Map || value instanceof Set) {\n      const {\n        size\n      } = value;\n      return size === 0 || expected + \" but received one with a size of `\" + size + \"`\";\n    } else {\n      const {\n        length\n      } = value;\n      return length === 0 || expected + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\n\nfunction max(struct, threshold, options = {}) {\n  const {\n    exclusive\n  } = options;\n  return refine(struct, 'max', value => {\n    return exclusive ? value < threshold : value <= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\n\nfunction min(struct, threshold, options = {}) {\n  const {\n    exclusive\n  } = options;\n  return refine(struct, 'min', value => {\n    return exclusive ? value > threshold : value >= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\n\nfunction pattern(struct, regexp) {\n  return refine(struct, 'pattern', value => {\n    return regexp.test(value) || \"Expected a \" + struct.type + \" matching `/\" + regexp.source + \"/` but received \\\"\" + value + \"\\\"\";\n  });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\n\nfunction size(struct, min, max = min) {\n  const expected = \"Expected a \" + struct.type;\n  const of = min === max ? \"of `\" + min + \"`\" : \"between `\" + min + \"` and `\" + max + \"`\";\n  return refine(struct, 'size', value => {\n    if (typeof value === 'number' || value instanceof Date) {\n      return min <= value && value <= max || expected + \" \" + of + \" but received `\" + value + \"`\";\n    } else if (value instanceof Map || value instanceof Set) {\n      const {\n        size\n      } = value;\n      return min <= size && size <= max || expected + \" with a size \" + of + \" but received one with a size of `\" + size + \"`\";\n    } else {\n      const {\n        length\n      } = value;\n      return min <= length && length <= max || expected + \" with a length \" + of + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\n\nfunction refine(struct, name, refiner) {\n  return new Struct({ ...struct,\n\n    *refiner(value, ctx) {\n      yield* struct.refiner(value, ctx);\n      const result = refiner(value, ctx);\n      const failures = toFailures(result, ctx, struct, value);\n\n      for (const failure of failures) {\n        yield { ...failure,\n          refinement: name\n        };\n      }\n    }\n\n  });\n}\n\nexport { Struct, StructError, any, array, assert, assign, boolean, coerce, create, date, defaulted, define, deprecated, dynamic, empty, enums, func, instance, integer, intersection, is, lazy, literal, map, mask, max, min, never, nullable, number, object, omit, optional, partial, pattern, pick, record, refine, regexp, set, size, string, struct, trimmed, tuple, type, union, unknown, validate };\n//# sourceMappingURL=index.es.js.map\n","import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n","import { Buffer } from 'buffer';\nimport { EventEmitter } from 'eventemitter3';\n\n// node_modules/esbuild-plugin-polyfill-node/polyfills/buffer.js\nvar WebSocketBrowserImpl = class extends EventEmitter {\n  socket;\n  /** Instantiate a WebSocket class\n  * @constructor\n  * @param {String} address - url to a websocket server\n  * @param {(Object)} options - websocket options\n  * @param {(String|Array)} protocols - a list of protocols\n  * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n  */\n  constructor(address, options, protocols) {\n    super();\n    this.socket = new window.WebSocket(address, protocols);\n    this.socket.onopen = () => this.emit(\"open\");\n    this.socket.onmessage = (event) => this.emit(\"message\", event.data);\n    this.socket.onerror = (error) => this.emit(\"error\", error);\n    this.socket.onclose = (event) => {\n      this.emit(\"close\", event.code, event.reason);\n    };\n  }\n  /**\n  * Sends data through a websocket connection\n  * @method\n  * @param {(String|Object)} data - data to be sent via websocket\n  * @param {Object} optionsOrCallback - ws options\n  * @param {Function} callback - a callback called once the data is sent\n  * @return {Undefined}\n  */\n  send(data, optionsOrCallback, callback) {\n    const cb = callback || optionsOrCallback;\n    try {\n      this.socket.send(data);\n      cb();\n    } catch (error) {\n      cb(error);\n    }\n  }\n  /**\n  * Closes an underlying socket\n  * @method\n  * @param {Number} code - status code explaining why the connection is being closed\n  * @param {String} reason - a description why the connection is closing\n  * @return {Undefined}\n  * @throws {Error}\n  */\n  close(code, reason) {\n    this.socket.close(code, reason);\n  }\n  addEventListener(type, listener, options) {\n    this.socket.addEventListener(type, listener, options);\n  }\n};\nfunction WebSocket(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}\n\n// src/lib/utils.ts\nvar DefaultDataPack = class {\n  encode(value) {\n    return JSON.stringify(value);\n  }\n  decode(value) {\n    return JSON.parse(value);\n  }\n};\n\n// src/lib/client.ts\nvar CommonClient = class extends EventEmitter {\n  address;\n  rpc_id;\n  queue;\n  options;\n  autoconnect;\n  ready;\n  reconnect;\n  reconnect_timer_id;\n  reconnect_interval;\n  max_reconnects;\n  rest_options;\n  current_reconnects;\n  generate_request_id;\n  socket;\n  webSocketFactory;\n  dataPack;\n  /**\n  * Instantiate a Client class.\n  * @constructor\n  * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n  * @param {String} address - url to a websocket server\n  * @param {Object} options - ws options object with reconnect parameters\n  * @param {Function} generate_request_id - custom generation request Id\n  * @param {DataPack} dataPack - data pack contains encoder and decoder\n  * @return {CommonClient}\n  */\n  constructor(webSocketFactory, address = \"ws://localhost:8080\", {\n    autoconnect = true,\n    reconnect = true,\n    reconnect_interval = 1e3,\n    max_reconnects = 5,\n    ...rest_options\n  } = {}, generate_request_id, dataPack) {\n    super();\n    this.webSocketFactory = webSocketFactory;\n    this.queue = {};\n    this.rpc_id = 0;\n    this.address = address;\n    this.autoconnect = autoconnect;\n    this.ready = false;\n    this.reconnect = reconnect;\n    this.reconnect_timer_id = void 0;\n    this.reconnect_interval = reconnect_interval;\n    this.max_reconnects = max_reconnects;\n    this.rest_options = rest_options;\n    this.current_reconnects = 0;\n    this.generate_request_id = generate_request_id || (() => ++this.rpc_id);\n    if (!dataPack) this.dataPack = new DefaultDataPack();\n    else this.dataPack = dataPack;\n    if (this.autoconnect)\n      this._connect(this.address, {\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects,\n        ...this.rest_options\n      });\n  }\n  /**\n  * Connects to a defined server if not connected already.\n  * @method\n  * @return {Undefined}\n  */\n  connect() {\n    if (this.socket) return;\n    this._connect(this.address, {\n      autoconnect: this.autoconnect,\n      reconnect: this.reconnect,\n      reconnect_interval: this.reconnect_interval,\n      max_reconnects: this.max_reconnects,\n      ...this.rest_options\n    });\n  }\n  /**\n  * Calls a registered RPC method on server.\n  * @method\n  * @param {String} method - RPC method name\n  * @param {Object|Array} params - optional method parameters\n  * @param {Number} timeout - RPC reply timeout value\n  * @param {Object} ws_opts - options passed to ws\n  * @return {Promise}\n  */\n  call(method, params, timeout, ws_opts) {\n    if (!ws_opts && \"object\" === typeof timeout) {\n      ws_opts = timeout;\n      timeout = null;\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.ready) return reject(new Error(\"socket not ready\"));\n      const rpc_id = this.generate_request_id(method, params);\n      const message = {\n        jsonrpc: \"2.0\",\n        method,\n        params: params || void 0,\n        id: rpc_id\n      };\n      this.socket.send(this.dataPack.encode(message), ws_opts, (error) => {\n        if (error) return reject(error);\n        this.queue[rpc_id] = { promise: [resolve, reject] };\n        if (timeout) {\n          this.queue[rpc_id].timeout = setTimeout(() => {\n            delete this.queue[rpc_id];\n            reject(new Error(\"reply timeout\"));\n          }, timeout);\n        }\n      });\n    });\n  }\n  /**\n  * Logins with the other side of the connection.\n  * @method\n  * @param {Object} params - Login credentials object\n  * @return {Promise}\n  */\n  async login(params) {\n    const resp = await this.call(\"rpc.login\", params);\n    if (!resp) throw new Error(\"authentication failed\");\n    return resp;\n  }\n  /**\n  * Fetches a list of client's methods registered on server.\n  * @method\n  * @return {Array}\n  */\n  async listMethods() {\n    return await this.call(\"__listMethods\");\n  }\n  /**\n  * Sends a JSON-RPC 2.0 notification to server.\n  * @method\n  * @param {String} method - RPC method name\n  * @param {Object} params - optional method parameters\n  * @return {Promise}\n  */\n  notify(method, params) {\n    return new Promise((resolve, reject) => {\n      if (!this.ready) return reject(new Error(\"socket not ready\"));\n      const message = {\n        jsonrpc: \"2.0\",\n        method,\n        params\n      };\n      this.socket.send(this.dataPack.encode(message), (error) => {\n        if (error) return reject(error);\n        resolve();\n      });\n    });\n  }\n  /**\n  * Subscribes for a defined event.\n  * @method\n  * @param {String|Array} event - event name\n  * @return {Undefined}\n  * @throws {Error}\n  */\n  async subscribe(event) {\n    if (typeof event === \"string\") event = [event];\n    const result = await this.call(\"rpc.on\", event);\n    if (typeof event === \"string\" && result[event] !== \"ok\")\n      throw new Error(\n        \"Failed subscribing to an event '\" + event + \"' with: \" + result[event]\n      );\n    return result;\n  }\n  /**\n  * Unsubscribes from a defined event.\n  * @method\n  * @param {String|Array} event - event name\n  * @return {Undefined}\n  * @throws {Error}\n  */\n  async unsubscribe(event) {\n    if (typeof event === \"string\") event = [event];\n    const result = await this.call(\"rpc.off\", event);\n    if (typeof event === \"string\" && result[event] !== \"ok\")\n      throw new Error(\"Failed unsubscribing from an event with: \" + result);\n    return result;\n  }\n  /**\n  * Closes a WebSocket connection gracefully.\n  * @method\n  * @param {Number} code - socket close code\n  * @param {String} data - optional data to be sent before closing\n  * @return {Undefined}\n  */\n  close(code, data) {\n    this.socket.close(code || 1e3, data);\n  }\n  /**\n  * Enable / disable automatic reconnection.\n  * @method\n  * @param {Boolean} reconnect - enable / disable reconnection\n  * @return {Undefined}\n  */\n  setAutoReconnect(reconnect) {\n    this.reconnect = reconnect;\n  }\n  /**\n  * Set the interval between reconnection attempts.\n  * @method\n  * @param {Number} interval - reconnection interval in milliseconds\n  * @return {Undefined}\n  */\n  setReconnectInterval(interval) {\n    this.reconnect_interval = interval;\n  }\n  /**\n  * Set the maximum number of reconnection attempts.\n  * @method\n  * @param {Number} max_reconnects - maximum reconnection attempts\n  * @return {Undefined}\n  */\n  setMaxReconnects(max_reconnects) {\n    this.max_reconnects = max_reconnects;\n  }\n  /**\n  * Connection/Message handler.\n  * @method\n  * @private\n  * @param {String} address - WebSocket API address\n  * @param {Object} options - ws options object\n  * @return {Undefined}\n  */\n  _connect(address, options) {\n    clearTimeout(this.reconnect_timer_id);\n    this.socket = this.webSocketFactory(address, options);\n    this.socket.addEventListener(\"open\", () => {\n      this.ready = true;\n      this.emit(\"open\");\n      this.current_reconnects = 0;\n    });\n    this.socket.addEventListener(\"message\", ({ data: message }) => {\n      if (message instanceof ArrayBuffer)\n        message = Buffer.from(message).toString();\n      try {\n        message = this.dataPack.decode(message);\n      } catch (error) {\n        return;\n      }\n      if (message.notification && this.listeners(message.notification).length) {\n        if (!Object.keys(message.params).length)\n          return this.emit(message.notification);\n        const args = [message.notification];\n        if (message.params.constructor === Object) args.push(message.params);\n        else\n          for (let i = 0; i < message.params.length; i++)\n            args.push(message.params[i]);\n        return Promise.resolve().then(() => {\n          this.emit.apply(this, args);\n        });\n      }\n      if (!this.queue[message.id]) {\n        if (message.method) {\n          return Promise.resolve().then(() => {\n            this.emit(message.method, message?.params);\n          });\n        }\n        return;\n      }\n      if (\"error\" in message === \"result\" in message)\n        this.queue[message.id].promise[1](\n          new Error(\n            'Server response malformed. Response must include either \"result\" or \"error\", but not both.'\n          )\n        );\n      if (this.queue[message.id].timeout)\n        clearTimeout(this.queue[message.id].timeout);\n      if (message.error) this.queue[message.id].promise[1](message.error);\n      else this.queue[message.id].promise[0](message.result);\n      delete this.queue[message.id];\n    });\n    this.socket.addEventListener(\"error\", (error) => this.emit(\"error\", error));\n    this.socket.addEventListener(\"close\", ({ code, reason }) => {\n      if (this.ready)\n        setTimeout(() => this.emit(\"close\", code, reason), 0);\n      this.ready = false;\n      this.socket = void 0;\n      if (code === 1e3) return;\n      this.current_reconnects++;\n      if (this.reconnect && (this.max_reconnects > this.current_reconnects || this.max_reconnects === 0))\n        this.reconnect_timer_id = setTimeout(\n          () => this._connect(address, options),\n          this.reconnect_interval\n        );\n    });\n  }\n};\n\n// src/index.browser.ts\nvar Client = class extends CommonClient {\n  constructor(address = \"ws://localhost:8080\", {\n    autoconnect = true,\n    reconnect = true,\n    reconnect_interval = 1e3,\n    max_reconnects = 5\n  } = {}, generate_request_id) {\n    super(\n      WebSocket,\n      address,\n      {\n        autoconnect,\n        reconnect,\n        reconnect_interval,\n        max_reconnects\n      },\n      generate_request_id\n    );\n  }\n};\n\nexport { Client, CommonClient, DefaultDataPack, WebSocket };\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.mjs.map"],"names":["basex","__webpack_require__","module","exports","_O","Jq","KB","u8","cv","Ik","A9","n_","gM","buffer_1","checkUint8Array","b","Uint8Array","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","OffsetLayout","layout","UInt","UIntBE","decode","encode","src","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","divmodInt64","hi32","Math","floor","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearInt64","readInt32LE","writeInt32LE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","undefined","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","has","prefix","Events","EE","fn","context","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","getOwnPropertySymbols","concat","listeners","handlers","l","ee","listenerCount","emit","a1","a2","a3","a4","a5","args","len","arguments","removeListener","apply","j","on","removeAllListeners","off","prefixed","uuid","v4","generateRequest","ClientBrowser","callServer","options","reviver","replacer","generator","version","notificationIdNull","request","method","params","id","callback","message","self","isBatch","isRaw","hasCallback","err","JSON","stringify","response","_parseResponse","responseText","parse","error","result","isError","res","filter","jsonrpc","eventemitter3_1","utils_1","CommonClient","address","rpc_id","queue","autoconnect","ready","reconnect","reconnect_timer_id","reconnect_interval","max_reconnects","rest_options","current_reconnects","generate_request_id","socket","webSocketFactory","dataPack","DefaultDataPack","_connect","connect","timeout","ws_opts","Promise","resolve","reject","send","promise","setTimeout","login","resp","listMethods","notify","subscribe","unsubscribe","close","code","data","setAutoReconnect","setReconnectInterval","interval","setMaxReconnects","clearTimeout","addEventListener","ArrayBuffer","notification","keys","then","reason","Z","WebSocketBrowserImpl","protocols","window","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","cb","type","defineProperty","createError","errors","Map","details","get","oU","buf","reversed","reverse","hex","BigInt","Q5","k$","num","width","padStart","zP","__createBinding","o","m","k","k2","enumerable","__setModuleDefault","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","__importStar","mod","__esModule","__importDefault","deserializeUnchecked","deserialize","serialize","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","encoding","ResolvedTextDecoder","TextDecoder","textDecoder","fatal","default","Error","fieldPath","originalMessage","addToFieldPath","fieldName","splice","join","alloc","maybeResize","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","subarray","writeString","str","writeFixedArray","array","writeArray","elem","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","RangeError","indexOf","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","string","charAt","toUpperCase","serializeField","schema","fieldType","writer","item","kind","size","forEach","val","serializeStruct","obj","borshSerialize","structSchema","map","field","deserializeField","reader","arr","option","set","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","_nodeId","_clockseq","_lastMSecs","_lastNSecs","esm_browser_v1","node","clockseq","seedBytes","random","rng","msecs","Date","now","nsecs","dt","tl","tmh","n","esm_browser_parse","validate","TypeError","parseInt","v35","hashfunc","generateUUID","namespace","stringToBytes","unescape","encodeURIComponent","bytes","charCodeAt","DNS","URL","getOutputLength","inputLength8","safeAdd","x","y","lsw","msw","md5cmn","q","a","s","t","md5ff","md5gg","md5hh","md5ii","esm_browser_v3","msg","md5ToHexEncodedArray","input","output","length32","hexTab","wordsToMd5","olda","oldb","oldc","oldd","bytesToWords","length8","Uint32Array","ROTL","esm_browser_v5","K","H","N","ceil","M","_i","_i2","W","_t","_t2","T","f","z","nil","esm_browser_version","substr","U32_MASK64","_32n","fromBig","le","h","lst","Ah","Al","rotlSH","rotlSL","rotlBH","rotlBL","__webpack_exports__","ZP","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","SHA3_IOTA_H","SHA3_IOTA_L","_u64_js__WEBPACK_IMPORTED_MODULE_0__","Vl","rotlH","SD","EP","rotlL","mk","gm","Keccak","_utils_js__WEBPACK_IMPORTED_MODULE_1__","kb","blockLen","suffix","outputLen","enableXOF","rounds","pos","posOut","finished","destroyed","_assert_js__WEBPACK_IMPORTED_MODULE_2__","k8","state","state32","keccak","iA","l1","keccakP","B","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","fill","update","$h","O0","take","min","finish","writeInto","out","gk","bufferOut","xofInto","xof","digestInto","eB","destroy","digest","_cloneInto","to","gen","hE","sha3_256","keccak_256","keccak_512","base_encodeDecode","bigInt","bigIntLayout","browser","bigIntBE","u64","bignumber","bool","boolLayout","publicKey","publicKeyLayout","index_browser_esm","nh","toBuffer","constTimeNegate","condition","neg","negate","validateW","isSafeInteger","calcWOpts","windows","windowSize","pointPrecomputes","WeakMap","pointWindowSizes","getW","P","wNAF","hasPrecomputes","elm","unsafeLadder","p","ZERO","double","precomputeWindow","points","base","precomputes","BASE","mask","maxNumber","shiftBy","wbits","offset2","abs","cond1","cond2","wNAFUnsafe","curr","getPrecomputes","transform","comp","wNAFCached","wNAFCachedUnsafe","prev","setWindowSize","delete","pippenger","fieldN","scalars","validateMSMPoints","validateMSMScalars","isValid","zero","_utils_js__WEBPACK_IMPORTED_MODULE_0__","Dd","MASK","buckets","lastBits","BITS","scalar","resI","sumI","validateBasic","curve","_modular_js__WEBPACK_IMPORTED_MODULE_1__","OP","Fp","FF","Gx","Gy","nBitLength","nByteLength","freeze","kK","ORDER","_3n","_4n","_5n","_8n","pow2","power","modulo","invert","number","u","gcd","isNegativeLE","FIELD_FIELDS","validateField","opts","BYTES","nLength","_nBitLength","Field","bitLen","isLE","redef","sqrtP","dQ","ONE","is0","isOdd","eql","lhs","rhs","sqr","sub","mul","pow","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","FpSqrt","p1div4","root","c1","n2","nv","tonelliShanks","Q","S","legendreC","Q1div2","g","t2","ge","invertBatch","FpInvertBatch","nums","tmp","lastMultiplied","inverted","reduceRight","cmov","toBytes","S5","tL","fromBytes","ty","bytesToNumberBE","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","fieldLen","minLen","reduced","isBytes","isView","abytes","abool","title","hexes","_","bytesToHex","numberToHexUnpadded","hexToNumber","asciis","_0","_9","A","F","asciiToBase16","ch","hexToBytes","hl","al","ai","hi","n1","char","bytesToNumberLE","numberToBytesBE","numberToBytesLE","ensureBytes","expectedLength","concatBytes","arrays","pad","isPosBig","inRange","max","aInRange","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","reset","reseed","seed","sl","pred","validatorFns","bigint","function","boolean","stringOrUint8Array","object","hash","validateObject","validators","optValidators","checkField","isOptional","checkVal","String","entries","memoized","arg","computed","_u64","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","_md","VR","Fh","Fl","Gh","Gl","Hh","Hl","process","view","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","roundClean","sha512_sha512","utils","VERIFY_DEFAULT","zip215","ED25519_P","ED25519_SQRT_M1","ed25519_0n","ed25519_1n","ed25519_2n","ed25519_8n","uvRatio","v3","modular","wQ","v7","ed25519_pow_2_252_3","_10n","_20n","_40n","_80n","x2","b2","b4","oA","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","vx2","root1","root2","useRoot1","useRoot2","noRoot","Tu","gN","ed25519Defaults","randomBytes","O6","adjustScalarBytes","ed25519","edwards_twistedEdwards","curveDef","CURVE","validateOpts","abstract_curve","Kd","abstract_utils","domain","mapToCurve","CURVE_ORDER","prehash","cHash","cofactor","modP","Fn","ctx","phflag","uw","aCoordinate","Fy","assertPoint","other","Point","toAffineMemo","H9","iz","ex","ey","ez","ax","ay","zz","assertValidMemo","X","Y","et","X2","Y2","Z2","Z4","aX2","left","right","XY","ZT","toAffine","fromAffine","normalizeZ","toInv","msm","D1","_setWindowSize","wnaf","assertValidity","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","C","D","x1y1","E","G","X3","Y3","T3","Z3","T1","T2","subtract","multiply","multiplyUnsafe","I","isSmallOrder","isTorsionFree","clearCofactor","fromHex","ql","normed","lastByte","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","toHex","ci","Mx","modN_LE","hashed","head","pointBytes","hashDomainToScalar","msgs","eV","getPublicKey","sign","verify","sig","SB","RkA","ExtendedPoint","randomPrivateKey","precompute","assertRstPoint","RistPoint","invertSqrt","bytes255ToNumberLE","calcElligatorRistrettoMap","r0","SQRT_M1","Ns","Ns_D_is_sq","s_","Nt","s2","W0","W1","W2","W3","ep","ap","hashToCurve","r1","R1","r2","R2","emsg","equalBytes","u1","u2","u1_2","u2_2","Dx","Dy","u2sq","invsqrt","D2","zInv","_x","_y","one","two","SHA256_K","SHA256_IV","SHA256_W","SHA256","W15","s0","np","s1","sigma1","bc","sigma0","l3","sha256_sha256","HMAC","_key","_assert","z3","iHash","oHash","getPrototypeOf","hmac","validateSigVerOpts","lowS","b2n","h2b","DER","Err","_tlv","dataLen","uz","lenLen","first","isLong","lengthBytes","_int","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","hexFromSig","rs","ss","secp256k1P","secp256k1N","secp256k1_1n","secp256k1_2n","divNearest","Fpk1","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","secp256k1","createCurve","defHash","weierstrass","bits2int","bits2int_modN","compressedLen","uncompressedLen","modN","invN","U_","ProjectivePoint","normPrivateKeyToScalar","weierstrassEquation","isWithinCurveOrder","weierstrassPoints","validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","_c","_isCompressed","tail","x3","lengths","includes","assertPrjPoint","px","py","pz","privateKey","hasEvenY","U1","U2","t0","t3","t4","t5","sc","k1neg","k1","k2neg","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","isCompressed","_bits","cat","sqrtError","isYOdd","numToNByteStr","isBiggerThanHalfOrder","HALF","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isProbPub","delta","ORDER_MASK","int2octets","defaultSigOpts","defaultVerOpts","getSharedSecret","privateA","publicB","k2sig","prepSig","some","extraEntropy","ent","h1int","seedArgs","kBytes","ik","normS","drbg","n$","signature","_sig","format","isHex","isObj","sg","derError","is","isValidPrivateKey","PS","Us","b1","POW_2_128","c2","anumber","ahash","aexists","instance","checkFinished","aoutput","Chi","Maj","HashMD","padOffset","GL","_assert_js__WEBPACK_IMPORTED_MODULE_1__","dataView","setBigUint64","_u32_max","wh","wl","setUint32","oview","outLen","crypto_crypto","globalThis","crypto","createView","DataView","byteLength","rotr","utf8ToBytes","TextEncoder","Hash","clone","wrapConstructor","hashCons","hashC","bytesLength","getRandomValues","StructError","failure","failures","cached","explanation","rest","path","cause","isObject","isNonArrayObject","print","toFailures","struct","Symbol","iterator","toFailure","branch","refinement","run","coerce","coercer","status","validator","ts","Set","refiner","Struct","props","assert","tuples","tuple","shiftIterator","done","next","define","any","Element","Class","literal","constant","description","nullable","isNaN","optional","record","Key","Value","Structs","Never","coerced","unknown","TOKEN_PROGRAM_ID","_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__","ASSOCIATED_TOKEN_PROGRAM_ID","TokenInstruction","types_TokenInstruction","transferInstructionData","esm","AW","createTransferInstruction","source","destination","owner","amount","multiSigners","programId","constants","H_","addSigners","ownerOrAuthority","signer","pubkey","isSigner","isWritable","instruction","Transfer","Sl","TokenError","errors_TokenOwnerOffCurveError","MintLayout","ZL","Xg","getAssociatedTokenAddress","mint","allowOwnerOffCurve","associatedTokenProgramId","_u","isOnCurve","findProgramAddress","precomputesMap","_WINDOW_SIZE","_modular_js__WEBPACK_IMPORTED_MODULE_0__","FpSqrtEven","_A","_F","_a","_f","twistedEdwards","inBig","in0MaskRange","assertInRange","assertGE0","isPoint","ELL2_C1","DV","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","MAX_255B","vp","Gg","aI","_parseInt","rBytesLeft","shl","rhl","rl","assertGE","exists","J8","_cached","valid","Elements","_index_js__WEBPACK_IMPORTED_MODULE_0__"],"sourceRoot":""}