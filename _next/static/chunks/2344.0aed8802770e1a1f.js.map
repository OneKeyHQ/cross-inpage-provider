{"version":3,"file":"static/chunks/2344.0aed8802770e1a1f.js","mappings":"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","sources":["webpack://_N_E/./node_modules/bs58/index.js","webpack://_N_E/./node_modules/bs58/node_modules/base-x/src/index.js","webpack://_N_E/./node_modules/fast-sha256/sha256.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/bcs/src/legacy-registry.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/bcs/src/bcs.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/bcs/index.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/bcs/src/b58.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/bcs/src/b64.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/bcs/src/bcs-type.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/bcs/src/hex.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/bcs/src/reader.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/bcs/src/uleb.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/bcs/src/utils.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/bcs/src/writer.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/bcs/type-tag-serializer.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/client/network.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/utils/benfenns.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/version.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/client/errors.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/client/rpc-websocket-client.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/client/http-transport.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/client/client.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/components/BenfenClientProvider.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/utils/stateStorage.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/constants/walletDefaults.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/wallet-standard/detect.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/utils/walletUtils.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/wallet/useAutoConnectWallet.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/wallet/useWalletPropertiesChanged.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/wallet/useWalletsChanged.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/walletStore.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/components/WalletProvider.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/constants/walletMutationKeys.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/contexts/walletContext.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/errors/walletErrors.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/networkConfig.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/useBenfenClient.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/wallet/useConnectWallet.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/wallet/useCurrentAccount.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/wallet/useCurrentWallet.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/wallet/useDisconnectWallet.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/wallet/useSignAndExecuteTransactionBlock.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/wallet/useSignPersonalMessage.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/wallet/useSignTransactionBlock.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/wallet/useWalletStore.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/dapp-kit/hooks/wallet/useWallets.js","webpack://_N_E/./node_modules/superstruct/dist/index.mjs","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/transactions/Inputs.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/transactions/pure.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/transactions/utils.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/transactions/serializer.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/transactions/hash.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/transactions/Transactions.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/transactions/TransactionBlockData.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/transactions/TransactionBlock.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/utils/bf-types.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/utils/format.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/utils/index.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/cryptography/intent.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/cryptography/publickey.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/cryptography/signature-scheme.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/zklogin/helper/jwt-utils.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/zklogin/helper/bcs.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/zklogin/helper/signature.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/zklogin/helper/utils.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/zklogin/helper/publickey.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/cryptography/signature.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/keypairs/ed25519/publickey.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_assert.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/crypto.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/utils.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/_sha2.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/sha256.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/esm/abstract/utils.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/esm/abstract/modular.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/node_modules/@noble/hashes/esm/hmac.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/esm/abstract/curve.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/esm/abstract/weierstrass.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/esm/_shortw_utils.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/esm/secp256k1.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/keypairs/secp256k1/publickey.js","webpack://_N_E/./node_modules/@benfen/bfc.js/node_modules/@noble/curves/esm/p256.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/keypairs/secp256r1/publickey.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/multisig/publickey.js","webpack://_N_E/./node_modules/@benfen/bfc.js/dist/esm/verify/index.js","webpack://_N_E/./node_modules/@noble/hashes/esm/_u64.js","webpack://_N_E/./node_modules/@noble/hashes/esm/_blake.js","webpack://_N_E/./node_modules/@noble/hashes/esm/blake2b.js","webpack://_N_E/<anon>"],"sourcesContent":["const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","(function (root, factory) {\n    // Hack to make all exports of this module sha256 function object properties.\n    var exports = {};\n    factory(exports);\n    var sha256 = exports[\"default\"];\n    for (var k in exports) {\n        sha256[k] = exports[k];\n    }\n        \n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        module.exports = sha256;\n    } else if (typeof define === 'function' && define.amd) {\n        define(function() { return sha256; }); \n    } else {\n        root.sha256 = sha256;\n    }\n})(this, function(exports) {\n\"use strict\";\nexports.__esModule = true;\n// SHA-256 (+ HMAC and PBKDF2) for JavaScript.\n//\n// Written in 2014-2016 by Dmitry Chestnykh.\n// Public domain, no warranty.\n//\n// Functions (accept and return Uint8Arrays):\n//\n//   sha256(message) -> hash\n//   sha256.hmac(key, message) -> mac\n//   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk\n//\n//  Classes:\n//\n//   new sha256.Hash()\n//   new sha256.HMAC(key)\n//\nexports.digestLength = 32;\nexports.blockSize = 64;\n// SHA-256 constants\nvar K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\nfunction hashBlocks(w, v, p, pos, len) {\n    var a, b, c, d, e, f, g, h, u, i, j, t1, t2;\n    while (len >= 64) {\n        a = v[0];\n        b = v[1];\n        c = v[2];\n        d = v[3];\n        e = v[4];\n        f = v[5];\n        g = v[6];\n        h = v[7];\n        for (i = 0; i < 16; i++) {\n            j = pos + i * 4;\n            w[i] = (((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) |\n                ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff));\n        }\n        for (i = 16; i < 64; i++) {\n            u = w[i - 2];\n            t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);\n            u = w[i - 15];\n            t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);\n            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n        }\n        for (i = 0; i < 64; i++) {\n            t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n            t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n        pos += 64;\n        len -= 64;\n    }\n    return pos;\n}\n// Hash implements SHA256 hash algorithm.\nvar Hash = /** @class */ (function () {\n    function Hash() {\n        this.digestLength = exports.digestLength;\n        this.blockSize = exports.blockSize;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this.state = new Int32Array(8); // hash state\n        this.temp = new Int32Array(64); // temporary state\n        this.buffer = new Uint8Array(128); // buffer for data to hash\n        this.bufferLength = 0; // number of bytes in buffer\n        this.bytesHashed = 0; // number of total bytes hashed\n        this.finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    // Resets hash state making it possible\n    // to re-use this instance to hash other data.\n    Hash.prototype.reset = function () {\n        this.state[0] = 0x6a09e667;\n        this.state[1] = 0xbb67ae85;\n        this.state[2] = 0x3c6ef372;\n        this.state[3] = 0xa54ff53a;\n        this.state[4] = 0x510e527f;\n        this.state[5] = 0x9b05688c;\n        this.state[6] = 0x1f83d9ab;\n        this.state[7] = 0x5be0cd19;\n        this.bufferLength = 0;\n        this.bytesHashed = 0;\n        this.finished = false;\n        return this;\n    };\n    // Cleans internal buffers and re-initializes hash state.\n    Hash.prototype.clean = function () {\n        for (var i = 0; i < this.buffer.length; i++) {\n            this.buffer[i] = 0;\n        }\n        for (var i = 0; i < this.temp.length; i++) {\n            this.temp[i] = 0;\n        }\n        this.reset();\n    };\n    // Updates hash state with the given data.\n    //\n    // Optionally, length of the data can be specified to hash\n    // fewer bytes than data.length.\n    //\n    // Throws error when trying to update already finalized hash:\n    // instance must be reset to use it again.\n    Hash.prototype.update = function (data, dataLength) {\n        if (dataLength === void 0) { dataLength = data.length; }\n        if (this.finished) {\n            throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n        var dataPos = 0;\n        this.bytesHashed += dataLength;\n        if (this.bufferLength > 0) {\n            while (this.bufferLength < 64 && dataLength > 0) {\n                this.buffer[this.bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this.bufferLength === 64) {\n                hashBlocks(this.temp, this.state, this.buffer, 0, 64);\n                this.bufferLength = 0;\n            }\n        }\n        if (dataLength >= 64) {\n            dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength);\n            dataLength %= 64;\n        }\n        while (dataLength > 0) {\n            this.buffer[this.bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    };\n    // Finalizes hash state and puts hash into out.\n    //\n    // If hash was already finalized, puts the same value.\n    Hash.prototype.finish = function (out) {\n        if (!this.finished) {\n            var bytesHashed = this.bytesHashed;\n            var left = this.bufferLength;\n            var bitLenHi = (bytesHashed / 0x20000000) | 0;\n            var bitLenLo = bytesHashed << 3;\n            var padLength = (bytesHashed % 64 < 56) ? 64 : 128;\n            this.buffer[left] = 0x80;\n            for (var i = left + 1; i < padLength - 8; i++) {\n                this.buffer[i] = 0;\n            }\n            this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff;\n            this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff;\n            this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff;\n            this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff;\n            this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff;\n            this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff;\n            this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff;\n            this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff;\n            hashBlocks(this.temp, this.state, this.buffer, 0, padLength);\n            this.finished = true;\n        }\n        for (var i = 0; i < 8; i++) {\n            out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff;\n            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\n            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\n            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\n        }\n        return this;\n    };\n    // Returns the final hash digest.\n    Hash.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    // Internal function for use in HMAC for optimization.\n    Hash.prototype._saveState = function (out) {\n        for (var i = 0; i < this.state.length; i++) {\n            out[i] = this.state[i];\n        }\n    };\n    // Internal function for use in HMAC for optimization.\n    Hash.prototype._restoreState = function (from, bytesHashed) {\n        for (var i = 0; i < this.state.length; i++) {\n            this.state[i] = from[i];\n        }\n        this.bytesHashed = bytesHashed;\n        this.finished = false;\n        this.bufferLength = 0;\n    };\n    return Hash;\n}());\nexports.Hash = Hash;\n// HMAC implements HMAC-SHA256 message authentication algorithm.\nvar HMAC = /** @class */ (function () {\n    function HMAC(key) {\n        this.inner = new Hash();\n        this.outer = new Hash();\n        this.blockSize = this.inner.blockSize;\n        this.digestLength = this.inner.digestLength;\n        var pad = new Uint8Array(this.blockSize);\n        if (key.length > this.blockSize) {\n            (new Hash()).update(key).finish(pad).clean();\n        }\n        else {\n            for (var i = 0; i < key.length; i++) {\n                pad[i] = key[i];\n            }\n        }\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36;\n        }\n        this.inner.update(pad);\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36 ^ 0x5c;\n        }\n        this.outer.update(pad);\n        this.istate = new Uint32Array(8);\n        this.ostate = new Uint32Array(8);\n        this.inner._saveState(this.istate);\n        this.outer._saveState(this.ostate);\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] = 0;\n        }\n    }\n    // Returns HMAC state to the state initialized with key\n    // to make it possible to run HMAC over the other data with the same\n    // key without creating a new instance.\n    HMAC.prototype.reset = function () {\n        this.inner._restoreState(this.istate, this.inner.blockSize);\n        this.outer._restoreState(this.ostate, this.outer.blockSize);\n        return this;\n    };\n    // Cleans HMAC state.\n    HMAC.prototype.clean = function () {\n        for (var i = 0; i < this.istate.length; i++) {\n            this.ostate[i] = this.istate[i] = 0;\n        }\n        this.inner.clean();\n        this.outer.clean();\n    };\n    // Updates state with provided data.\n    HMAC.prototype.update = function (data) {\n        this.inner.update(data);\n        return this;\n    };\n    // Finalizes HMAC and puts the result in out.\n    HMAC.prototype.finish = function (out) {\n        if (this.outer.finished) {\n            this.outer.finish(out);\n        }\n        else {\n            this.inner.finish(out);\n            this.outer.update(out, this.digestLength).finish(out);\n        }\n        return this;\n    };\n    // Returns message authentication code.\n    HMAC.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    return HMAC;\n}());\nexports.HMAC = HMAC;\n// Returns SHA256 hash of data.\nfunction hash(data) {\n    var h = (new Hash()).update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash;\n// Function hash is both available as module.hash and as default export.\nexports[\"default\"] = hash;\n// Returns HMAC-SHA256 of data under the key.\nfunction hmac(key, data) {\n    var h = (new HMAC(key)).update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hmac = hmac;\n// Fills hkdf buffer like this:\n// T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)\nfunction fillBuffer(buffer, hmac, info, counter) {\n    // Counter is a byte value: check if it overflowed.\n    var num = counter[0];\n    if (num === 0) {\n        throw new Error(\"hkdf: cannot expand more\");\n    }\n    // Prepare HMAC instance for new data with old key.\n    hmac.reset();\n    // Hash in previous output if it was generated\n    // (i.e. counter is greater than 1).\n    if (num > 1) {\n        hmac.update(buffer);\n    }\n    // Hash in info if it exists.\n    if (info) {\n        hmac.update(info);\n    }\n    // Hash in the counter.\n    hmac.update(counter);\n    // Output result to buffer and clean HMAC instance.\n    hmac.finish(buffer);\n    // Increment counter inside typed array, this works properly.\n    counter[0]++;\n}\nvar hkdfSalt = new Uint8Array(exports.digestLength); // Filled with zeroes.\nfunction hkdf(key, salt, info, length) {\n    if (salt === void 0) { salt = hkdfSalt; }\n    if (length === void 0) { length = 32; }\n    var counter = new Uint8Array([1]);\n    // HKDF-Extract uses salt as HMAC key, and key as data.\n    var okm = hmac(salt, key);\n    // Initialize HMAC for expanding with extracted key.\n    // Ensure no collisions with `hmac` function.\n    var hmac_ = new HMAC(okm);\n    // Allocate buffer.\n    var buffer = new Uint8Array(hmac_.digestLength);\n    var bufpos = buffer.length;\n    var out = new Uint8Array(length);\n    for (var i = 0; i < length; i++) {\n        if (bufpos === buffer.length) {\n            fillBuffer(buffer, hmac_, info, counter);\n            bufpos = 0;\n        }\n        out[i] = buffer[bufpos++];\n    }\n    hmac_.clean();\n    buffer.fill(0);\n    counter.fill(0);\n    return out;\n}\nexports.hkdf = hkdf;\n// Derives a key from password and salt using PBKDF2-HMAC-SHA256\n// with the given number of iterations.\n//\n// The number of bytes returned is equal to dkLen.\n//\n// (For better security, avoid dkLen greater than hash length - 32 bytes).\nfunction pbkdf2(password, salt, iterations, dkLen) {\n    var prf = new HMAC(password);\n    var len = prf.digestLength;\n    var ctr = new Uint8Array(4);\n    var t = new Uint8Array(len);\n    var u = new Uint8Array(len);\n    var dk = new Uint8Array(dkLen);\n    for (var i = 0; i * len < dkLen; i++) {\n        var c = i + 1;\n        ctr[0] = (c >>> 24) & 0xff;\n        ctr[1] = (c >>> 16) & 0xff;\n        ctr[2] = (c >>> 8) & 0xff;\n        ctr[3] = (c >>> 0) & 0xff;\n        prf.reset();\n        prf.update(salt);\n        prf.update(ctr);\n        prf.finish(u);\n        for (var j = 0; j < len; j++) {\n            t[j] = u[j];\n        }\n        for (var j = 2; j <= iterations; j++) {\n            prf.reset();\n            prf.update(u).finish(u);\n            for (var k = 0; k < len; k++) {\n                t[k] ^= u[k];\n            }\n        }\n        for (var j = 0; j < len && i * len + j < dkLen; j++) {\n            dk[i * len + j] = t[j];\n        }\n    }\n    for (var i = 0; i < len; i++) {\n        t[i] = u[i] = 0;\n    }\n    for (var i = 0; i < 4; i++) {\n        ctr[i] = 0;\n    }\n    prf.clean();\n    return dk;\n}\nexports.pbkdf2 = pbkdf2;\n});\n","import sha256 from \"fast-sha256\";\nimport { fromB58, toB58 } from \"./b58.js\";\nimport { fromB64, toB64 } from \"./b64.js\";\nimport { BcsType } from \"./bcs-type.js\";\nimport { fromHEX, toHEX } from \"./hex.js\";\nimport { BcsReader } from \"./reader.js\";\nimport { decodeStr, splitGenericParameters } from \"./utils.js\";\nimport { BcsWriter } from \"./writer.js\";\nconst BENFEN_ADDRESS_LENGTH = 32;\nconst _BCS = class {\n  /**\n   * Construct a BCS instance with a prepared schema.\n   *\n   * @param schema A prepared schema with type definitions\n   * @param withPrimitives Whether to register primitive types by default\n   */\n  constructor(schema) {\n    /**\n     * Map of kind `TypeName => TypeInterface`. Holds all\n     * callbacks for (de)serialization of every registered type.\n     *\n     * If the value stored is a string, it is treated as an alias.\n     */\n    this.types = /* @__PURE__ */ new Map();\n    /**\n     * Count temp keys to generate a new one when requested.\n     */\n    this.counter = 0;\n    if (schema instanceof _BCS) {\n      this.schema = schema.schema;\n      this.types = new Map(schema.types);\n      return;\n    }\n    this.schema = schema;\n    this.registerAddressType(_BCS.ADDRESS, schema.addressLength, schema.addressEncoding);\n    this.registerVectorType(schema.vectorType);\n    if (schema.types && schema.types.structs) {\n      for (let name of Object.keys(schema.types.structs)) {\n        this.registerStructType(name, schema.types.structs[name]);\n      }\n    }\n    if (schema.types && schema.types.enums) {\n      for (let name of Object.keys(schema.types.enums)) {\n        this.registerEnumType(name, schema.types.enums[name]);\n      }\n    }\n    if (schema.types && schema.types.aliases) {\n      for (let name of Object.keys(schema.types.aliases)) {\n        this.registerAlias(name, schema.types.aliases[name]);\n      }\n    }\n    if (schema.withPrimitives !== false) {\n      registerPrimitives(this);\n    }\n  }\n  /**\n   * Name of the key to use for temporary struct definitions.\n   * Returns a temp key + index (for a case when multiple temp\n   * structs are processed).\n   */\n  tempKey() {\n    return `bcs-struct-${++this.counter}`;\n  }\n  /**\n   * Serialize data into bcs.\n   *\n   * @example\n   * bcs.registerVectorType('vector<u8>', 'u8');\n   *\n   * let serialized = BCS\n   *   .set('vector<u8>', [1,2,3,4,5,6])\n   *   .toBytes();\n   *\n   * console.assert(toHex(serialized) === '06010203040506');\n   *\n   * @param type Name of the type to serialize (must be registered) or a struct type.\n   * @param data Data to serialize.\n   * @param size Serialization buffer size. Default 1024 = 1KB.\n   * @return A BCS reader instance. Usually you'd want to call `.toBytes()`\n   */\n  ser(type, data, options) {\n    if (typeof type === \"string\" || Array.isArray(type)) {\n      const { name, params } = this.parseTypeName(type);\n      return this.getTypeInterface(name).encode(this, data, options, params);\n    }\n    if (typeof type === \"object\") {\n      const key = this.tempKey();\n      const temp = new _BCS(this);\n      return temp.registerStructType(key, type).ser(key, data, options);\n    }\n    throw new Error(`Incorrect type passed into the '.ser()' function. \n${JSON.stringify(type)}`);\n  }\n  /**\n   * Deserialize BCS into a JS type.\n   *\n   * @example\n   * let num = bcs.ser('u64', '4294967295').toString('hex');\n   * let deNum = bcs.de('u64', num, 'hex');\n   * console.assert(deNum.toString(10) === '4294967295');\n   *\n   * @param type Name of the type to deserialize (must be registered) or a struct type definition.\n   * @param data Data to deserialize.\n   * @param encoding Optional - encoding to use if data is of type String\n   * @return Deserialized data.\n   */\n  de(type, data, encoding) {\n    if (typeof data === \"string\") {\n      if (encoding) {\n        data = decodeStr(data, encoding);\n      } else {\n        throw new Error(\"To pass a string to `bcs.de`, specify encoding\");\n      }\n    }\n    if (typeof type === \"string\" || Array.isArray(type)) {\n      const { name, params } = this.parseTypeName(type);\n      return this.getTypeInterface(name).decode(this, data, params);\n    }\n    if (typeof type === \"object\") {\n      const temp = new _BCS(this);\n      const key = this.tempKey();\n      return temp.registerStructType(key, type).de(key, data, encoding);\n    }\n    throw new Error(`Incorrect type passed into the '.de()' function. \n${JSON.stringify(type)}`);\n  }\n  /**\n   * Check whether a `TypeInterface` has been loaded for a `type`.\n   * @param type Name of the type to check.\n   * @returns\n   */\n  hasType(type) {\n    return this.types.has(type);\n  }\n  /**\n   * Create an alias for a type.\n   * WARNING: this can potentially lead to recursion\n   * @param name Alias to use\n   * @param forType Type to reference\n   * @returns\n   *\n   * @example\n   * ```\n   * let bcs = new BCS(getBenfenMoveConfig());\n   * bcs.registerAlias('ObjectDigest', BCS.BASE58);\n   * let b58_digest = bcs.de('ObjectDigest', '<digest_bytes>', 'base64');\n   * ```\n   */\n  registerAlias(name, forType) {\n    this.types.set(name, forType);\n    return this;\n  }\n  /**\n   * Method to register new types for BCS internal representation.\n   * For each registered type 2 callbacks must be specified and one is optional:\n   *\n   * - encodeCb(writer, data) - write a way to serialize data with BcsWriter;\n   * - decodeCb(reader) - write a way to deserialize data with BcsReader;\n   * - validateCb(data) - validate data - either return bool or throw an error\n   *\n   * @example\n   * // our type would be a string that consists only of numbers\n   * bcs.registerType('number_string',\n   *    (writer, data) => writer.writeVec(data, (w, el) => w.write8(el)),\n   *    (reader) => reader.readVec((r) => r.read8()).join(''), // read each value as u8\n   *    (value) => /[0-9]+/.test(value) // test that it has at least one digit\n   * );\n   * console.log(Array.from(bcs.ser('number_string', '12345').toBytes()) == [5,1,2,3,4,5]);\n   *\n   * @param name\n   * @param encodeCb Callback to encode a value.\n   * @param decodeCb Callback to decode a value.\n   * @param validateCb Optional validator Callback to check type before serialization.\n   */\n  registerType(typeName, encodeCb, decodeCb, validateCb = () => true) {\n    const { name, params: generics } = this.parseTypeName(typeName);\n    this.types.set(name, {\n      encode(self, data, options, typeParams) {\n        const typeMap = generics.reduce((acc, value, index) => {\n          return Object.assign(acc, { [value]: typeParams[index] });\n        }, {});\n        return this._encodeRaw.call(self, new BcsWriter(options), data, typeParams, typeMap);\n      },\n      decode(self, data, typeParams) {\n        const typeMap = generics.reduce((acc, value, index) => {\n          return Object.assign(acc, { [value]: typeParams[index] });\n        }, {});\n        return this._decodeRaw.call(self, new BcsReader(data), typeParams, typeMap);\n      },\n      // these methods should always be used with caution as they require pre-defined\n      // reader and writer and mainly exist to allow multi-field (de)serialization;\n      _encodeRaw(writer, data, typeParams, typeMap) {\n        if (validateCb(data)) {\n          return encodeCb.call(this, writer, data, typeParams, typeMap);\n        } else {\n          throw new Error(`Validation failed for type ${name}, data: ${data}`);\n        }\n      },\n      _decodeRaw(reader, typeParams, typeMap) {\n        return decodeCb.call(this, reader, typeParams, typeMap);\n      }\n    });\n    return this;\n  }\n  /**\n  \t * Method to register BcsType instances to the registry\n  \t * Types are registered with a callback that provides BcsType instances for each generic\n  \t * passed to the type.\n  \t *\n  \t * - createType(...generics) - Return a BcsType instance\n  \t *\n  \t * @example\n  \t * // our type would be a string that consists only of numbers\n  \t * bcs.registerType('Box<T>', (T) => {\n  \t * \t\treturn bcs.struct({\n  \t * \t\t\tvalue: T\n  \t * \t\t});\n  \t * });\n  \n  \t * console.log(Array.from(bcs.ser('Box<string>', '12345').toBytes()) == [5,1,2,3,4,5]);\n  \t *\n  \t * @param name\n  \t * @param createType a Callback to create the BcsType with any passed in generics\n  \t */\n  registerBcsType(typeName, createType) {\n    this.registerType(\n      typeName,\n      (writer, data, typeParams) => {\n        const generics = typeParams.map(\n          (param) => new BcsType({\n            name: String(param),\n            write: (data2, writer2) => {\n              const { name, params } = this.parseTypeName(param);\n              const typeInterface = this.getTypeInterface(name);\n              const typeMap = params.reduce((acc, value, index) => {\n                return Object.assign(acc, { [value]: typeParams[index] });\n              }, {});\n              return typeInterface._encodeRaw.call(this, writer2, data2, params, typeMap);\n            },\n            read: () => {\n              throw new Error(\"Not implemented\");\n            }\n          })\n        );\n        createType(...generics).write(data, writer);\n        return writer;\n      },\n      (reader, typeParams) => {\n        const generics = typeParams.map(\n          (param) => new BcsType({\n            name: String(param),\n            write: (_data, _writer) => {\n              throw new Error(\"Not implemented\");\n            },\n            read: (reader2) => {\n              const { name, params } = this.parseTypeName(param);\n              const typeInterface = this.getTypeInterface(name);\n              const typeMap = params.reduce((acc, value, index) => {\n                return Object.assign(acc, { [value]: typeParams[index] });\n              }, {});\n              return typeInterface._decodeRaw.call(this, reader2, params, typeMap);\n            }\n          })\n        );\n        return createType(...generics).read(reader);\n      }\n    );\n    return this;\n  }\n  /**\n   * Register an address type which is a sequence of U8s of specified length.\n   * @example\n   * bcs.registerAddressType('address', BENFEN_ADDRESS_LENGTH);\n   * let addr = bcs.de('address', 'c3aca510c785c7094ac99aeaa1e69d493122444df50bb8a99dfa790c654a79af');\n   *\n   * @param name Name of the address type.\n   * @param length Byte length of the address.\n   * @param encoding Encoding to use for the address type\n   * @returns\n   */\n  registerAddressType(name, length, encoding = \"hex\") {\n    switch (encoding) {\n      case \"base64\":\n        return this.registerType(\n          name,\n          function encodeAddress(writer, data) {\n            return fromB64(data).reduce((writer2, el) => writer2.write8(el), writer);\n          },\n          function decodeAddress(reader) {\n            return toB64(reader.readBytes(length));\n          }\n        );\n      case \"hex\":\n        return this.registerType(\n          name,\n          function encodeAddress(writer, data) {\n            return fromHEX(data).reduce((writer2, el) => writer2.write8(el), writer);\n          },\n          function decodeAddress(reader) {\n            const hex = toHEX(reader.readBytes(length)).padStart(2 * length, \"0\");\n            const hash = toHEX(sha256(new TextEncoder().encode(hex)));\n            return `BFC${hex}${hash.slice(0, 4)}`;\n          }\n        );\n      default:\n        throw new Error(\"Unsupported encoding! Use either hex or base64\");\n    }\n  }\n  /**\n   * Register custom vector type inside the bcs.\n   *\n   * @example\n   * bcs.registerVectorType('vector<T>'); // generic registration\n   * let array = bcs.de('vector<u8>', '06010203040506', 'hex'); // [1,2,3,4,5,6];\n   * let again = bcs.ser('vector<u8>', [1,2,3,4,5,6]).toString('hex');\n   *\n   * @param name Name of the type to register\n   * @param elementType Optional name of the inner type of the vector\n   * @return Returns self for chaining.\n   */\n  registerVectorType(typeName) {\n    let { name, params } = this.parseTypeName(typeName);\n    if (params.length > 1) {\n      throw new Error(\"Vector can have only one type parameter; got \" + name);\n    }\n    return this.registerType(\n      typeName,\n      function encodeVector(writer, data, typeParams, typeMap) {\n        return writer.writeVec(data, (writer2, el) => {\n          let elementType = typeParams[0];\n          if (!elementType) {\n            throw new Error(`Incorrect number of type parameters passed a to vector '${typeName}'`);\n          }\n          let { name: name2, params: params2 } = this.parseTypeName(elementType);\n          if (this.hasType(name2)) {\n            return this.getTypeInterface(name2)._encodeRaw.call(this, writer2, el, params2, typeMap);\n          }\n          if (!(name2 in typeMap)) {\n            throw new Error(\n              `Unable to find a matching type definition for ${name2} in vector; make sure you passed a generic`\n            );\n          }\n          let { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name2]);\n          return this.getTypeInterface(innerName)._encodeRaw.call(\n            this,\n            writer2,\n            el,\n            innerParams,\n            typeMap\n          );\n        });\n      },\n      function decodeVector(reader, typeParams, typeMap) {\n        return reader.readVec((reader2) => {\n          let elementType = typeParams[0];\n          if (!elementType) {\n            throw new Error(`Incorrect number of type parameters passed to a vector '${typeName}'`);\n          }\n          let { name: name2, params: params2 } = this.parseTypeName(elementType);\n          if (this.hasType(name2)) {\n            return this.getTypeInterface(name2)._decodeRaw.call(this, reader2, params2, typeMap);\n          }\n          if (!(name2 in typeMap)) {\n            throw new Error(\n              `Unable to find a matching type definition for ${name2} in vector; make sure you passed a generic`\n            );\n          }\n          let { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name2]);\n          return this.getTypeInterface(innerName)._decodeRaw.call(\n            this,\n            reader2,\n            innerParams,\n            typeMap\n          );\n        });\n      }\n    );\n  }\n  /**\n   * Safe method to register a custom Move struct. The first argument is a name of the\n   * struct which is only used on the FrontEnd and has no affect on serialization results,\n   * and the second is a struct description passed as an Object.\n   *\n   * The description object MUST have the same order on all of the platforms (ie in Move\n   * or in Rust).\n   *\n   * @example\n   * // Move / Rust struct\n   * // struct Coin {\n   * //   value: u64,\n   * //   owner: vector<u8>, // name // Vec<u8> in Rust\n   * //   is_locked: bool,\n   * // }\n   *\n   * bcs.registerStructType('Coin', {\n   *   value: bcs.U64,\n   *   owner: bcs.STRING,\n   *   is_locked: bcs.BOOL\n   * });\n   *\n   * // Created in Rust with diem/bcs\n   * // let rust_bcs_str = '80d1b105600000000e4269672057616c6c65742047757900';\n   * let rust_bcs_str = [ // using an Array here as BCS works with Uint8Array\n   *  128, 209, 177,   5,  96,  0,  0,\n   *    0,  14,  66, 105, 103, 32, 87,\n   *   97, 108, 108, 101, 116, 32, 71,\n   *  117, 121,   0\n   * ];\n   *\n   * // Let's encode the value as well\n   * let test_set = bcs.ser('Coin', {\n   *   owner: 'Big Wallet Guy',\n   *   value: '412412400000',\n   *   is_locked: false,\n   * });\n   *\n   * console.assert(Array.from(test_set.toBytes()) === rust_bcs_str, 'Whoopsie, result mismatch');\n   *\n   * @param name Name of the type to register.\n   * @param fields Fields of the struct. Must be in the correct order.\n   * @return Returns BCS for chaining.\n   */\n  registerStructType(typeName, fields) {\n    for (let key in fields) {\n      let internalName = this.tempKey();\n      let value = fields[key];\n      if (!Array.isArray(value) && typeof value !== \"string\") {\n        fields[key] = internalName;\n        this.registerStructType(internalName, value);\n      }\n    }\n    let struct = Object.freeze(fields);\n    let canonicalOrder = Object.keys(struct);\n    let { name: structName, params: generics } = this.parseTypeName(typeName);\n    return this.registerType(\n      typeName,\n      function encodeStruct(writer, data, typeParams, typeMap) {\n        if (!data || data.constructor !== Object) {\n          throw new Error(`Expected ${structName} to be an Object, got: ${data}`);\n        }\n        if (typeParams.length !== generics.length) {\n          throw new Error(\n            `Incorrect number of generic parameters passed; expected: ${generics.length}, got: ${typeParams.length}`\n          );\n        }\n        for (let key of canonicalOrder) {\n          if (!(key in data)) {\n            throw new Error(`Struct ${structName} requires field ${key}:${struct[key]}`);\n          }\n          const { name: fieldType, params: fieldParams } = this.parseTypeName(\n            struct[key]\n          );\n          if (!generics.includes(fieldType)) {\n            this.getTypeInterface(fieldType)._encodeRaw.call(\n              this,\n              writer,\n              data[key],\n              fieldParams,\n              typeMap\n            );\n          } else {\n            const paramIdx = generics.indexOf(fieldType);\n            let { name, params } = this.parseTypeName(typeParams[paramIdx]);\n            if (this.hasType(name)) {\n              this.getTypeInterface(name)._encodeRaw.call(\n                this,\n                writer,\n                data[key],\n                params,\n                typeMap\n              );\n              continue;\n            }\n            if (!(name in typeMap)) {\n              throw new Error(\n                `Unable to find a matching type definition for ${name} in ${structName}; make sure you passed a generic`\n              );\n            }\n            let { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name]);\n            this.getTypeInterface(innerName)._encodeRaw.call(\n              this,\n              writer,\n              data[key],\n              innerParams,\n              typeMap\n            );\n          }\n        }\n        return writer;\n      },\n      function decodeStruct(reader, typeParams, typeMap) {\n        if (typeParams.length !== generics.length) {\n          throw new Error(\n            `Incorrect number of generic parameters passed; expected: ${generics.length}, got: ${typeParams.length}`\n          );\n        }\n        let result = {};\n        for (let key of canonicalOrder) {\n          const { name: fieldName, params: fieldParams } = this.parseTypeName(\n            struct[key]\n          );\n          if (!generics.includes(fieldName)) {\n            result[key] = this.getTypeInterface(fieldName)._decodeRaw.call(\n              this,\n              reader,\n              fieldParams,\n              typeMap\n            );\n          } else {\n            const paramIdx = generics.indexOf(fieldName);\n            let { name, params } = this.parseTypeName(typeParams[paramIdx]);\n            if (this.hasType(name)) {\n              result[key] = this.getTypeInterface(name)._decodeRaw.call(\n                this,\n                reader,\n                params,\n                typeMap\n              );\n              continue;\n            }\n            if (!(name in typeMap)) {\n              throw new Error(\n                `Unable to find a matching type definition for ${name} in ${structName}; make sure you passed a generic`\n              );\n            }\n            let { name: innerName, params: innerParams } = this.parseTypeName(typeMap[name]);\n            result[key] = this.getTypeInterface(innerName)._decodeRaw.call(\n              this,\n              reader,\n              innerParams,\n              typeMap\n            );\n          }\n        }\n        return result;\n      }\n    );\n  }\n  /**\n   * Safe method to register custom enum type where each invariant holds the value of another type.\n   * @example\n   * bcs.registerStructType('Coin', { value: 'u64' });\n   * bcs.registerEnumType('MyEnum', {\n   *  single: 'Coin',\n   *  multi: 'vector<Coin>',\n   *  empty: null\n   * });\n   *\n   * console.log(\n   *  bcs.de('MyEnum', 'AICWmAAAAAAA', 'base64'), // { single: { value: 10000000 } }\n   *  bcs.de('MyEnum', 'AQIBAAAAAAAAAAIAAAAAAAAA', 'base64')  // { multi: [ { value: 1 }, { value: 2 } ] }\n   * )\n   *\n   * // and serialization\n   * bcs.ser('MyEnum', { single: { value: 10000000 } }).toBytes();\n   * bcs.ser('MyEnum', { multi: [ { value: 1 }, { value: 2 } ] });\n   *\n   * @param name\n   * @param variants\n   */\n  registerEnumType(typeName, variants) {\n    for (let key in variants) {\n      let internalName = this.tempKey();\n      let value = variants[key];\n      if (value !== null && !Array.isArray(value) && typeof value !== \"string\") {\n        variants[key] = internalName;\n        this.registerStructType(internalName, value);\n      }\n    }\n    let struct = Object.freeze(variants);\n    let canonicalOrder = Object.keys(struct);\n    let { name, params: canonicalTypeParams } = this.parseTypeName(typeName);\n    return this.registerType(\n      typeName,\n      function encodeEnum(writer, data, typeParams, typeMap) {\n        if (!data) {\n          throw new Error(`Unable to write enum \"${name}\", missing data.\nReceived: \"${data}\"`);\n        }\n        if (typeof data !== \"object\") {\n          throw new Error(\n            `Incorrect data passed into enum \"${name}\", expected object with properties: \"${canonicalOrder.join(\n              \" | \"\n            )}\".\nReceived: \"${JSON.stringify(data)}\"`\n          );\n        }\n        let key = Object.keys(data)[0];\n        if (key === void 0) {\n          throw new Error(`Empty object passed as invariant of the enum \"${name}\"`);\n        }\n        let orderByte = canonicalOrder.indexOf(key);\n        if (orderByte === -1) {\n          throw new Error(\n            `Unknown invariant of the enum \"${name}\", allowed values: \"${canonicalOrder.join(\n              \" | \"\n            )}\"; received \"${key}\"`\n          );\n        }\n        let invariant = canonicalOrder[orderByte];\n        let invariantType = struct[invariant];\n        writer.write8(orderByte);\n        if (invariantType === null) {\n          return writer;\n        }\n        let paramIndex = canonicalTypeParams.indexOf(invariantType);\n        let typeOrParam = paramIndex === -1 ? invariantType : typeParams[paramIndex];\n        {\n          let { name: name2, params } = this.parseTypeName(typeOrParam);\n          return this.getTypeInterface(name2)._encodeRaw.call(\n            this,\n            writer,\n            data[key],\n            params,\n            typeMap\n          );\n        }\n      },\n      function decodeEnum(reader, typeParams, typeMap) {\n        let orderByte = reader.readULEB();\n        let invariant = canonicalOrder[orderByte];\n        let invariantType = struct[invariant];\n        if (orderByte === -1) {\n          throw new Error(\n            `Decoding type mismatch, expected enum \"${name}\" invariant index, received \"${orderByte}\"`\n          );\n        }\n        if (invariantType === null) {\n          return { [invariant]: true };\n        }\n        let paramIndex = canonicalTypeParams.indexOf(invariantType);\n        let typeOrParam = paramIndex === -1 ? invariantType : typeParams[paramIndex];\n        {\n          let { name: name2, params } = this.parseTypeName(typeOrParam);\n          return {\n            [invariant]: this.getTypeInterface(name2)._decodeRaw.call(this, reader, params, typeMap)\n          };\n        }\n      }\n    );\n  }\n  /**\n   * Get a set of encoders/decoders for specific type.\n   * Mainly used to define custom type de/serialization logic.\n   *\n   * @param type\n   * @returns {TypeInterface}\n   */\n  getTypeInterface(type) {\n    let typeInterface = this.types.get(type);\n    if (typeof typeInterface === \"string\") {\n      let chain = [];\n      while (typeof typeInterface === \"string\") {\n        if (chain.includes(typeInterface)) {\n          throw new Error(`Recursive definition found: ${chain.join(\" -> \")} -> ${typeInterface}`);\n        }\n        chain.push(typeInterface);\n        typeInterface = this.types.get(typeInterface);\n      }\n    }\n    if (typeInterface === void 0) {\n      throw new Error(`Type ${type} is not registered`);\n    }\n    return typeInterface;\n  }\n  /**\n   * Parse a type name and get the type's generics.\n   * @example\n   * let { typeName, typeParams } = parseTypeName('Option<Coin<BFC>>');\n   * // typeName: Option\n   * // typeParams: [ 'Coin<BFC>' ]\n   *\n   * @param name Name of the type to process\n   * @returns Object with typeName and typeParams listed as Array\n   */\n  parseTypeName(name) {\n    if (Array.isArray(name)) {\n      let [typeName2, ...params2] = name;\n      return { name: typeName2, params: params2 };\n    }\n    if (typeof name !== \"string\") {\n      throw new Error(`Illegal type passed as a name of the type: ${name}`);\n    }\n    let [left, right] = this.schema.genericSeparators || [\"<\", \">\"];\n    let l_bound = name.indexOf(left);\n    let r_bound = Array.from(name).reverse().indexOf(right);\n    if (l_bound === -1 && r_bound === -1) {\n      return { name, params: [] };\n    }\n    if (l_bound === -1 || r_bound === -1) {\n      throw new Error(`Unclosed generic in name '${name}'`);\n    }\n    let typeName = name.slice(0, l_bound);\n    let params = splitGenericParameters(\n      name.slice(l_bound + 1, name.length - r_bound - 1),\n      this.schema.genericSeparators\n    );\n    return { name: typeName, params };\n  }\n};\nlet BCS = _BCS;\n// Predefined types constants\nBCS.U8 = \"u8\";\nBCS.U16 = \"u16\";\nBCS.U32 = \"u32\";\nBCS.U64 = \"u64\";\nBCS.U128 = \"u128\";\nBCS.U256 = \"u256\";\nBCS.BOOL = \"bool\";\nBCS.VECTOR = \"vector\";\nBCS.ADDRESS = \"address\";\nBCS.STRING = \"string\";\nBCS.HEX = \"hex-string\";\nBCS.BASE58 = \"base58-string\";\nBCS.BASE64 = \"base64-string\";\nfunction registerPrimitives(bcs) {\n  bcs.registerType(\n    BCS.U8,\n    function(writer, data) {\n      return writer.write8(data);\n    },\n    function(reader) {\n      return reader.read8();\n    },\n    (u8) => u8 < 256\n  );\n  bcs.registerType(\n    BCS.U16,\n    function(writer, data) {\n      return writer.write16(data);\n    },\n    function(reader) {\n      return reader.read16();\n    },\n    (u16) => u16 < 65536\n  );\n  bcs.registerType(\n    BCS.U32,\n    function(writer, data) {\n      return writer.write32(data);\n    },\n    function(reader) {\n      return reader.read32();\n    },\n    (u32) => u32 <= 4294967296n\n  );\n  bcs.registerType(\n    BCS.U64,\n    function(writer, data) {\n      return writer.write64(data);\n    },\n    function(reader) {\n      return reader.read64();\n    }\n  );\n  bcs.registerType(\n    BCS.U128,\n    function(writer, data) {\n      return writer.write128(data);\n    },\n    function(reader) {\n      return reader.read128();\n    }\n  );\n  bcs.registerType(\n    BCS.U256,\n    function(writer, data) {\n      return writer.write256(data);\n    },\n    function(reader) {\n      return reader.read256();\n    }\n  );\n  bcs.registerType(\n    BCS.BOOL,\n    function(writer, data) {\n      return writer.write8(data);\n    },\n    function(reader) {\n      return reader.read8().toString(10) === \"1\";\n    }\n  );\n  bcs.registerType(\n    BCS.STRING,\n    function(writer, data) {\n      return writer.writeVec(Array.from(data), (writer2, el) => writer2.write8(el.charCodeAt(0)));\n    },\n    function(reader) {\n      return reader.readVec((reader2) => reader2.read8()).map((el) => String.fromCharCode(Number(el))).join(\"\");\n    },\n    (_str) => true\n  );\n  bcs.registerType(\n    BCS.HEX,\n    function(writer, data) {\n      return writer.writeVec(Array.from(fromHEX(data)), (writer2, el) => writer2.write8(el));\n    },\n    function(reader) {\n      let bytes = reader.readVec((reader2) => reader2.read8());\n      return toHEX(new Uint8Array(bytes));\n    }\n  );\n  bcs.registerType(\n    BCS.BASE58,\n    function(writer, data) {\n      return writer.writeVec(Array.from(fromB58(data)), (writer2, el) => writer2.write8(el));\n    },\n    function(reader) {\n      let bytes = reader.readVec((reader2) => reader2.read8());\n      return toB58(new Uint8Array(bytes));\n    }\n  );\n  bcs.registerType(\n    BCS.BASE64,\n    function(writer, data) {\n      return writer.writeVec(Array.from(fromB64(data)), (writer2, el) => writer2.write8(el));\n    },\n    function(reader) {\n      let bytes = reader.readVec((reader2) => reader2.read8());\n      return toB64(new Uint8Array(bytes));\n    }\n  );\n}\nfunction getRustConfig() {\n  return {\n    genericSeparators: [\"<\", \">\"],\n    vectorType: \"Vec\",\n    addressLength: BENFEN_ADDRESS_LENGTH,\n    addressEncoding: \"hex\"\n  };\n}\nfunction getBenfenMoveConfig() {\n  return {\n    genericSeparators: [\"<\", \">\"],\n    vectorType: \"vector\",\n    addressLength: BENFEN_ADDRESS_LENGTH,\n    addressEncoding: \"hex\"\n  };\n}\nexport {\n  BCS,\n  getBenfenMoveConfig,\n  getRustConfig,\n  registerPrimitives\n};\n//# sourceMappingURL=legacy-registry.js.map\n","import {\n  BcsType,\n  bigUIntBcsType,\n  dynamicSizeBcsType,\n  fixedSizeBcsType,\n  lazyBcsType,\n  stringLikeBcsType,\n  uIntBcsType\n} from \"./bcs-type.js\";\nimport { ulebEncode } from \"./uleb.js\";\nconst bcs = {\n  /**\n   * Creates a BcsType that can be used to read and write an 8-bit unsigned integer.\n   * @example\n   * bcs.u8().serialize(255).toBytes() // Uint8Array [ 255 ]\n   */\n  u8(options) {\n    return uIntBcsType({\n      name: \"u8\",\n      readMethod: \"read8\",\n      writeMethod: \"write8\",\n      size: 1,\n      maxValue: 2 ** 8 - 1,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 16-bit unsigned integer.\n   * @example\n   * bcs.u16().serialize(65535).toBytes() // Uint8Array [ 255, 255 ]\n   */\n  u16(options) {\n    return uIntBcsType({\n      name: \"u16\",\n      readMethod: \"read16\",\n      writeMethod: \"write16\",\n      size: 2,\n      maxValue: 2 ** 16 - 1,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 32-bit unsigned integer.\n   * @example\n   * bcs.u32().serialize(4294967295).toBytes() // Uint8Array [ 255, 255, 255, 255 ]\n   */\n  u32(options) {\n    return uIntBcsType({\n      name: \"u32\",\n      readMethod: \"read32\",\n      writeMethod: \"write32\",\n      size: 4,\n      maxValue: 2 ** 32 - 1,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 64-bit unsigned integer.\n   * @example\n   * bcs.u64().serialize(1).toBytes() // Uint8Array [ 1, 0, 0, 0, 0, 0, 0, 0 ]\n   */\n  u64(options) {\n    return bigUIntBcsType({\n      name: \"u64\",\n      readMethod: \"read64\",\n      writeMethod: \"write64\",\n      size: 8,\n      maxValue: 2n ** 64n - 1n,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 128-bit unsigned integer.\n   * @example\n   * bcs.u128().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]\n   */\n  u128(options) {\n    return bigUIntBcsType({\n      name: \"u128\",\n      readMethod: \"read128\",\n      writeMethod: \"write128\",\n      size: 16,\n      maxValue: 2n ** 128n - 1n,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 256-bit unsigned integer.\n   * @example\n   * bcs.u256().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]\n   */\n  u256(options) {\n    return bigUIntBcsType({\n      name: \"u256\",\n      readMethod: \"read256\",\n      writeMethod: \"write256\",\n      size: 32,\n      maxValue: 2n ** 256n - 1n,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write boolean values.\n   * @example\n   * bcs.bool().serialize(true).toBytes() // Uint8Array [ 1 ]\n   */\n  bool(options) {\n    return fixedSizeBcsType({\n      name: \"bool\",\n      size: 1,\n      read: (reader) => reader.read8() === 1,\n      write: (value, writer) => writer.write8(value ? 1 : 0),\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"boolean\") {\n          throw new TypeError(`Expected boolean, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write unsigned LEB encoded integers\n   * @example\n   *\n   */\n  uleb128(options) {\n    return dynamicSizeBcsType({\n      name: \"uleb128\",\n      read: (reader) => reader.readULEB(),\n      serialize: (value) => {\n        return Uint8Array.from(ulebEncode(value));\n      },\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType representing a fixed length byte array\n   * @param size The number of bytes this types represents\n   * @example\n   * bcs.bytes(3).serialize(new Uint8Array([1, 2, 3])).toBytes() // Uint8Array [1, 2, 3]\n   */\n  bytes(size, options) {\n    return fixedSizeBcsType({\n      name: `bytes[${size}]`,\n      size,\n      read: (reader) => reader.readBytes(size),\n      write: (value, writer) => {\n        for (let i = 0; i < size; i++) {\n          writer.write8(value[i] ?? 0);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== size) {\n          throw new TypeError(`Expected array of length ${size}, found ${value.length}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType that can ser/de string values.  Strings will be UTF-8 encoded\n   * @example\n   * bcs.string().serialize('a').toBytes() // Uint8Array [ 1, 97 ]\n   */\n  string(options) {\n    return stringLikeBcsType({\n      name: \"string\",\n      toBytes: (value) => new TextEncoder().encode(value),\n      fromBytes: (bytes) => new TextDecoder().decode(bytes),\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType that represents a fixed length array of a given type\n   * @param size The number of elements in the array\n   * @param type The BcsType of each element in the array\n   * @example\n   * bcs.fixedArray(3, bcs.u8()).serialize([1, 2, 3]).toBytes() // Uint8Array [ 1, 2, 3 ]\n   */\n  fixedArray(size, type, options) {\n    return new BcsType({\n      name: `${type.name}[${size}]`,\n      read: (reader) => {\n        const result = new Array(size);\n        for (let i = 0; i < size; i++) {\n          result[i] = type.read(reader);\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (const item of value) {\n          type.write(item, writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== size) {\n          throw new TypeError(`Expected array of length ${size}, found ${value.length}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing an optional value\n   * @param type The BcsType of the optional value\n   * @example\n   * bcs.option(bcs.u8()).serialize(null).toBytes() // Uint8Array [ 0 ]\n   * bcs.option(bcs.u8()).serialize(1).toBytes() // Uint8Array [ 1, 1 ]\n   */\n  option(type) {\n    return bcs.enum(`Option<${type.name}>`, {\n      None: null,\n      Some: type\n    }).transform({\n      input: (value) => {\n        if (value == null) {\n          return { None: true };\n        }\n        return { Some: value };\n      },\n      output: (value) => {\n        if (\"Some\" in value) {\n          return value.Some;\n        }\n        return null;\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a variable length vector of a given type\n   * @param type The BcsType of each element in the vector\n   *\n   * @example\n   * bcs.vector(bcs.u8()).toBytes([1, 2, 3]) // Uint8Array [ 3, 1, 2, 3 ]\n   */\n  vector(type, options) {\n    return new BcsType({\n      name: `vector<${type.name}>`,\n      read: (reader) => {\n        const length = reader.readULEB();\n        const result = new Array(length);\n        for (let i = 0; i < length; i++) {\n          result[i] = type.read(reader);\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        writer.writeULEB(value.length);\n        for (const item of value) {\n          type.write(item, writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a tuple of a given set of types\n   * @param types The BcsTypes for each element in the tuple\n   *\n   * @example\n   * const tuple = bcs.tuple([bcs.u8(), bcs.string(), bcs.bool()])\n   * tuple.serialize([1, 'a', true]).toBytes() // Uint8Array [ 1, 1, 97, 1 ]\n   */\n  tuple(types, options) {\n    return new BcsType({\n      name: `(${types.map((t) => t.name).join(\", \")})`,\n      serializedSize: (values) => {\n        let total = 0;\n        for (let i = 0; i < types.length; i++) {\n          const size = types[i].serializedSize(values[i]);\n          if (size == null) {\n            return null;\n          }\n          total += size;\n        }\n        return total;\n      },\n      read: (reader) => {\n        const result = [];\n        for (const type of types) {\n          result.push(type.read(reader));\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (let i = 0; i < types.length; i++) {\n          types[i].write(value[i], writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!Array.isArray(value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== types.length) {\n          throw new TypeError(`Expected array of length ${types.length}, found ${value.length}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a struct of a given set of fields\n   * @param name The name of the struct\n   * @param fields The fields of the struct. The order of the fields affects how data is serialized and deserialized\n   *\n   * @example\n   * const struct = bcs.struct('MyStruct', {\n   *  a: bcs.u8(),\n   *  b: bcs.string(),\n   * })\n   * struct.serialize({ a: 1, b: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]\n   */\n  struct(name, fields, options) {\n    const canonicalOrder = Object.entries(fields);\n    return new BcsType({\n      name,\n      serializedSize: (values) => {\n        let total = 0;\n        for (const [field, type] of canonicalOrder) {\n          const size = type.serializedSize(values[field]);\n          if (size == null) {\n            return null;\n          }\n          total += size;\n        }\n        return total;\n      },\n      read: (reader) => {\n        const result = {};\n        for (const [field, type] of canonicalOrder) {\n          result[field] = type.read(reader);\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (const [field, type] of canonicalOrder) {\n          type.write(value[field], writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"object\" || value == null) {\n          throw new TypeError(`Expected object, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing an enum of a given set of options\n   * @param name The name of the enum\n   * @param values The values of the enum. The order of the values affects how data is serialized and deserialized.\n   * null can be used to represent a variant with no data.\n   *\n   * @example\n   * const enum = bcs.enum('MyEnum', {\n   *   A: bcs.u8(),\n   *   B: bcs.string(),\n   *   C: null,\n   * })\n   * enum.serialize({ A: 1 }).toBytes() // Uint8Array [ 0, 1 ]\n   * enum.serialize({ B: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]\n   * enum.serialize({ C: true }).toBytes() // Uint8Array [ 2 ]\n   */\n  enum(name, values, options) {\n    const canonicalOrder = Object.entries(values);\n    return new BcsType({\n      name,\n      read: (reader) => {\n        const index = reader.readULEB();\n        const [name2, type] = canonicalOrder[index];\n        return {\n          [name2]: type?.read(reader) ?? true\n        };\n      },\n      write: (value, writer) => {\n        const [name2, val] = Object.entries(value)[0];\n        for (let i = 0; i < canonicalOrder.length; i++) {\n          const [optionName, optionType] = canonicalOrder[i];\n          if (optionName === name2) {\n            writer.writeULEB(i);\n            optionType?.write(val, writer);\n            return;\n          }\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"object\" || value == null) {\n          throw new TypeError(`Expected object, found ${typeof value}`);\n        }\n        const keys = Object.keys(value);\n        if (keys.length !== 1) {\n          throw new TypeError(`Expected object with one key, found ${keys.length}`);\n        }\n        const [name2] = keys;\n        if (!Object.hasOwn(values, name2)) {\n          throw new TypeError(`Invalid enum variant ${name2}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a map of a given key and value type\n   * @param keyType The BcsType of the key\n   * @param valueType The BcsType of the value\n   * @example\n   * const map = bcs.map(bcs.u8(), bcs.string())\n   * map.serialize(new Map([[2, 'a']])).toBytes() // Uint8Array [ 1, 2, 1, 97 ]\n   */\n  map(keyType, valueType) {\n    return bcs.vector(bcs.tuple([keyType, valueType])).transform({\n      name: `Map<${keyType.name}, ${valueType.name}>`,\n      input: (value) => {\n        return [...value.entries()];\n      },\n      output: (value) => {\n        const result = /* @__PURE__ */ new Map();\n        for (const [key, val] of value) {\n          result.set(key, val);\n        }\n        return result;\n      }\n    });\n  },\n  /**\n   * @deprecated\n   *\n   * Generics should be implemented as generic typescript functions instead:\n   *\n   * ```ts\n   * function VecMap<K, V>, (K: BcsType<K>, V: BcsType<V>) {\n   *   return bcs.struct('VecMap<K, V>', {\n   *     keys: bcs.vector(K),\n   *     values: bcs.vector(V),\n   *   })\n   * }\n   * ```\n   */\n  generic(_names, cb) {\n    return (...types) => {\n      return cb(...types).transform({\n        name: `${cb.name}<${types.map((t) => t.name).join(\", \")}>`,\n        input: (value) => value,\n        output: (value) => value\n      });\n    };\n  },\n  /**\n   * Creates a BcsType that wraps another BcsType which is lazily evaluated. This is useful for creating recursive types.\n   * @param cb A callback that returns the BcsType\n   */\n  lazy(cb) {\n    return lazyBcsType(cb);\n  }\n};\nexport {\n  bcs\n};\n//# sourceMappingURL=bcs.js.map\n","import sha256 from \"fast-sha256\";\nimport { BENFEN_ADDRESS_LENGTH, normalizeHexAddress } from \"../utils/bf-types.js\";\nimport {\n  bcs,\n  BCS as BcsRegistry,\n  fromB58,\n  fromB64,\n  fromHEX,\n  getBenfenMoveConfig,\n  toB58,\n  toB64,\n  toHEX\n} from \"./src/index.js\";\nimport { TypeTagSerializer } from \"./type-tag-serializer.js\";\nimport { TypeTagSerializer as TypeTagSerializer2 } from \"./type-tag-serializer.js\";\nexport * from \"./src/index.js\";\nfunction isPureArg(arg) {\n  return arg.Pure !== void 0;\n}\nconst bcsRegistry = new BcsRegistry({\n  ...getBenfenMoveConfig(),\n  types: {\n    enums: {\n      \"Option<T>\": {\n        None: null,\n        Some: \"T\"\n      }\n    }\n  }\n});\nfunction unsafe_u64(options) {\n  return bcs.u64({\n    name: \"unsafe_u64\",\n    ...options\n  }).transform({\n    input: (val) => val,\n    output: (val) => Number(val)\n  });\n}\nfunction optionEnum(type) {\n  return bcs.enum(\"Option\", {\n    None: null,\n    Some: type\n  });\n}\nfunction enumKind(type) {\n  return type.transform({\n    input: (val) => ({\n      [val.kind]: val\n    }),\n    output: (val) => {\n      const key = Object.keys(val)[0];\n      return { kind: key, ...val[key] };\n    }\n  });\n}\nconst Address = bcs.bytes(BENFEN_ADDRESS_LENGTH).transform({\n  input: (val) => typeof val === \"string\" ? fromHEX(normalizeHexAddress(val)) : val,\n  output: (val) => {\n    const hex = toHEX(val).padStart(2 * BENFEN_ADDRESS_LENGTH, \"0\");\n    const hash = toHEX(sha256(new TextEncoder().encode(hex)));\n    return `BFC${hex}${hash.slice(0, 4)}`;\n  }\n});\nconst ObjectDigest = bcs.vector(bcs.u8()).transform({\n  name: \"ObjectDigest\",\n  input: (value) => fromB58(value),\n  output: (value) => toB58(new Uint8Array(value))\n});\nconst BenfenObjectRef = bcs.struct(\"BenfenObjectRef\", {\n  objectId: Address,\n  version: bcs.u64(),\n  digest: ObjectDigest\n});\nconst SharedObjectRef = bcs.struct(\"SharedObjectRef\", {\n  objectId: Address,\n  initialSharedVersion: bcs.u64(),\n  mutable: bcs.bool()\n});\nconst ObjectArg = bcs.enum(\"ObjectArg\", {\n  ImmOrOwned: BenfenObjectRef,\n  Shared: SharedObjectRef,\n  Receiving: BenfenObjectRef\n});\nconst CallArg = bcs.enum(\"CallArg\", {\n  Pure: bcs.vector(bcs.u8()),\n  Object: ObjectArg,\n  ObjVec: bcs.vector(ObjectArg)\n});\nconst TypeTag = bcs.enum(\"TypeTag\", {\n  bool: null,\n  u8: null,\n  u64: null,\n  u128: null,\n  address: null,\n  signer: null,\n  vector: bcs.lazy(() => TypeTag),\n  struct: bcs.lazy(() => StructTag),\n  u16: null,\n  u32: null,\n  u256: null\n});\nconst Argument = enumKind(\n  bcs.enum(\"Argument\", {\n    GasCoin: null,\n    Input: bcs.struct(\"Input\", { index: bcs.u16() }),\n    Result: bcs.struct(\"Result\", { index: bcs.u16() }),\n    NestedResult: bcs.struct(\"NestedResult\", { index: bcs.u16(), resultIndex: bcs.u16() })\n  })\n);\nconst ProgrammableMoveCall = bcs.struct(\"ProgrammableMoveCall\", {\n  package: Address,\n  module: bcs.string(),\n  function: bcs.string(),\n  type_arguments: bcs.vector(TypeTag),\n  arguments: bcs.vector(Argument)\n}).transform({\n  input: (data) => {\n    const [pkg, module, fun] = data.target.split(\"::\");\n    const type_arguments = data.typeArguments.map(\n      (tag) => TypeTagSerializer.parseFromStr(tag, true)\n    );\n    return {\n      package: normalizeHexAddress(pkg),\n      module,\n      function: fun,\n      type_arguments,\n      arguments: data.arguments\n    };\n  },\n  output: (data) => {\n    return {\n      target: [data.package, data.module, data.function].join(\n        \"::\"\n      ),\n      arguments: data.arguments,\n      typeArguments: data.type_arguments.map(TypeTagSerializer.tagToString)\n    };\n  }\n});\nconst Transaction = enumKind(\n  bcs.enum(\"Transaction\", {\n    /**\n     * A Move Call - any public Move function can be called via\n     * this transaction. The results can be used that instant to pass\n     * into the next transaction.\n     */\n    MoveCall: ProgrammableMoveCall,\n    /**\n     * Transfer vector of objects to a receiver.\n     */\n    TransferObjects: bcs.struct(\"TransferObjects\", {\n      objects: bcs.vector(Argument),\n      address: Argument\n    }),\n    /**\n     * Split `amount` from a `coin`.\n     */\n    SplitCoins: bcs.struct(\"SplitCoins\", { coin: Argument, amounts: bcs.vector(Argument) }),\n    /**\n     * Merge Vector of Coins (`sources`) into a `destination`.\n     */\n    MergeCoins: bcs.struct(\"MergeCoins\", { destination: Argument, sources: bcs.vector(Argument) }),\n    /**\n     * Publish a Move module.\n     */\n    Publish: bcs.struct(\"Publish\", {\n      modules: bcs.vector(bcs.vector(bcs.u8())),\n      dependencies: bcs.vector(Address)\n    }),\n    /**\n     * Build a vector of objects using the input arguments.\n     * It is impossible to construct a `vector<T: key>` otherwise,\n     * so this call serves a utility function.\n     */\n    MakeMoveVec: bcs.struct(\"MakeMoveVec\", {\n      type: optionEnum(TypeTag),\n      objects: bcs.vector(Argument)\n    }),\n    /**  */\n    Upgrade: bcs.struct(\"Upgrade\", {\n      modules: bcs.vector(bcs.vector(bcs.u8())),\n      dependencies: bcs.vector(Address),\n      packageId: Address,\n      ticket: Argument\n    })\n  })\n);\nconst ProgrammableTransaction = bcs.struct(\"ProgrammableTransaction\", {\n  inputs: bcs.vector(CallArg),\n  transactions: bcs.vector(Transaction)\n});\nconst TransactionKind = bcs.enum(\"TransactionKind\", {\n  ProgrammableTransaction,\n  ChangeEpoch: null,\n  Genesis: null,\n  ConsensusCommitPrologue: null\n});\nconst TransactionExpiration = bcs.enum(\"TransactionExpiration\", {\n  None: null,\n  Epoch: unsafe_u64()\n});\nconst StructTag = bcs.struct(\"StructTag\", {\n  address: Address,\n  module: bcs.string(),\n  name: bcs.string(),\n  typeParams: bcs.vector(TypeTag)\n});\nconst GasData = bcs.struct(\"GasData\", {\n  payment: bcs.vector(BenfenObjectRef),\n  owner: Address,\n  price: bcs.u64(),\n  budget: bcs.u64()\n});\nconst TransactionDataV1 = bcs.struct(\"TransactionDataV1\", {\n  kind: TransactionKind,\n  sender: Address,\n  gasData: GasData,\n  expiration: TransactionExpiration\n});\nconst TransactionData = bcs.enum(\"TransactionData\", {\n  V1: TransactionDataV1\n});\nconst IntentScope = bcs.enum(\"IntentScope\", {\n  TransactionData: null,\n  TransactionEffects: null,\n  CheckpointSummary: null,\n  PersonalMessage: null\n});\nconst IntentVersion = bcs.enum(\"IntentVersion\", {\n  V0: null\n});\nconst AppId = bcs.enum(\"AppId\", {\n  Benfen: null\n});\nconst Intent = bcs.struct(\"Intent\", {\n  scope: IntentScope,\n  version: IntentVersion,\n  appId: AppId\n});\nconst IntentMessage = bcs.generic(\n  [\"T\"],\n  (T) => bcs.struct(\"IntentMessage<T>\", {\n    intent: Intent,\n    value: T\n  })\n);\nconst CompressedSignature = bcs.enum(\"CompressedSignature\", {\n  ED25519: bcs.fixedArray(64, bcs.u8()),\n  Secp256k1: bcs.fixedArray(64, bcs.u8()),\n  Secp256r1: bcs.fixedArray(64, bcs.u8()),\n  ZkLogin: bcs.vector(bcs.u8())\n});\nconst PublicKey = bcs.enum(\"PublicKey\", {\n  ED25519: bcs.fixedArray(32, bcs.u8()),\n  Secp256k1: bcs.fixedArray(33, bcs.u8()),\n  Secp256r1: bcs.fixedArray(33, bcs.u8()),\n  ZkLogin: bcs.vector(bcs.u8())\n});\nconst MultiSigPkMap = bcs.struct(\"MultiSigPkMap\", {\n  pubKey: PublicKey,\n  weight: bcs.u8()\n});\nconst MultiSigPublicKey = bcs.struct(\"MultiSigPublicKey\", {\n  pk_map: bcs.vector(MultiSigPkMap),\n  threshold: bcs.u16()\n});\nconst MultiSig = bcs.struct(\"MultiSig\", {\n  sigs: bcs.vector(CompressedSignature),\n  bitmap: bcs.u16(),\n  multisig_pk: MultiSigPublicKey\n});\nconst base64String = bcs.vector(bcs.u8()).transform({\n  input: (val) => typeof val === \"string\" ? fromB64(val) : val,\n  output: (val) => toB64(new Uint8Array(val))\n});\nconst SenderSignedTransaction = bcs.struct(\"SenderSignedTransaction\", {\n  intentMessage: IntentMessage(TransactionData),\n  txSignatures: bcs.vector(base64String)\n});\nconst SenderSignedData = bcs.vector(SenderSignedTransaction, {\n  name: \"SenderSignedData\"\n});\nconst benfenBcs = {\n  ...bcs,\n  U8: bcs.u8(),\n  U16: bcs.u16(),\n  U32: bcs.u32(),\n  U64: bcs.u64(),\n  U128: bcs.u128(),\n  U256: bcs.u256(),\n  ULEB128: bcs.uleb128(),\n  Bool: bcs.bool(),\n  String: bcs.string(),\n  Address,\n  Argument,\n  CallArg,\n  CompressedSignature,\n  GasData,\n  MultiSig,\n  MultiSigPkMap,\n  MultiSigPublicKey,\n  ObjectArg,\n  ObjectDigest,\n  ProgrammableMoveCall,\n  ProgrammableTransaction,\n  PublicKey,\n  SenderSignedData,\n  SenderSignedTransaction,\n  SharedObjectRef,\n  StructTag,\n  BenfenObjectRef,\n  Transaction,\n  TransactionData,\n  TransactionDataV1,\n  TransactionExpiration,\n  TransactionKind,\n  TypeTag,\n  // preserve backwards compatibility with old bcs export\n  ser: bcsRegistry.ser.bind(bcsRegistry),\n  de: bcsRegistry.de.bind(bcsRegistry),\n  getTypeInterface: bcsRegistry.getTypeInterface.bind(bcsRegistry),\n  hasType: bcsRegistry.hasType.bind(bcsRegistry),\n  parseTypeName: bcsRegistry.parseTypeName.bind(bcsRegistry),\n  registerAddressType: bcsRegistry.registerAddressType.bind(bcsRegistry),\n  registerAlias: bcsRegistry.registerAlias.bind(bcsRegistry),\n  registerBcsType: bcsRegistry.registerBcsType.bind(bcsRegistry),\n  registerEnumType: bcsRegistry.registerEnumType.bind(bcsRegistry),\n  registerStructType: bcsRegistry.registerStructType.bind(bcsRegistry),\n  registerType: bcsRegistry.registerType.bind(bcsRegistry),\n  types: bcsRegistry.types\n};\nbcsRegistry.registerBcsType(\"utf8string\", () => bcs.string({ name: \"utf8string\" }));\nbcsRegistry.registerBcsType(\"unsafe_u64\", () => unsafe_u64());\nbcsRegistry.registerBcsType(\"enumKind\", (T) => enumKind(T));\n[\n  Address,\n  Argument,\n  CallArg,\n  CompressedSignature,\n  GasData,\n  MultiSig,\n  MultiSigPkMap,\n  MultiSigPublicKey,\n  ObjectArg,\n  ObjectDigest,\n  ProgrammableMoveCall,\n  ProgrammableTransaction,\n  PublicKey,\n  SenderSignedData,\n  SharedObjectRef,\n  StructTag,\n  BenfenObjectRef,\n  Transaction,\n  TransactionData,\n  TransactionDataV1,\n  TransactionExpiration,\n  TransactionKind,\n  TypeTag\n].forEach((type) => {\n  bcsRegistry.registerBcsType(type.name, () => type);\n});\nexport {\n  TypeTagSerializer2 as TypeTagSerializer,\n  benfenBcs as bcs,\n  bcsRegistry,\n  isPureArg\n};\n//# sourceMappingURL=index.js.map\n","import bs58 from \"bs58\";\nconst toB58 = (buffer) => bs58.encode(buffer);\nconst fromB58 = (str) => bs58.decode(str);\nexport {\n  fromB58,\n  toB58\n};\n//# sourceMappingURL=b58.js.map\n","function fromB64(base64String) {\n  return Uint8Array.from(atob(base64String), (char) => char.charCodeAt(0));\n}\nconst CHUNK_SIZE = 8192;\nfunction toB64(bytes) {\n  if (bytes.length < CHUNK_SIZE) {\n    return btoa(String.fromCharCode(...bytes));\n  }\n  let output = \"\";\n  for (var i = 0; i < bytes.length; i += CHUNK_SIZE) {\n    const chunk = bytes.slice(i, i + CHUNK_SIZE);\n    output += String.fromCharCode(...chunk);\n  }\n  return btoa(output);\n}\nexport {\n  fromB64,\n  toB64\n};\n//# sourceMappingURL=b64.js.map\n","var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _write, _serialize, _schema, _bytes;\nimport { toB58 } from \"./b58.js\";\nimport { toB64 } from \"./b64.js\";\nimport { toHEX } from \"./hex.js\";\nimport { BcsReader } from \"./reader.js\";\nimport { ulebEncode } from \"./uleb.js\";\nimport { BcsWriter } from \"./writer.js\";\nconst _BcsType = class {\n  constructor(options) {\n    __privateAdd(this, _write, void 0);\n    __privateAdd(this, _serialize, void 0);\n    this.name = options.name;\n    this.read = options.read;\n    this.serializedSize = options.serializedSize ?? (() => null);\n    __privateSet(this, _write, options.write);\n    __privateSet(this, _serialize, options.serialize ?? ((value, options2) => {\n      const writer = new BcsWriter({ size: this.serializedSize(value) ?? void 0, ...options2 });\n      __privateGet(this, _write).call(this, value, writer);\n      return writer.toBytes();\n    }));\n    this.validate = options.validate ?? (() => {\n    });\n  }\n  write(value, writer) {\n    this.validate(value);\n    __privateGet(this, _write).call(this, value, writer);\n  }\n  serialize(value, options) {\n    this.validate(value);\n    return new SerializedBcs(this, __privateGet(this, _serialize).call(this, value, options));\n  }\n  parse(bytes) {\n    const reader = new BcsReader(bytes);\n    return this.read(reader);\n  }\n  transform({\n    name,\n    input,\n    output\n  }) {\n    return new _BcsType({\n      name: name ?? this.name,\n      read: (reader) => output(this.read(reader)),\n      write: (value, writer) => __privateGet(this, _write).call(this, input(value), writer),\n      serializedSize: (value) => this.serializedSize(input(value)),\n      serialize: (value, options) => __privateGet(this, _serialize).call(this, input(value), options),\n      validate: (value) => this.validate(input(value))\n    });\n  }\n};\nlet BcsType = _BcsType;\n_write = new WeakMap();\n_serialize = new WeakMap();\nconst SERIALIZED_BCS_BRAND = Symbol.for(\"@benfen/serialized-bcs\");\nfunction isSerializedBcs(obj) {\n  return !!obj && typeof obj === \"object\" && obj[SERIALIZED_BCS_BRAND] === true;\n}\nclass SerializedBcs {\n  constructor(type, schema) {\n    __privateAdd(this, _schema, void 0);\n    __privateAdd(this, _bytes, void 0);\n    __privateSet(this, _schema, type);\n    __privateSet(this, _bytes, schema);\n  }\n  // Used to brand SerializedBcs so that they can be identified, even between multiple copies\n  // of the @benfen/bfc.js package are installed\n  get [SERIALIZED_BCS_BRAND]() {\n    return true;\n  }\n  toBytes() {\n    return __privateGet(this, _bytes);\n  }\n  toHex() {\n    return toHEX(__privateGet(this, _bytes));\n  }\n  toBase64() {\n    return toB64(__privateGet(this, _bytes));\n  }\n  toBase58() {\n    return toB58(__privateGet(this, _bytes));\n  }\n  parse() {\n    return __privateGet(this, _schema).parse(__privateGet(this, _bytes));\n  }\n}\n_schema = new WeakMap();\n_bytes = new WeakMap();\nfunction fixedSizeBcsType({\n  size,\n  ...options\n}) {\n  return new BcsType({\n    ...options,\n    serializedSize: () => size\n  });\n}\nfunction uIntBcsType({\n  readMethod,\n  writeMethod,\n  ...options\n}) {\n  return fixedSizeBcsType({\n    ...options,\n    read: (reader) => reader[readMethod](),\n    write: (value, writer) => writer[writeMethod](value),\n    validate: (value) => {\n      if (value < 0 || value > options.maxValue) {\n        throw new TypeError(\n          `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`\n        );\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction bigUIntBcsType({\n  readMethod,\n  writeMethod,\n  ...options\n}) {\n  return fixedSizeBcsType({\n    ...options,\n    read: (reader) => reader[readMethod](),\n    write: (value, writer) => writer[writeMethod](BigInt(value)),\n    validate: (val) => {\n      const value = BigInt(val);\n      if (value < 0 || value > options.maxValue) {\n        throw new TypeError(\n          `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`\n        );\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction dynamicSizeBcsType({\n  serialize,\n  ...options\n}) {\n  const type = new BcsType({\n    ...options,\n    serialize,\n    write: (value, writer) => {\n      for (const byte of type.serialize(value).toBytes()) {\n        writer.write8(byte);\n      }\n    }\n  });\n  return type;\n}\nfunction stringLikeBcsType({\n  toBytes,\n  fromBytes,\n  ...options\n}) {\n  return new BcsType({\n    ...options,\n    read: (reader) => {\n      const length = reader.readULEB();\n      const bytes = reader.readBytes(length);\n      return fromBytes(bytes);\n    },\n    write: (hex, writer) => {\n      const bytes = toBytes(hex);\n      writer.writeULEB(bytes.length);\n      for (let i = 0; i < bytes.length; i++) {\n        writer.write8(bytes[i]);\n      }\n    },\n    serialize: (value) => {\n      const bytes = toBytes(value);\n      const size = ulebEncode(bytes.length);\n      const result = new Uint8Array(size.length + bytes.length);\n      result.set(size, 0);\n      result.set(bytes, size.length);\n      return result;\n    },\n    validate: (value) => {\n      if (typeof value !== \"string\") {\n        throw new TypeError(`Invalid ${options.name} value: ${value}. Expected string`);\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction lazyBcsType(cb) {\n  let lazyType = null;\n  function getType() {\n    if (!lazyType) {\n      lazyType = cb();\n    }\n    return lazyType;\n  }\n  return new BcsType({\n    name: \"lazy\",\n    read: (data) => getType().read(data),\n    serializedSize: (value) => getType().serializedSize(value),\n    write: (value, writer) => getType().write(value, writer),\n    serialize: (value, options) => getType().serialize(value, options).toBytes()\n  });\n}\nexport {\n  BcsType,\n  SerializedBcs,\n  bigUIntBcsType,\n  dynamicSizeBcsType,\n  fixedSizeBcsType,\n  isSerializedBcs,\n  lazyBcsType,\n  stringLikeBcsType,\n  uIntBcsType\n};\n//# sourceMappingURL=bcs-type.js.map\n","function fromHEX(hexStr) {\n  const normalized = /^BFC/i.test(hexStr) ? hexStr.slice(3, -4) : hexStr.replace(/^0x/, \"\");\n  const padded = normalized.length % 2 === 0 ? normalized : `0${normalized}}`;\n  const intArr = padded.match(/.{2}/g)?.map((byte) => parseInt(byte, 16)) ?? [];\n  return Uint8Array.from(intArr);\n}\nfunction toHEX(bytes) {\n  return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n}\nexport {\n  fromHEX,\n  toHEX\n};\n//# sourceMappingURL=hex.js.map\n","import { ulebDecode } from \"./uleb.js\";\nclass BcsReader {\n  /**\n   * @param {Uint8Array} data Data to use as a buffer.\n   */\n  constructor(data) {\n    this.bytePosition = 0;\n    this.dataView = new DataView(data.buffer);\n  }\n  /**\n   * Shift current cursor position by `bytes`.\n   *\n   * @param {Number} bytes Number of bytes to\n   * @returns {this} Self for possible chaining.\n   */\n  shift(bytes) {\n    this.bytePosition += bytes;\n    return this;\n  }\n  /**\n   * Read U8 value from the buffer and shift cursor by 1.\n   * @returns\n   */\n  read8() {\n    let value = this.dataView.getUint8(this.bytePosition);\n    this.shift(1);\n    return value;\n  }\n  /**\n   * Read U16 value from the buffer and shift cursor by 2.\n   * @returns\n   */\n  read16() {\n    let value = this.dataView.getUint16(this.bytePosition, true);\n    this.shift(2);\n    return value;\n  }\n  /**\n   * Read U32 value from the buffer and shift cursor by 4.\n   * @returns\n   */\n  read32() {\n    let value = this.dataView.getUint32(this.bytePosition, true);\n    this.shift(4);\n    return value;\n  }\n  /**\n   * Read U64 value from the buffer and shift cursor by 8.\n   * @returns\n   */\n  read64() {\n    let value1 = this.read32();\n    let value2 = this.read32();\n    let result = value2.toString(16) + value1.toString(16).padStart(8, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read U128 value from the buffer and shift cursor by 16.\n   */\n  read128() {\n    let value1 = BigInt(this.read64());\n    let value2 = BigInt(this.read64());\n    let result = value2.toString(16) + value1.toString(16).padStart(16, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read U128 value from the buffer and shift cursor by 32.\n   * @returns\n   */\n  read256() {\n    let value1 = BigInt(this.read128());\n    let value2 = BigInt(this.read128());\n    let result = value2.toString(16) + value1.toString(16).padStart(32, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read `num` number of bytes from the buffer and shift cursor by `num`.\n   * @param num Number of bytes to read.\n   */\n  readBytes(num) {\n    let start = this.bytePosition + this.dataView.byteOffset;\n    let value = new Uint8Array(this.dataView.buffer, start, num);\n    this.shift(num);\n    return value;\n  }\n  /**\n   * Read ULEB value - an integer of varying size. Used for enum indexes and\n   * vector lengths.\n   * @returns {Number} The ULEB value.\n   */\n  readULEB() {\n    let start = this.bytePosition + this.dataView.byteOffset;\n    let buffer = new Uint8Array(this.dataView.buffer, start);\n    let { value, length } = ulebDecode(buffer);\n    this.shift(length);\n    return value;\n  }\n  /**\n   * Read a BCS vector: read a length and then apply function `cb` X times\n   * where X is the length of the vector, defined as ULEB in BCS bytes.\n   * @param cb Callback to process elements of vector.\n   * @returns {Array<Any>} Array of the resulting values, returned by callback.\n   */\n  readVec(cb) {\n    let length = this.readULEB();\n    let result = [];\n    for (let i = 0; i < length; i++) {\n      result.push(cb(this, i, length));\n    }\n    return result;\n  }\n}\nexport {\n  BcsReader\n};\n//# sourceMappingURL=reader.js.map\n","function ulebEncode(num) {\n  let arr = [];\n  let len = 0;\n  if (num === 0) {\n    return [0];\n  }\n  while (num > 0) {\n    arr[len] = num & 127;\n    if (num >>= 7) {\n      arr[len] |= 128;\n    }\n    len += 1;\n  }\n  return arr;\n}\nfunction ulebDecode(arr) {\n  let total = 0;\n  let shift = 0;\n  let len = 0;\n  while (true) {\n    let byte = arr[len];\n    len += 1;\n    total |= (byte & 127) << shift;\n    if ((byte & 128) === 0) {\n      break;\n    }\n    shift += 7;\n  }\n  return {\n    value: total,\n    length: len\n  };\n}\nexport {\n  ulebDecode,\n  ulebEncode\n};\n//# sourceMappingURL=uleb.js.map\n","import { fromB58, toB58 } from \"./b58.js\";\nimport { fromB64, toB64 } from \"./b64.js\";\nimport { fromHEX, toHEX } from \"./hex.js\";\nfunction encodeStr(data, encoding) {\n  switch (encoding) {\n    case \"base58\":\n      return toB58(data);\n    case \"base64\":\n      return toB64(data);\n    case \"hex\":\n      return toHEX(data);\n    default:\n      throw new Error(\"Unsupported encoding, supported values are: base64, hex\");\n  }\n}\nfunction decodeStr(data, encoding) {\n  switch (encoding) {\n    case \"base58\":\n      return fromB58(data);\n    case \"base64\":\n      return fromB64(data);\n    case \"hex\":\n      return fromHEX(data);\n    default:\n      throw new Error(\"Unsupported encoding, supported values are: base64, hex\");\n  }\n}\nfunction splitGenericParameters(str, genericSeparators = [\"<\", \">\"]) {\n  const [left, right] = genericSeparators;\n  const tok = [];\n  let word = \"\";\n  let nestedAngleBrackets = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === left) {\n      nestedAngleBrackets++;\n    }\n    if (char === right) {\n      nestedAngleBrackets--;\n    }\n    if (nestedAngleBrackets === 0 && char === \",\") {\n      tok.push(word.trim());\n      word = \"\";\n      continue;\n    }\n    word += char;\n  }\n  tok.push(word.trim());\n  return tok;\n}\nexport {\n  decodeStr,\n  encodeStr,\n  splitGenericParameters\n};\n//# sourceMappingURL=utils.js.map\n","import { ulebEncode } from \"./uleb.js\";\nimport { encodeStr } from \"./utils.js\";\nclass BcsWriter {\n  constructor({ size = 1024, maxSize, allocateSize = 1024 } = {}) {\n    this.bytePosition = 0;\n    this.size = size;\n    this.maxSize = maxSize || size;\n    this.allocateSize = allocateSize;\n    this.dataView = new DataView(new ArrayBuffer(size));\n  }\n  ensureSizeOrGrow(bytes) {\n    const requiredSize = this.bytePosition + bytes;\n    if (requiredSize > this.size) {\n      const nextSize = Math.min(this.maxSize, this.size + this.allocateSize);\n      if (requiredSize > nextSize) {\n        throw new Error(\n          `Attempting to serialize to BCS, but buffer does not have enough size. Allocated size: ${this.size}, Max size: ${this.maxSize}, Required size: ${requiredSize}`\n        );\n      }\n      this.size = nextSize;\n      const nextBuffer = new ArrayBuffer(this.size);\n      new Uint8Array(nextBuffer).set(new Uint8Array(this.dataView.buffer));\n      this.dataView = new DataView(nextBuffer);\n    }\n  }\n  /**\n   * Shift current cursor position by `bytes`.\n   *\n   * @param {Number} bytes Number of bytes to\n   * @returns {this} Self for possible chaining.\n   */\n  shift(bytes) {\n    this.bytePosition += bytes;\n    return this;\n  }\n  /**\n   * Write a U8 value into a buffer and shift cursor position by 1.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write8(value) {\n    this.ensureSizeOrGrow(1);\n    this.dataView.setUint8(this.bytePosition, Number(value));\n    return this.shift(1);\n  }\n  /**\n   * Write a U16 value into a buffer and shift cursor position by 2.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write16(value) {\n    this.ensureSizeOrGrow(2);\n    this.dataView.setUint16(this.bytePosition, Number(value), true);\n    return this.shift(2);\n  }\n  /**\n   * Write a U32 value into a buffer and shift cursor position by 4.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write32(value) {\n    this.ensureSizeOrGrow(4);\n    this.dataView.setUint32(this.bytePosition, Number(value), true);\n    return this.shift(4);\n  }\n  /**\n   * Write a U64 value into a buffer and shift cursor position by 8.\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write64(value) {\n    toLittleEndian(BigInt(value), 8).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a U128 value into a buffer and shift cursor position by 16.\n   *\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write128(value) {\n    toLittleEndian(BigInt(value), 16).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a U256 value into a buffer and shift cursor position by 16.\n   *\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write256(value) {\n    toLittleEndian(BigInt(value), 32).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a ULEB value into a buffer and shift cursor position by number of bytes\n   * written.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  writeULEB(value) {\n    ulebEncode(value).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a vector into a buffer by first writing the vector length and then calling\n   * a callback on each passed value.\n   *\n   * @param {Array<Any>} vector Array of elements to write.\n   * @param {WriteVecCb} cb Callback to call on each element of the vector.\n   * @returns {this}\n   */\n  writeVec(vector, cb) {\n    this.writeULEB(vector.length);\n    Array.from(vector).forEach((el, i) => cb(this, el, i, vector.length));\n    return this;\n  }\n  /**\n   * Adds support for iterations over the object.\n   * @returns {Uint8Array}\n   */\n  *[Symbol.iterator]() {\n    for (let i = 0; i < this.bytePosition; i++) {\n      yield this.dataView.getUint8(i);\n    }\n    return this.toBytes();\n  }\n  /**\n   * Get underlying buffer taking only value bytes (in case initial buffer size was bigger).\n   * @returns {Uint8Array} Resulting bcs.\n   */\n  toBytes() {\n    return new Uint8Array(this.dataView.buffer.slice(0, this.bytePosition));\n  }\n  /**\n   * Represent data as 'hex' or 'base64'\n   * @param encoding Encoding to use: 'base64' or 'hex'\n   */\n  toString(encoding) {\n    return encodeStr(this.toBytes(), encoding);\n  }\n}\nfunction toLittleEndian(bigint, size) {\n  let result = new Uint8Array(size);\n  let i = 0;\n  while (bigint > 0) {\n    result[i] = Number(bigint % BigInt(256));\n    bigint = bigint / BigInt(256);\n    i += 1;\n  }\n  return result;\n}\nexport {\n  BcsWriter\n};\n//# sourceMappingURL=writer.js.map\n","import { normalizeHexAddress } from \"../utils/bf-types.js\";\nimport { splitGenericParameters } from \"./src/index.js\";\nconst VECTOR_REGEX = /^vector<(.+)>$/;\nconst STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;\nclass TypeTagSerializer {\n  static parseFromStr(str, normalizeAddress = false) {\n    if (str === \"address\") {\n      return { address: null };\n    } else if (str === \"bool\") {\n      return { bool: null };\n    } else if (str === \"u8\") {\n      return { u8: null };\n    } else if (str === \"u16\") {\n      return { u16: null };\n    } else if (str === \"u32\") {\n      return { u32: null };\n    } else if (str === \"u64\") {\n      return { u64: null };\n    } else if (str === \"u128\") {\n      return { u128: null };\n    } else if (str === \"u256\") {\n      return { u256: null };\n    } else if (str === \"signer\") {\n      return { signer: null };\n    }\n    const vectorMatch = str.match(VECTOR_REGEX);\n    if (vectorMatch) {\n      return {\n        vector: TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress)\n      };\n    }\n    const structMatch = str.match(STRUCT_REGEX);\n    if (structMatch) {\n      const address = normalizeAddress ? normalizeHexAddress(structMatch[1]) : structMatch[1];\n      return {\n        struct: {\n          address,\n          module: structMatch[2],\n          name: structMatch[3],\n          typeParams: structMatch[5] === void 0 ? [] : TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress)\n        }\n      };\n    }\n    throw new Error(`Encountered unexpected token when parsing type args for ${str}`);\n  }\n  static parseStructTypeArgs(str, normalizeAddress = false) {\n    return splitGenericParameters(str).map(\n      (tok) => TypeTagSerializer.parseFromStr(tok, normalizeAddress)\n    );\n  }\n  static tagToString(tag) {\n    if (\"bool\" in tag) {\n      return \"bool\";\n    }\n    if (\"u8\" in tag) {\n      return \"u8\";\n    }\n    if (\"u16\" in tag) {\n      return \"u16\";\n    }\n    if (\"u32\" in tag) {\n      return \"u32\";\n    }\n    if (\"u64\" in tag) {\n      return \"u64\";\n    }\n    if (\"u128\" in tag) {\n      return \"u128\";\n    }\n    if (\"u256\" in tag) {\n      return \"u256\";\n    }\n    if (\"address\" in tag) {\n      return \"address\";\n    }\n    if (\"signer\" in tag) {\n      return \"signer\";\n    }\n    if (\"vector\" in tag) {\n      return `vector<${TypeTagSerializer.tagToString(tag.vector)}>`;\n    }\n    if (\"struct\" in tag) {\n      const struct = tag.struct;\n      const typeParams = struct.typeParams.map(TypeTagSerializer.tagToString).join(\", \");\n      return `${struct.address}::${struct.module}::${struct.name}${typeParams ? `<${typeParams}>` : \"\"}`;\n    }\n    throw new Error(\"Invalid TypeTag\");\n  }\n}\nexport {\n  TypeTagSerializer\n};\n//# sourceMappingURL=type-tag-serializer.js.map\n","function getFullnodeUrl(network) {\n  switch (network) {\n    case \"mainnet\":\n      return \"https://rpc-mainnet.benfen.org\";\n    case \"testnet\":\n      return \"https://testrpc.benfen.org\";\n    case \"devnet\":\n      return \"https://devrpc.benfen.org\";\n    case \"localnet\":\n      return \"http://127.0.0.1:9000\";\n    default:\n      throw new Error(`Unknown network: ${network}`);\n  }\n}\nexport {\n  getFullnodeUrl\n};\n//# sourceMappingURL=network.js.map\n","const BENFEN_NS_NAME_REGEX = /^(?:[a-z0-9][a-z0-9-]{0,62}(?:\\.[a-z0-9][a-z0-9-]{0,62})*)?@[a-z0-9][a-z0-9-]{0,62}$/i;\nconst BENFEN_NS_DOMAIN_REGEX = /^(?:[a-z0-9][a-z0-9-]{0,62}\\.)+benfen$/i;\nconst MAX_BENFEN_NS_NAME_LENGTH = 235;\nfunction isValidBenfenNSName(name) {\n  if (name.length > MAX_BENFEN_NS_NAME_LENGTH) {\n    return false;\n  }\n  if (name.includes(\"@\")) {\n    return BENFEN_NS_NAME_REGEX.test(name);\n  }\n  return BENFEN_NS_DOMAIN_REGEX.test(name);\n}\nfunction normalizeBenfenNSName(name, format = \"at\") {\n  const lowerCase = name.toLowerCase();\n  let parts;\n  if (lowerCase.includes(\"@\")) {\n    if (!BENFEN_NS_NAME_REGEX.test(lowerCase)) {\n      throw new Error(`Invalid BenfenNS name ${name}`);\n    }\n    const [labels, domain] = lowerCase.split(\"@\");\n    parts = [...labels ? labels.split(\".\") : [], domain];\n  } else {\n    if (!BENFEN_NS_DOMAIN_REGEX.test(lowerCase)) {\n      throw new Error(`Invalid BenfenNS name ${name}`);\n    }\n    parts = lowerCase.split(\".\").slice(0, -1);\n  }\n  if (format === \"dot\") {\n    return `${parts.join(\".\")}.benfen`;\n  }\n  return `${parts.slice(0, -1).join(\".\")}@${parts[parts.length - 1]}`;\n}\nexport {\n  isValidBenfenNSName,\n  normalizeBenfenNSName\n};\n//# sourceMappingURL=benfenns.js.map\n","const PACKAGE_VERSION = \"0.2.7\";\nconst TARGETED_RPC_VERSION = \"1.20.1\";\nexport {\n  PACKAGE_VERSION,\n  TARGETED_RPC_VERSION\n};\n//# sourceMappingURL=version.js.map\n","const CODE_TO_ERROR_TYPE = {\n  \"-32700\": \"ParseError\",\n  \"-32600\": \"InvalidRequest\",\n  \"-32601\": \"MethodNotFound\",\n  \"-32602\": \"InvalidParams\",\n  \"-32603\": \"InternalError\"\n};\nclass BenfenHTTPTransportError extends Error {\n}\nclass JsonRpcError extends BenfenHTTPTransportError {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n    this.type = CODE_TO_ERROR_TYPE[code] ?? \"ServerError\";\n  }\n}\nclass BenfenHTTPStatusError extends BenfenHTTPTransportError {\n  constructor(message, status, statusText) {\n    super(message);\n    this.status = status;\n    this.statusText = statusText;\n  }\n}\nexport {\n  BenfenHTTPStatusError,\n  BenfenHTTPTransportError,\n  JsonRpcError\n};\n//# sourceMappingURL=errors.js.map\n","var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateWrapper = (obj, member, setter, getter) => ({\n  set _(value) {\n    __privateSet(obj, member, value, setter);\n  },\n  get _() {\n    return __privateGet(obj, member, getter);\n  }\n});\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\nvar _requestId, _disconnects, _webSocket, _connectionPromise, _subscriptions, _pendingRequests, _setupWebSocket, setupWebSocket_fn, _reconnect, reconnect_fn;\nimport { JsonRpcError } from \"./errors.js\";\nfunction getWebsocketUrl(httpUrl) {\n  const url = new URL(httpUrl);\n  url.protocol = url.protocol.replace(\"http\", \"ws\");\n  return url.toString();\n}\nconst DEFAULT_CLIENT_OPTIONS = {\n  // We fudge the typing because we also check for undefined in the constructor:\n  WebSocketConstructor: typeof WebSocket !== \"undefined\" ? WebSocket : void 0,\n  callTimeout: 3e4,\n  reconnectTimeout: 3e3,\n  maxReconnects: 5\n};\nclass WebsocketClient {\n  constructor(endpoint, options = {}) {\n    __privateAdd(this, _setupWebSocket);\n    __privateAdd(this, _reconnect);\n    __privateAdd(this, _requestId, 0);\n    __privateAdd(this, _disconnects, 0);\n    __privateAdd(this, _webSocket, null);\n    __privateAdd(this, _connectionPromise, null);\n    __privateAdd(this, _subscriptions, /* @__PURE__ */ new Set());\n    __privateAdd(this, _pendingRequests, /* @__PURE__ */ new Map());\n    this.endpoint = endpoint;\n    this.options = { ...DEFAULT_CLIENT_OPTIONS, ...options };\n    if (!this.options.WebSocketConstructor) {\n      throw new Error(\"Missing WebSocket constructor\");\n    }\n    if (this.endpoint.startsWith(\"http\")) {\n      this.endpoint = getWebsocketUrl(this.endpoint);\n    }\n  }\n  async makeRequest(method, params) {\n    const webSocket = await __privateMethod(this, _setupWebSocket, setupWebSocket_fn).call(this);\n    return new Promise((resolve, reject) => {\n      __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);\n      __privateGet(this, _pendingRequests).set(__privateGet(this, _requestId), {\n        resolve,\n        reject,\n        timeout: setTimeout(() => {\n          __privateGet(this, _pendingRequests).delete(__privateGet(this, _requestId));\n          reject(new Error(`Request timeout: ${method}`));\n        }, this.options.callTimeout)\n      });\n      webSocket.send(JSON.stringify({ jsonrpc: \"2.0\", id: __privateGet(this, _requestId), method, params }));\n    }).then(({ error, result }) => {\n      if (error) {\n        throw new JsonRpcError(error.message, error.code);\n      }\n      return result;\n    });\n  }\n  async subscribe(input) {\n    const subscription = new RpcSubscription(input);\n    __privateGet(this, _subscriptions).add(subscription);\n    await subscription.subscribe(this);\n    return () => subscription.unsubscribe(this);\n  }\n}\n_requestId = new WeakMap();\n_disconnects = new WeakMap();\n_webSocket = new WeakMap();\n_connectionPromise = new WeakMap();\n_subscriptions = new WeakMap();\n_pendingRequests = new WeakMap();\n_setupWebSocket = new WeakSet();\nsetupWebSocket_fn = function() {\n  if (__privateGet(this, _connectionPromise)) {\n    return __privateGet(this, _connectionPromise);\n  }\n  __privateSet(this, _connectionPromise, new Promise((resolve) => {\n    __privateGet(this, _webSocket)?.close();\n    __privateSet(this, _webSocket, new this.options.WebSocketConstructor(this.endpoint));\n    __privateGet(this, _webSocket).addEventListener(\"open\", () => {\n      __privateSet(this, _disconnects, 0);\n      resolve(__privateGet(this, _webSocket));\n    });\n    __privateGet(this, _webSocket).addEventListener(\"close\", () => {\n      __privateWrapper(this, _disconnects)._++;\n      if (__privateGet(this, _disconnects) <= this.options.maxReconnects) {\n        setTimeout(() => {\n          __privateMethod(this, _reconnect, reconnect_fn).call(this);\n        }, this.options.reconnectTimeout);\n      }\n    });\n    __privateGet(this, _webSocket).addEventListener(\"message\", ({ data }) => {\n      let json;\n      try {\n        json = JSON.parse(data);\n      } catch (error) {\n        console.error(new Error(`Failed to parse RPC message: ${data}`, { cause: error }));\n        return;\n      }\n      if (\"id\" in json && json.id != null && __privateGet(this, _pendingRequests).has(json.id)) {\n        const { resolve: resolve2, timeout } = __privateGet(this, _pendingRequests).get(json.id);\n        clearTimeout(timeout);\n        resolve2(json);\n      } else if (\"params\" in json) {\n        const { params } = json;\n        __privateGet(this, _subscriptions).forEach((subscription) => {\n          if (subscription.subscriptionId === params.subscription) {\n            if (params.subscription === subscription.subscriptionId) {\n              subscription.onMessage(params.result);\n            }\n          }\n        });\n      }\n    });\n  }));\n  return __privateGet(this, _connectionPromise);\n};\n_reconnect = new WeakSet();\nreconnect_fn = async function() {\n  __privateGet(this, _webSocket)?.close();\n  __privateSet(this, _connectionPromise, null);\n  return Promise.allSettled(\n    [...__privateGet(this, _subscriptions)].map((subscription) => subscription.subscribe(this))\n  );\n};\nclass RpcSubscription {\n  constructor(input) {\n    this.subscriptionId = null;\n    this.subscribed = false;\n    this.input = input;\n  }\n  onMessage(message) {\n    if (this.subscribed) {\n      this.input.onMessage(message);\n    }\n  }\n  async unsubscribe(client) {\n    const { subscriptionId } = this;\n    this.subscribed = false;\n    if (subscriptionId == null)\n      return false;\n    this.subscriptionId = null;\n    return client.makeRequest(this.input.unsubscribe, [subscriptionId]);\n  }\n  async subscribe(client) {\n    this.subscriptionId = null;\n    this.subscribed = true;\n    const newSubscriptionId = await client.makeRequest(\n      this.input.method,\n      this.input.params\n    );\n    if (this.subscribed) {\n      this.subscriptionId = newSubscriptionId;\n    }\n  }\n}\nexport {\n  DEFAULT_CLIENT_OPTIONS,\n  WebsocketClient\n};\n//# sourceMappingURL=rpc-websocket-client.js.map\n","var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\nvar _requestId, _options, _websocketClient, _getWebsocketClient, getWebsocketClient_fn;\nimport { PACKAGE_VERSION, TARGETED_RPC_VERSION } from \"../version.js\";\nimport { BenfenHTTPStatusError, JsonRpcError } from \"./errors.js\";\nimport { WebsocketClient } from \"./rpc-websocket-client.js\";\nclass BenfenHTTPTransport {\n  constructor(options) {\n    __privateAdd(this, _getWebsocketClient);\n    __privateAdd(this, _requestId, 0);\n    __privateAdd(this, _options, void 0);\n    __privateAdd(this, _websocketClient, void 0);\n    __privateSet(this, _options, options);\n  }\n  fetch(input, init) {\n    const fetch = __privateGet(this, _options).fetch ?? globalThis.fetch;\n    if (!fetch) {\n      throw new Error(\n        \"The current environment does not support fetch, you can provide a fetch implementation in the options for BenfenHTTPTransport.\"\n      );\n    }\n    return fetch(input, init);\n  }\n  async request(input) {\n    __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);\n    const res = await this.fetch(__privateGet(this, _options).rpc?.url ?? __privateGet(this, _options).url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Client-Sdk-Type\": \"typescript\",\n        \"Client-Sdk-Version\": PACKAGE_VERSION,\n        \"Client-Target-Api-Version\": TARGETED_RPC_VERSION,\n        ...__privateGet(this, _options).rpc?.headers\n      },\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: __privateGet(this, _requestId),\n        method: input.method,\n        params: input.params\n      })\n    });\n    if (!res.ok) {\n      throw new BenfenHTTPStatusError(\n        `Unexpected status code: ${res.status}`,\n        res.status,\n        res.statusText\n      );\n    }\n    const data = await res.json();\n    if (\"error\" in data && data.error != null) {\n      throw new JsonRpcError(data.error.message, data.error.code);\n    }\n    return data.result;\n  }\n  async subscribe(input) {\n    const unsubscribe = await __privateMethod(this, _getWebsocketClient, getWebsocketClient_fn).call(this).subscribe(input);\n    return async () => !!await unsubscribe();\n  }\n}\n_requestId = new WeakMap();\n_options = new WeakMap();\n_websocketClient = new WeakMap();\n_getWebsocketClient = new WeakSet();\ngetWebsocketClient_fn = function() {\n  if (!__privateGet(this, _websocketClient)) {\n    const WebSocketConstructor = __privateGet(this, _options).WebSocketConstructor ?? globalThis.WebSocket;\n    if (!WebSocketConstructor) {\n      throw new Error(\n        \"The current environment does not support WebSocket, you can provide a WebSocketConstructor in the options for BenfenHTTPTransport.\"\n      );\n    }\n    __privateSet(this, _websocketClient, new WebsocketClient(\n      __privateGet(this, _options).websocket?.url ?? __privateGet(this, _options).url,\n      {\n        WebSocketConstructor,\n        ...__privateGet(this, _options).websocket\n      }\n    ));\n  }\n  return __privateGet(this, _websocketClient);\n};\nexport {\n  BenfenHTTPTransport\n};\n//# sourceMappingURL=http-transport.js.map\n","import { fromB58, toB64, toHEX } from \"../bcs/src/index.js\";\nimport { isTransactionBlock } from \"../transactions/TransactionBlock.js\";\nimport { normalizeBenfenNSName } from \"../utils/benfenns.js\";\nimport {\n  isValidBenfenAddress,\n  isValidBenfenObjectId,\n  isValidTransactionDigest,\n  normalizeHexAddress\n} from \"../utils/bf-types.js\";\nimport { hex2BfcAddress } from \"../utils/format.js\";\nimport { BenfenHTTPTransport } from \"./http-transport.js\";\nconst BENFEN_CLIENT_BRAND = Symbol.for(\"@benfen/BenfenClient\");\nfunction isBenfenClient(client) {\n  return typeof client === \"object\" && client !== null && client[BENFEN_CLIENT_BRAND] === true;\n}\nclass BenfenClient {\n  get [BENFEN_CLIENT_BRAND]() {\n    return true;\n  }\n  /**\n   * Establish a connection to a Benfen RPC endpoint\n   *\n   * @param options configuration options for the API Client\n   */\n  constructor(options) {\n    this.transport = options.transport ?? new BenfenHTTPTransport({ url: options.url });\n  }\n  async getRpcApiVersion() {\n    const resp = await this.transport.request({\n      method: \"rpc.discover\",\n      params: []\n    });\n    return resp.info.version;\n  }\n  /**\n   * Get all Coin<`coin_type`> objects owned by an address.\n   */\n  async getCoins(input) {\n    if (!input.owner || !isValidBenfenAddress(normalizeHexAddress(input.owner))) {\n      throw new Error(\"Invalid Benfen address\");\n    }\n    return await this.transport.request({\n      method: \"bfcx_getCoins\",\n      params: [input.owner, input.coinType, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Get all Coin objects owned by an address.\n   */\n  async getAllCoins(input) {\n    if (!input.owner || !isValidBenfenAddress(normalizeHexAddress(input.owner))) {\n      throw new Error(\"Invalid Benfen address\");\n    }\n    return await this.transport.request({\n      method: \"bfcx_getAllCoins\",\n      params: [input.owner, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Get the total coin balance for one coin type, owned by the address owner.\n   */\n  async getBalance(input) {\n    if (!input.owner || !isValidBenfenAddress(normalizeHexAddress(input.owner))) {\n      throw new Error(\"Invalid Benfen address\");\n    }\n    return await this.transport.request({\n      method: \"bfcx_getBalance\",\n      params: [input.owner, input.coinType]\n    });\n  }\n  /**\n   * Get the total coin balance for all coin types, owned by the address owner.\n   */\n  async getAllBalances(input) {\n    if (!input.owner || !isValidBenfenAddress(normalizeHexAddress(input.owner))) {\n      throw new Error(\"Invalid Benfen address\");\n    }\n    return await this.transport.request({ method: \"bfcx_getAllBalances\", params: [input.owner] });\n  }\n  /**\n   * Fetch CoinMetadata for a given coin type\n   */\n  async getCoinMetadata(input) {\n    return await this.transport.request({\n      method: \"bfcx_getCoinMetadata\",\n      params: [input.coinType]\n    });\n  }\n  /**\n   *  Fetch total supply for a coin\n   */\n  async getTotalSupply(input) {\n    return await this.transport.request({\n      method: \"bfcx_getTotalSupply\",\n      params: [input.coinType]\n    });\n  }\n  /**\n   * Invoke any RPC method\n   * @param method the method to be invoked\n   * @param args the arguments to be passed to the RPC request\n   */\n  async call(method, params) {\n    return await this.transport.request({ method, params });\n  }\n  /**\n   * Get Move function argument types like read, write and full access\n   */\n  async getMoveFunctionArgTypes(input) {\n    return await this.transport.request({\n      method: \"bfc_getMoveFunctionArgTypes\",\n      params: [input.package, input.module, input.function]\n    });\n  }\n  /**\n   * Get a map from module name to\n   * structured representations of Move modules\n   */\n  async getNormalizedMoveModulesByPackage(input) {\n    return await this.transport.request({\n      method: \"bfc_getNormalizedMoveModulesByPackage\",\n      params: [input.package]\n    });\n  }\n  /**\n   * Get a structured representation of Move module\n   */\n  async getNormalizedMoveModule(input) {\n    return await this.transport.request({\n      method: \"bfc_getNormalizedMoveModule\",\n      params: [input.package, input.module]\n    });\n  }\n  /**\n   * Get a structured representation of Move function\n   */\n  async getNormalizedMoveFunction(input) {\n    return await this.transport.request({\n      method: \"bfc_getNormalizedMoveFunction\",\n      params: [input.package, input.module, input.function]\n    });\n  }\n  /**\n   * Get a structured representation of Move struct\n   */\n  async getNormalizedMoveStruct(input) {\n    return await this.transport.request({\n      method: \"bfc_getNormalizedMoveStruct\",\n      params: [input.package, input.module, input.struct]\n    });\n  }\n  /**\n   * Get all objects owned by an address\n   */\n  async getOwnedObjects(input) {\n    if (!input.owner || !isValidBenfenAddress(normalizeHexAddress(input.owner))) {\n      throw new Error(\"Invalid Benfen address\");\n    }\n    return await this.transport.request({\n      method: \"bfcx_getOwnedObjects\",\n      params: [\n        input.owner,\n        {\n          filter: input.filter,\n          options: input.options\n        },\n        input.cursor,\n        input.limit\n      ]\n    });\n  }\n  /**\n   * Get details about an object\n   */\n  async getObject(input) {\n    if (!input.id || !isValidBenfenObjectId(hex2BfcAddress(input.id))) {\n      throw new Error(\"Invalid Benfen Object id\");\n    }\n    return await this.transport.request({\n      method: \"bfc_getObject\",\n      params: [input.id, input.options]\n    });\n  }\n  async tryGetPastObject(input) {\n    return await this.transport.request({\n      method: \"bfc_tryGetPastObject\",\n      params: [input.id, input.version, input.options]\n    });\n  }\n  /**\n   * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail\n   */\n  async multiGetObjects(input) {\n    input.ids.forEach((id) => {\n      if (!id || !isValidBenfenObjectId(hex2BfcAddress(id))) {\n        throw new Error(`Invalid Benfen Object id ${id}`);\n      }\n    });\n    const hasDuplicates = input.ids.length !== new Set(input.ids).size;\n    if (hasDuplicates) {\n      throw new Error(`Duplicate object ids in batch call ${input.ids}`);\n    }\n    return await this.transport.request({\n      method: \"bfc_multiGetObjects\",\n      params: [input.ids, input.options]\n    });\n  }\n  /**\n   * Get transaction blocks for a given query criteria\n   */\n  async queryTransactionBlocks(input) {\n    return await this.transport.request({\n      method: \"bfcx_queryTransactionBlocks\",\n      params: [\n        {\n          filter: input.filter,\n          options: input.options\n        },\n        input.cursor,\n        input.limit,\n        (input.order || \"descending\") === \"descending\"\n      ]\n    });\n  }\n  async getTransactionBlock(input) {\n    if (!isValidTransactionDigest(input.digest)) {\n      throw new Error(\"Invalid Transaction digest\");\n    }\n    return await this.transport.request({\n      method: \"bfc_getTransactionBlock\",\n      params: [input.digest, input.options]\n    });\n  }\n  async multiGetTransactionBlocks(input) {\n    input.digests.forEach((d) => {\n      if (!isValidTransactionDigest(d)) {\n        throw new Error(`Invalid Transaction digest ${d}`);\n      }\n    });\n    const hasDuplicates = input.digests.length !== new Set(input.digests).size;\n    if (hasDuplicates) {\n      throw new Error(`Duplicate digests in batch call ${input.digests}`);\n    }\n    return await this.transport.request({\n      method: \"bfc_multiGetTransactionBlocks\",\n      params: [input.digests, input.options]\n    });\n  }\n  async executeTransactionBlock(input) {\n    return await this.transport.request({\n      method: \"bfc_executeTransactionBlock\",\n      params: [\n        typeof input.transactionBlock === \"string\" ? input.transactionBlock : toB64(input.transactionBlock),\n        Array.isArray(input.signature) ? input.signature : [input.signature],\n        input.options,\n        input.requestType\n      ]\n    });\n  }\n  async signAndExecuteTransactionBlock({\n    transactionBlock,\n    signer,\n    ...input\n  }) {\n    let transactionBytes;\n    if (transactionBlock instanceof Uint8Array) {\n      transactionBytes = transactionBlock;\n    } else {\n      transactionBlock.setSenderIfNotSet(signer.toHexAddress());\n      transactionBytes = await transactionBlock.build({ client: this });\n    }\n    const { signature, bytes } = await signer.signTransactionBlock(transactionBytes);\n    return this.executeTransactionBlock({\n      transactionBlock: bytes,\n      signature,\n      ...input\n    });\n  }\n  /**\n   * Get total number of transactions\n   */\n  async getTotalTransactionBlocks() {\n    const resp = await this.transport.request({\n      method: \"bfc_getTotalTransactionBlocks\",\n      params: []\n    });\n    return BigInt(resp);\n  }\n  /**\n   * Getting the reference gas price for the network\n   */\n  async getReferenceGasPrice() {\n    const resp = await this.transport.request({\n      method: \"bfcx_getReferenceGasPrice\",\n      params: []\n    });\n    return BigInt(resp);\n  }\n  /**\n   * Getting the stable rate for a coin type\n   */\n  async getStableRate(coinType) {\n    const resp = await this.transport.request({\n      method: \"bfcx_getStableRate\",\n      params: [coinType.replace(/^0x/, \"\")]\n    });\n    return resp;\n  }\n  /**\n   * Return the delegated stakes for an address\n   */\n  async getStakes(input) {\n    if (!input.owner || !isValidBenfenAddress(normalizeHexAddress(input.owner))) {\n      throw new Error(\"Invalid Benfen address\");\n    }\n    return await this.transport.request({ method: \"bfcx_getStakes\", params: [input.owner] });\n  }\n  /**\n   * Return the delegated stakes queried by id.\n   */\n  async getStakesByIds(input) {\n    input.stakedBfcIds.forEach((id) => {\n      if (!id || !isValidBenfenObjectId(hex2BfcAddress(id))) {\n        throw new Error(`Invalid Bfc Stake id ${id}`);\n      }\n    });\n    return await this.transport.request({\n      method: \"bfcx_getStakesByIds\",\n      params: [input.stakedBfcIds]\n    });\n  }\n  /**\n   * Return the latest system state content.\n   */\n  async getLatestBenfeSystemState() {\n    return await this.transport.request({ method: \"bfcx_getLatestSuiSystemState\", params: [] });\n  }\n  /**\n   * Getting the overview for the network\n   */\n  async getNetworkOverview() {\n    const resp = await this.transport.request({\n      method: \"bfcx_getNetworkOverview\",\n      params: []\n    });\n    return resp;\n  }\n  /**\n   * Getting inner dao info\n   */\n  async getInnerDao() {\n    return await this.transport.request({\n      method: \"bfc_getInnerDaoInfo\",\n      params: []\n    });\n  }\n  /**\n   * Getting dao Proposal with voter\n   */\n  async getDaoProposalWithVoter(voter) {\n    return await this.transport.request({\n      method: \"bfcx_getDaoProposals\",\n      params: [voter]\n    });\n  }\n  /**\n   * Get events for a given query criteria\n   */\n  async queryEvents(input) {\n    return await this.transport.request({\n      method: \"bfcx_queryEvents\",\n      params: [\n        input.query,\n        input.cursor,\n        input.limit,\n        (input.order || \"descending\") === \"descending\"\n      ]\n    });\n  }\n  /**\n   * Subscribe to get notifications whenever an event matching the filter occurs\n   */\n  async subscribeEvent(input) {\n    return this.transport.subscribe({\n      method: \"bfcx_subscribeEvent\",\n      unsubscribe: \"bfcx_unsubscribeEvent\",\n      params: [input.filter],\n      onMessage: input.onMessage\n    });\n  }\n  async subscribeTransaction(input) {\n    return this.transport.subscribe({\n      method: \"bfcx_subscribeTransaction\",\n      unsubscribe: \"bfcx_unsubscribeTransaction\",\n      params: [input.filter],\n      onMessage: input.onMessage\n    });\n  }\n  /**\n   * Runs the transaction block in dev-inspect mode. Which allows for nearly any\n   * transaction (or Move call) with any arguments. Detailed results are\n   * provided, including both the transaction effects and any return values.\n   */\n  async devInspectTransactionBlock(input) {\n    let devInspectTxBytes;\n    if (isTransactionBlock(input.transactionBlock)) {\n      input.transactionBlock.setSenderIfNotSet(input.sender);\n      devInspectTxBytes = toB64(\n        await input.transactionBlock.build({\n          client: this,\n          onlyTransactionKind: true\n        })\n      );\n    } else if (typeof input.transactionBlock === \"string\") {\n      devInspectTxBytes = input.transactionBlock;\n    } else if (input.transactionBlock instanceof Uint8Array) {\n      devInspectTxBytes = toB64(input.transactionBlock);\n    } else {\n      throw new Error(\"Unknown transaction block format.\");\n    }\n    return await this.transport.request({\n      method: \"bfc_devInspectTransactionBlock\",\n      params: [input.sender, devInspectTxBytes, input.gasPrice?.toString(), input.epoch]\n    });\n  }\n  /**\n   * Dry run a transaction block and return the result.\n   */\n  async dryRunTransactionBlock(input) {\n    return await this.transport.request({\n      method: \"bfc_dryRunTransactionBlock\",\n      params: [\n        typeof input.transactionBlock === \"string\" ? input.transactionBlock : toB64(input.transactionBlock)\n      ]\n    });\n  }\n  /**\n   * Return the list of dynamic field objects owned by an object\n   */\n  async getDynamicFields(input) {\n    if (!input.parentId || !isValidBenfenObjectId(hex2BfcAddress(input.parentId))) {\n      throw new Error(\"Invalid Benfen Object id\");\n    }\n    return await this.transport.request({\n      method: \"bfcx_getDynamicFields\",\n      params: [input.parentId, input.cursor, input.limit]\n    });\n  }\n  /**\n   * Return the dynamic field object information for a specified object\n   */\n  async getDynamicFieldObject(input) {\n    return await this.transport.request({\n      method: \"bfcx_getDynamicFieldObject\",\n      params: [input.parentId, input.name]\n    });\n  }\n  /**\n   * Get the sequence number of the latest checkpoint that has been executed\n   */\n  async getLatestCheckpointSequenceNumber() {\n    const resp = await this.transport.request({\n      method: \"bfc_getLatestCheckpointSequenceNumber\",\n      params: []\n    });\n    return String(resp);\n  }\n  /**\n   * Returns information about a given checkpoint\n   */\n  async getCheckpoint(input) {\n    return await this.transport.request({ method: \"bfc_getCheckpoint\", params: [input.id] });\n  }\n  /**\n   * Returns historical checkpoints paginated\n   */\n  async getCheckpoints(input) {\n    return await this.transport.request({\n      method: \"bfc_getCheckpoints\",\n      params: [input.cursor, input?.limit, input.descendingOrder]\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getCommitteeInfo(input) {\n    return await this.transport.request({\n      method: \"bfcx_getCommitteeInfo\",\n      params: [input?.epoch]\n    });\n  }\n  async getNetworkMetrics() {\n    return await this.transport.request({ method: \"bfcx_getNetworkMetrics\", params: [] });\n  }\n  async getAddressMetrics() {\n    return await this.transport.request({ method: \"bfcx_getLatestAddressMetrics\", params: [] });\n  }\n  async getEpochMetrics(input) {\n    return await this.transport.request({\n      method: \"bfcx_getEpochMetrics\",\n      params: [input?.cursor, input?.limit, input?.descendingOrder]\n    });\n  }\n  async getAllEpochAddressMetrics(input) {\n    return await this.transport.request({\n      method: \"bfcx_getAllEpochAddressMetrics\",\n      params: [input?.descendingOrder]\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getEpochs(input) {\n    return await this.transport.request({\n      method: \"bfcx_getEpochs\",\n      params: [input?.cursor, input?.limit, input?.descendingOrder]\n    });\n  }\n  /**\n   * Returns list of top move calls by usage\n   */\n  async getMoveCallMetrics() {\n    return await this.transport.request({ method: \"bfcx_getMoveCallMetrics\", params: [] });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getCurrentEpoch() {\n    return await this.transport.request({ method: \"bfcx_getCurrentEpoch\", params: [] });\n  }\n  /**\n   * Return the Validators APYs\n   */\n  async getValidatorsApy() {\n    return await this.transport.request({ method: \"bfcx_getValidatorsApy\", params: [] });\n  }\n  // TODO: Migrate this to `bfc_getChainIdentifier` once it is widely available.\n  async getChainIdentifier() {\n    const checkpoint = await this.getCheckpoint({ id: \"0\" });\n    const bytes = fromB58(checkpoint.digest);\n    return toHEX(bytes.slice(0, 4));\n  }\n  async resolveNameServiceAddress(input) {\n    return await this.transport.request({\n      method: \"bfcx_resolveNameServiceAddress\",\n      params: [input.name]\n    });\n  }\n  async resolveNameServiceNames({\n    format = \"dot\",\n    ...input\n  }) {\n    const { nextCursor, hasNextPage, data } = await this.transport.request({\n      method: \"bfcx_resolveNameServiceNames\",\n      params: [input.address, input.cursor, input.limit]\n    });\n    return {\n      hasNextPage,\n      nextCursor,\n      data: data.map((name) => normalizeBenfenNSName(name, format))\n    };\n  }\n  async getProtocolConfig(input) {\n    return await this.transport.request({\n      method: \"bfc_getProtocolConfig\",\n      params: [input?.version]\n    });\n  }\n  /**\n   * Wait for a transaction block result to be available over the API.\n   * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to\n   * be available via the API.\n   * This currently polls the `getTransactionBlock` API to check for the transaction.\n   */\n  async waitForTransactionBlock({\n    signal,\n    timeout = 60 * 1e3,\n    pollInterval = 2 * 1e3,\n    ...input\n  }) {\n    const timeoutSignal = AbortSignal.timeout(timeout);\n    const timeoutPromise = new Promise((_, reject) => {\n      timeoutSignal.addEventListener(\"abort\", () => reject(timeoutSignal.reason));\n    });\n    timeoutPromise.catch(() => {\n    });\n    while (!timeoutSignal.aborted) {\n      signal?.throwIfAborted();\n      try {\n        return await this.getTransactionBlock(input);\n      } catch (e) {\n        await Promise.race([\n          new Promise((resolve) => setTimeout(resolve, pollInterval)),\n          timeoutPromise\n        ]);\n      }\n    }\n    timeoutSignal.throwIfAborted();\n    throw new Error(\"Unexpected error while waiting for transaction block.\");\n  }\n}\nexport {\n  BENFEN_CLIENT_BRAND,\n  BenfenClient,\n  isBenfenClient\n};\n//# sourceMappingURL=client.js.map\n","import { jsx } from \"react/jsx-runtime\";\nimport { createContext, useMemo, useState } from \"react\";\nimport { BenfenClient, getFullnodeUrl, isBenfenClient } from \"../../client/index.js\";\nconst BenfenClientContext = createContext(null);\nconst DEFAULT_NETWORKS = {\n  localnet: { url: getFullnodeUrl(\"localnet\") }\n};\nconst DEFAULT_CREATE_CLIENT = function createClient(_name, config) {\n  if (isBenfenClient(config)) {\n    return config;\n  }\n  return new BenfenClient(config);\n};\nfunction BenfenClientProvider(props) {\n  const { onNetworkChange, network, children } = props;\n  const networks = props.networks ?? DEFAULT_NETWORKS;\n  const createClient2 = props.createClient ?? DEFAULT_CREATE_CLIENT;\n  const [selectedNetwork, setSelectedNetwork] = useState(\n    props.network ?? props.defaultNetwork ?? Object.keys(networks)[0]\n  );\n  const currentNetwork = props.network ?? selectedNetwork;\n  const client = useMemo(() => {\n    return createClient2(currentNetwork, networks[currentNetwork]);\n  }, [createClient2, currentNetwork, networks]);\n  const ctx = useMemo(() => {\n    return {\n      client,\n      networks,\n      network: currentNetwork,\n      config: networks[currentNetwork] instanceof BenfenClient ? null : networks[currentNetwork],\n      selectNetwork: (newNetwork) => {\n        if (currentNetwork === newNetwork) {\n          return;\n        }\n        if (!network && newNetwork !== selectedNetwork) {\n          setSelectedNetwork(newNetwork);\n        }\n        onNetworkChange?.(newNetwork);\n      }\n    };\n  }, [client, networks, selectedNetwork, currentNetwork, network, onNetworkChange]);\n  return /* @__PURE__ */ jsx(BenfenClientContext.Provider, { value: ctx, children });\n}\nexport {\n  BenfenClientContext,\n  BenfenClientProvider\n};\n//# sourceMappingURL=BenfenClientProvider.js.map\n","function createInMemoryStore() {\n  const store = /* @__PURE__ */ new Map();\n  return {\n    getItem(key) {\n      return store.get(key);\n    },\n    setItem(key, value) {\n      store.set(key, value);\n    },\n    removeItem(key) {\n      store.delete(key);\n    }\n  };\n}\nexport {\n  createInMemoryStore\n};\n//# sourceMappingURL=stateStorage.js.map\n","import { createInMemoryStore } from \"../utils/stateStorage.js\";\nconst BENFEN_WALLET_NAME = \"Benfen Wallet\";\nconst DEFAULT_STORAGE = typeof window !== \"undefined\" && window.localStorage ? localStorage : createInMemoryStore();\nconst DEFAULT_STORAGE_KEY = \"bfc-dapp-kit:wallet-connection-info\";\nconst DEFAULT_REQUIRED_FEATURES = [\n  \"bfc:signTransactionBlock\"\n];\nconst DEFAULT_PREFERRED_WALLETS = [BENFEN_WALLET_NAME];\nexport {\n  BENFEN_WALLET_NAME,\n  DEFAULT_PREFERRED_WALLETS,\n  DEFAULT_REQUIRED_FEATURES,\n  DEFAULT_STORAGE,\n  DEFAULT_STORAGE_KEY\n};\n//# sourceMappingURL=walletDefaults.js.map\n","const REQUIRED_FEATURES = [\n  \"standard:connect\",\n  \"standard:events\"\n];\nfunction isWalletWithBenfenFeatures(wallet, features = []) {\n  return [...REQUIRED_FEATURES, ...features].every((feature) => feature in wallet.features);\n}\nfunction isWalletWithRequiredFeatureSet(wallet, additionalFeatures = []) {\n  return [...REQUIRED_FEATURES, ...additionalFeatures].every(\n    (feature) => feature in wallet.features\n  );\n}\nexport {\n  isWalletWithBenfenFeatures,\n  isWalletWithRequiredFeatureSet\n};\n//# sourceMappingURL=detect.js.map\n","import { getWallets, isWalletWithRequiredFeatureSet } from \"../../wallet-standard/index.js\";\nimport {} from \"@wallet-standard/core\";\nfunction getRegisteredWallets(preferredWallets, requiredFeatures) {\n  const walletsApi = getWallets();\n  const wallets = walletsApi.get();\n  const benfenWallets = wallets.filter(\n    (wallet) => isWalletWithRequiredFeatureSet(wallet, requiredFeatures)\n  );\n  return [\n    // Preferred wallets, in order:\n    ...preferredWallets.map((name) => benfenWallets.find((wallet) => wallet.name === name)).filter(Boolean),\n    // Wallets in default order:\n    ...benfenWallets.filter((wallet) => !preferredWallets.includes(wallet.name))\n  ];\n}\nfunction getWalletUniqueIdentifier(wallet) {\n  return wallet?.id ?? wallet?.name;\n}\nexport {\n  getRegisteredWallets,\n  getWalletUniqueIdentifier\n};\n//# sourceMappingURL=walletUtils.js.map\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useLayoutEffect, useState } from \"react\";\nimport { getWalletUniqueIdentifier } from \"../../utils/walletUtils.js\";\nimport { useConnectWallet } from \"./useConnectWallet.js\";\nimport { useCurrentWallet } from \"./useCurrentWallet.js\";\nimport { useWallets } from \"./useWallets.js\";\nimport { useWalletStore } from \"./useWalletStore.js\";\nfunction useAutoConnectWallet() {\n  const { mutateAsync: connectWallet } = useConnectWallet();\n  const autoConnectEnabled = useWalletStore((state) => state.autoConnectEnabled);\n  const lastConnectedWalletName = useWalletStore((state) => state.lastConnectedWalletName);\n  const lastConnectedAccountAddress = useWalletStore((state) => state.lastConnectedAccountAddress);\n  const wallets = useWallets();\n  const { isConnected } = useCurrentWallet();\n  const [clientOnly, setClientOnly] = useState(false);\n  useLayoutEffect(() => {\n    setClientOnly(true);\n  }, []);\n  const { data, isError } = useQuery({\n    queryKey: [\n      \"@benfen/bfc.js/dapp-kit\",\n      \"autoconnect\",\n      {\n        isConnected,\n        autoConnectEnabled,\n        lastConnectedWalletName,\n        lastConnectedAccountAddress,\n        walletCount: wallets.length\n      }\n    ],\n    queryFn: async () => {\n      if (!autoConnectEnabled) {\n        return \"disabled\";\n      }\n      if (!lastConnectedWalletName || !lastConnectedAccountAddress || isConnected) {\n        return \"attempted\";\n      }\n      const wallet = wallets.find(\n        (wallet2) => getWalletUniqueIdentifier(wallet2) === lastConnectedWalletName\n      );\n      if (wallet) {\n        await connectWallet({\n          wallet,\n          accountAddress: lastConnectedAccountAddress,\n          silent: true\n        });\n      }\n      return \"attempted\";\n    },\n    enabled: autoConnectEnabled,\n    persister: void 0,\n    gcTime: 0,\n    staleTime: 0,\n    networkMode: \"always\",\n    retry: false,\n    retryOnMount: false,\n    refetchInterval: false,\n    refetchIntervalInBackground: false,\n    refetchOnMount: false,\n    refetchOnReconnect: false,\n    refetchOnWindowFocus: false\n  });\n  if (!autoConnectEnabled) {\n    return \"disabled\";\n  }\n  if (!clientOnly) {\n    return \"idle\";\n  }\n  if (isConnected) {\n    return \"attempted\";\n  }\n  if (!lastConnectedWalletName) {\n    return \"attempted\";\n  }\n  return isError ? \"attempted\" : data ?? \"idle\";\n}\nexport {\n  useAutoConnectWallet\n};\n//# sourceMappingURL=useAutoConnectWallet.js.map\n","import { useEffect } from \"react\";\nimport { useCurrentWallet } from \"./useCurrentWallet.js\";\nimport { useWalletStore } from \"./useWalletStore.js\";\nfunction useWalletPropertiesChanged() {\n  const { currentWallet } = useCurrentWallet();\n  const updateWalletAccounts = useWalletStore((state) => state.updateWalletAccounts);\n  useEffect(() => {\n    const unsubscribeFromEvents = currentWallet?.features[\"standard:events\"].on(\n      \"change\",\n      ({ accounts }) => {\n        if (accounts) {\n          updateWalletAccounts(accounts);\n        }\n      }\n    );\n    return unsubscribeFromEvents;\n  }, [currentWallet?.features, updateWalletAccounts]);\n}\nexport {\n  useWalletPropertiesChanged\n};\n//# sourceMappingURL=useWalletPropertiesChanged.js.map\n","import { useEffect } from \"react\";\nimport { getWallets } from \"../../../wallet-standard/index.js\";\nimport { getRegisteredWallets } from \"../../utils/walletUtils.js\";\nimport { useWalletStore } from \"./useWalletStore.js\";\nfunction useWalletsChanged(preferredWallets, requiredFeatures) {\n  const setWalletRegistered = useWalletStore((state) => state.setWalletRegistered);\n  const setWalletUnregistered = useWalletStore((state) => state.setWalletUnregistered);\n  useEffect(() => {\n    const walletsApi = getWallets();\n    let wallets = [];\n    const checkInterval = window.setInterval(() => {\n      const registered = walletsApi.get();\n      const newWallets = registered.filter((wallet) => !wallets.includes(wallet));\n      if (newWallets.length > 0) {\n        setWalletRegistered(getRegisteredWallets(preferredWallets, requiredFeatures));\n        wallets = [...registered];\n      }\n    }, 100);\n    const unsubscribeFromRegister = walletsApi.on(\"register\", () => {\n      setWalletRegistered(getRegisteredWallets(preferredWallets, requiredFeatures));\n    });\n    const unsubscribeFromUnregister = walletsApi.on(\"unregister\", (unregisteredWallet) => {\n      setWalletUnregistered(\n        getRegisteredWallets(preferredWallets, requiredFeatures),\n        unregisteredWallet\n      );\n    });\n    return () => {\n      unsubscribeFromRegister();\n      unsubscribeFromUnregister();\n      clearInterval(checkInterval);\n    };\n  }, [preferredWallets, requiredFeatures, setWalletRegistered, setWalletUnregistered]);\n}\nexport {\n  useWalletsChanged\n};\n//# sourceMappingURL=useWalletsChanged.js.map\n","import { createStore } from \"zustand\";\nimport { createJSONStorage, persist } from \"zustand/middleware\";\nimport { getWalletUniqueIdentifier } from \"./utils/walletUtils.js\";\nfunction createWalletStore({\n  wallets,\n  storage,\n  storageKey,\n  autoConnectEnabled\n}) {\n  return createStore()(\n    persist(\n      (set, get) => ({\n        autoConnectEnabled,\n        wallets,\n        accounts: [],\n        currentWallet: null,\n        currentAccount: null,\n        lastConnectedAccountAddress: null,\n        lastConnectedWalletName: null,\n        connectionStatus: \"disconnected\",\n        setConnectionStatus(connectionStatus) {\n          set(() => ({\n            connectionStatus\n          }));\n        },\n        setWalletConnected(wallet, connectedAccounts, selectedAccount) {\n          set(() => ({\n            accounts: connectedAccounts,\n            currentWallet: wallet,\n            currentAccount: selectedAccount,\n            lastConnectedWalletName: getWalletUniqueIdentifier(wallet),\n            lastConnectedAccountAddress: selectedAccount?.address,\n            connectionStatus: \"connected\"\n          }));\n        },\n        setWalletDisconnected() {\n          set(() => ({\n            accounts: [],\n            currentWallet: null,\n            currentAccount: null,\n            lastConnectedWalletName: null,\n            lastConnectedAccountAddress: null,\n            connectionStatus: \"disconnected\"\n          }));\n        },\n        setAccountSwitched(selectedAccount) {\n          set(() => ({\n            currentAccount: selectedAccount,\n            lastConnectedAccountAddress: selectedAccount.address\n          }));\n        },\n        setWalletRegistered(updatedWallets) {\n          set(() => ({ wallets: updatedWallets }));\n        },\n        setWalletUnregistered(updatedWallets, unregisteredWallet) {\n          if (unregisteredWallet === get().currentWallet) {\n            set(() => ({\n              wallets: updatedWallets,\n              accounts: [],\n              currentWallet: null,\n              currentAccount: null,\n              lastConnectedWalletName: null,\n              lastConnectedAccountAddress: null,\n              connectionStatus: \"disconnected\"\n            }));\n          } else {\n            set(() => ({ wallets: updatedWallets }));\n          }\n        },\n        updateWalletAccounts(accounts) {\n          const currentAccount = get().currentAccount;\n          set(() => ({\n            accounts,\n            currentAccount: currentAccount && accounts.find(({ address }) => address === currentAccount.address) || accounts[0]\n          }));\n        }\n      }),\n      {\n        name: storageKey,\n        storage: createJSONStorage(() => storage),\n        partialize: ({ lastConnectedWalletName, lastConnectedAccountAddress }) => ({\n          lastConnectedWalletName,\n          lastConnectedAccountAddress\n        })\n      }\n    )\n  );\n}\nexport {\n  createWalletStore\n};\n//# sourceMappingURL=walletStore.js.map\n","import { jsx } from \"react/jsx-runtime\";\nimport { useRef } from \"react\";\nimport {\n  DEFAULT_PREFERRED_WALLETS,\n  DEFAULT_REQUIRED_FEATURES,\n  DEFAULT_STORAGE,\n  DEFAULT_STORAGE_KEY\n} from \"../constants/walletDefaults.js\";\nimport { WalletContext } from \"../contexts/walletContext.js\";\nimport { useAutoConnectWallet } from \"../hooks/wallet/useAutoConnectWallet.js\";\nimport { useWalletPropertiesChanged } from \"../hooks/wallet/useWalletPropertiesChanged.js\";\nimport { useWalletsChanged } from \"../hooks/wallet/useWalletsChanged.js\";\nimport { createInMemoryStore } from \"../utils/stateStorage.js\";\nimport { getRegisteredWallets } from \"../utils/walletUtils.js\";\nimport { createWalletStore } from \"../walletStore.js\";\nfunction WalletProvider({\n  preferredWallets = DEFAULT_PREFERRED_WALLETS,\n  requiredFeatures = DEFAULT_REQUIRED_FEATURES,\n  storage = DEFAULT_STORAGE,\n  storageKey = DEFAULT_STORAGE_KEY,\n  autoConnect = false,\n  children\n}) {\n  const storeRef = useRef(\n    createWalletStore({\n      autoConnectEnabled: autoConnect,\n      wallets: getRegisteredWallets(preferredWallets, requiredFeatures),\n      storage: storage || createInMemoryStore(),\n      storageKey\n    })\n  );\n  return /* @__PURE__ */ jsx(WalletContext.Provider, { value: storeRef.current, children: /* @__PURE__ */ jsx(\n    WalletConnectionManager,\n    {\n      preferredWallets,\n      requiredFeatures,\n      children\n    }\n  ) });\n}\nfunction WalletConnectionManager({\n  preferredWallets = DEFAULT_PREFERRED_WALLETS,\n  requiredFeatures = DEFAULT_REQUIRED_FEATURES,\n  children\n}) {\n  useWalletsChanged(preferredWallets, requiredFeatures);\n  useWalletPropertiesChanged();\n  useAutoConnectWallet();\n  return children;\n}\nexport {\n  WalletProvider\n};\n//# sourceMappingURL=WalletProvider.js.map\n","const walletMutationKeys = {\n  all: { baseScope: \"wallet\" },\n  connectWallet: formMutationKeyFn(\"connect-wallet\"),\n  autoconnectWallet: formMutationKeyFn(\"autoconnect-wallet\"),\n  disconnectWallet: formMutationKeyFn(\"disconnect-wallet\"),\n  signPersonalMessage: formMutationKeyFn(\"sign-personal-message\"),\n  signTransactionBlock: formMutationKeyFn(\"sign-transaction-block\"),\n  signAndExecuteTransactionBlock: formMutationKeyFn(\"sign-and-execute-transaction-block\"),\n  switchAccount: formMutationKeyFn(\"switch-account\"),\n  switchChain: formMutationKeyFn(\"switch-chain\")\n};\nfunction formMutationKeyFn(baseEntity) {\n  return function mutationKeyFn(additionalKeys = []) {\n    return [{ ...walletMutationKeys.all, baseEntity }, ...additionalKeys];\n  };\n}\nexport {\n  walletMutationKeys\n};\n//# sourceMappingURL=walletMutationKeys.js.map\n","import { createContext } from \"react\";\nconst WalletContext = createContext(null);\nexport {\n  WalletContext\n};\n//# sourceMappingURL=walletContext.js.map\n","class WalletNotConnectedError extends Error {\n}\nclass WalletNoAccountSelectedError extends Error {\n}\nclass WalletFeatureNotSupportedError extends Error {\n}\nclass WalletAccountNotFoundError extends Error {\n}\nexport {\n  WalletAccountNotFoundError,\n  WalletFeatureNotSupportedError,\n  WalletNoAccountSelectedError,\n  WalletNotConnectedError\n};\n//# sourceMappingURL=walletErrors.js.map\n","import { useBenfenClientContext } from \"./useBenfenClient.js\";\nfunction createNetworkConfig(networkConfig) {\n  function useNetworkConfig() {\n    const { config } = useBenfenClientContext();\n    if (!config) {\n      throw new Error(\"No network config found\");\n    }\n    return config;\n  }\n  function useNetworkVariables() {\n    const { variables } = useNetworkConfig();\n    return variables ?? {};\n  }\n  function useNetworkVariable(name) {\n    const variables = useNetworkVariables();\n    return variables[name];\n  }\n  return {\n    networkConfig,\n    useNetworkConfig,\n    useNetworkVariables,\n    useNetworkVariable\n  };\n}\nexport {\n  createNetworkConfig\n};\n//# sourceMappingURL=networkConfig.js.map\n","import { useContext } from \"react\";\nimport { BenfenClientContext } from \"../components/BenfenClientProvider.js\";\nfunction useBenfenClientContext() {\n  const benfenClient = useContext(BenfenClientContext);\n  if (!benfenClient) {\n    throw new Error(\n      \"Could not find BenfenClientContext. Ensure that you have set up the BenfenClientProvider\"\n    );\n  }\n  return benfenClient;\n}\nfunction useBenfenClient() {\n  return useBenfenClientContext().client;\n}\nexport {\n  useBenfenClient,\n  useBenfenClientContext\n};\n//# sourceMappingURL=useBenfenClient.js.map\n","import { useMutation } from \"@tanstack/react-query\";\nimport { walletMutationKeys } from \"../../constants/walletMutationKeys.js\";\nimport { useWalletStore } from \"./useWalletStore.js\";\nfunction useConnectWallet({\n  mutationKey,\n  ...mutationOptions\n} = {}) {\n  const setWalletConnected = useWalletStore((state) => state.setWalletConnected);\n  const setConnectionStatus = useWalletStore((state) => state.setConnectionStatus);\n  return useMutation({\n    mutationKey: walletMutationKeys.connectWallet(mutationKey),\n    mutationFn: async ({ wallet, accountAddress, ...connectArgs }) => {\n      try {\n        setConnectionStatus(\"connecting\");\n        const connectResult = await wallet.features[\"standard:connect\"].connect(connectArgs);\n        const connectedBenfenAccounts = connectResult.accounts.filter(\n          (account) => account.chains.some((chain) => chain.split(\":\")[0] === \"bfc\")\n        );\n        const selectedAccount = getSelectedAccount(connectedBenfenAccounts, accountAddress);\n        setWalletConnected(wallet, connectedBenfenAccounts, selectedAccount);\n        return { accounts: connectedBenfenAccounts };\n      } catch (error) {\n        setConnectionStatus(\"disconnected\");\n        throw error;\n      }\n    },\n    ...mutationOptions\n  });\n}\nfunction getSelectedAccount(connectedAccounts, accountAddress) {\n  if (connectedAccounts.length === 0) {\n    return null;\n  }\n  if (accountAddress) {\n    const selectedAccount = connectedAccounts.find((account) => account.address === accountAddress);\n    return selectedAccount ?? connectedAccounts[0];\n  }\n  return connectedAccounts[0];\n}\nexport {\n  useConnectWallet\n};\n//# sourceMappingURL=useConnectWallet.js.map\n","import { useWalletStore } from \"./useWalletStore.js\";\nfunction useCurrentAccount() {\n  return useWalletStore((state) => state.currentAccount);\n}\nexport {\n  useCurrentAccount\n};\n//# sourceMappingURL=useCurrentAccount.js.map\n","import { useWalletStore } from \"./useWalletStore.js\";\nfunction useCurrentWallet() {\n  const currentWallet = useWalletStore((state) => state.currentWallet);\n  const connectionStatus = useWalletStore((state) => state.connectionStatus);\n  switch (connectionStatus) {\n    case \"connecting\":\n      return {\n        connectionStatus,\n        currentWallet: null,\n        isDisconnected: false,\n        isConnecting: true,\n        isConnected: false\n      };\n    case \"disconnected\":\n      return {\n        connectionStatus,\n        currentWallet: null,\n        isDisconnected: true,\n        isConnecting: false,\n        isConnected: false\n      };\n    case \"connected\": {\n      return {\n        connectionStatus,\n        currentWallet,\n        isDisconnected: false,\n        isConnecting: false,\n        isConnected: true\n      };\n    }\n  }\n}\nexport {\n  useCurrentWallet\n};\n//# sourceMappingURL=useCurrentWallet.js.map\n","import { useMutation } from \"@tanstack/react-query\";\nimport { walletMutationKeys } from \"../../constants/walletMutationKeys.js\";\nimport { WalletNotConnectedError } from \"../../errors/walletErrors.js\";\nimport { useCurrentWallet } from \"./useCurrentWallet.js\";\nimport { useWalletStore } from \"./useWalletStore.js\";\nfunction useDisconnectWallet({\n  mutationKey,\n  ...mutationOptions\n} = {}) {\n  const { currentWallet } = useCurrentWallet();\n  const setWalletDisconnected = useWalletStore((state) => state.setWalletDisconnected);\n  return useMutation({\n    mutationKey: walletMutationKeys.disconnectWallet(mutationKey),\n    mutationFn: async () => {\n      if (!currentWallet) {\n        throw new WalletNotConnectedError(\"No wallet is connected.\");\n      }\n      try {\n        await currentWallet.features[\"standard:disconnect\"]?.disconnect();\n      } catch (error) {\n        console.error(\"Failed to disconnect the application from the current wallet.\", error);\n      }\n      setWalletDisconnected();\n    },\n    ...mutationOptions\n  });\n}\nexport {\n  useDisconnectWallet\n};\n//# sourceMappingURL=useDisconnectWallet.js.map\n","import { useMutation } from \"@tanstack/react-query\";\nimport { walletMutationKeys } from \"../../constants/walletMutationKeys.js\";\nimport {\n  WalletFeatureNotSupportedError,\n  WalletNoAccountSelectedError,\n  WalletNotConnectedError\n} from \"../../errors/walletErrors.js\";\nimport { useBenfenClient } from \"../useBenfenClient.js\";\nimport { useCurrentAccount } from \"./useCurrentAccount.js\";\nimport { useCurrentWallet } from \"./useCurrentWallet.js\";\nfunction useSignAndExecuteTransactionBlock({\n  mutationKey,\n  executeFromWallet,\n  ...mutationOptions\n} = {}) {\n  const { currentWallet } = useCurrentWallet();\n  const currentAccount = useCurrentAccount();\n  const client = useBenfenClient();\n  return useMutation({\n    mutationKey: walletMutationKeys.signAndExecuteTransactionBlock(mutationKey),\n    mutationFn: async ({ requestType, options, ...signTransactionBlockArgs }) => {\n      if (!currentWallet) {\n        throw new WalletNotConnectedError(\"No wallet is connected.\");\n      }\n      const signerAccount = signTransactionBlockArgs.account ?? currentAccount;\n      if (!signerAccount) {\n        throw new WalletNoAccountSelectedError(\n          \"No wallet account is selected to sign and execute the transaction block with.\"\n        );\n      }\n      if (executeFromWallet) {\n        const walletFeature2 = currentWallet.features[\"bfc:signAndExecuteTransactionBlock\"];\n        if (!walletFeature2) {\n          throw new WalletFeatureNotSupportedError(\n            \"This wallet doesn't support the `signAndExecuteTransactionBlock` feature.\"\n          );\n        }\n        return walletFeature2.signAndExecuteTransactionBlock({\n          ...signTransactionBlockArgs,\n          account: signerAccount,\n          chain: signTransactionBlockArgs.chain ?? signerAccount.chains[0],\n          requestType,\n          options\n        });\n      }\n      const walletFeature = currentWallet.features[\"bfc:signTransactionBlock\"];\n      if (!walletFeature) {\n        throw new WalletFeatureNotSupportedError(\n          \"This wallet doesn't support the `signTransactionBlock` feature.\"\n        );\n      }\n      const { signature, transactionBlockBytes } = await walletFeature.signTransactionBlock({\n        ...signTransactionBlockArgs,\n        account: signerAccount,\n        chain: signTransactionBlockArgs.chain ?? signerAccount.chains[0]\n      });\n      return client.executeTransactionBlock({\n        transactionBlock: transactionBlockBytes,\n        signature,\n        requestType,\n        options\n      });\n    },\n    ...mutationOptions\n  });\n}\nexport {\n  useSignAndExecuteTransactionBlock\n};\n//# sourceMappingURL=useSignAndExecuteTransactionBlock.js.map\n","import { useMutation } from \"@tanstack/react-query\";\nimport {\n  WalletFeatureNotSupportedError,\n  WalletNoAccountSelectedError,\n  WalletNotConnectedError\n} from \"../..//errors/walletErrors.js\";\nimport { walletMutationKeys } from \"../../constants/walletMutationKeys.js\";\nimport { useCurrentAccount } from \"./useCurrentAccount.js\";\nimport { useCurrentWallet } from \"./useCurrentWallet.js\";\nfunction useSignPersonalMessage({\n  mutationKey,\n  ...mutationOptions\n} = {}) {\n  const { currentWallet } = useCurrentWallet();\n  const currentAccount = useCurrentAccount();\n  return useMutation({\n    mutationKey: walletMutationKeys.signPersonalMessage(mutationKey),\n    mutationFn: async (signPersonalMessageArgs) => {\n      if (!currentWallet) {\n        throw new WalletNotConnectedError(\"No wallet is connected.\");\n      }\n      const signerAccount = signPersonalMessageArgs.account ?? currentAccount;\n      if (!signerAccount) {\n        throw new WalletNoAccountSelectedError(\n          \"No wallet account is selected to sign the personal message with.\"\n        );\n      }\n      const signPersonalMessageFeature = currentWallet.features[\"bfc:signPersonalMessage\"];\n      if (signPersonalMessageFeature) {\n        return await signPersonalMessageFeature.signPersonalMessage({\n          ...signPersonalMessageArgs,\n          account: signerAccount\n        });\n      }\n      const signMessageFeature = currentWallet.features[\"bfc:signMessage\"];\n      if (signMessageFeature) {\n        console.warn(\n          \"This wallet doesn't support the `signPersonalMessage` feature... falling back to `signMessage`.\"\n        );\n        const { messageBytes, signature } = await signMessageFeature.signMessage({\n          ...signPersonalMessageArgs,\n          account: signerAccount\n        });\n        return { bytes: messageBytes, signature };\n      }\n      throw new WalletFeatureNotSupportedError(\n        \"This wallet doesn't support the `signPersonalMessage` feature.\"\n      );\n    },\n    ...mutationOptions\n  });\n}\nexport {\n  useSignPersonalMessage\n};\n//# sourceMappingURL=useSignPersonalMessage.js.map\n","import { useMutation } from \"@tanstack/react-query\";\nimport {\n  WalletFeatureNotSupportedError,\n  WalletNoAccountSelectedError,\n  WalletNotConnectedError\n} from \"../..//errors/walletErrors.js\";\nimport { walletMutationKeys } from \"../../constants/walletMutationKeys.js\";\nimport { useCurrentAccount } from \"./useCurrentAccount.js\";\nimport { useCurrentWallet } from \"./useCurrentWallet.js\";\nfunction useSignTransactionBlock({\n  mutationKey,\n  ...mutationOptions\n} = {}) {\n  const { currentWallet } = useCurrentWallet();\n  const currentAccount = useCurrentAccount();\n  return useMutation({\n    mutationKey: walletMutationKeys.signTransactionBlock(mutationKey),\n    mutationFn: async (signTransactionBlockArgs) => {\n      if (!currentWallet) {\n        throw new WalletNotConnectedError(\"No wallet is connected.\");\n      }\n      const signerAccount = signTransactionBlockArgs.account ?? currentAccount;\n      if (!signerAccount) {\n        throw new WalletNoAccountSelectedError(\n          \"No wallet account is selected to sign the transaction block with.\"\n        );\n      }\n      const walletFeature = currentWallet.features[\"bfc:signTransactionBlock\"];\n      if (!walletFeature) {\n        throw new WalletFeatureNotSupportedError(\n          \"This wallet doesn't support the `SignTransactionBlock` feature.\"\n        );\n      }\n      return await walletFeature.signTransactionBlock({\n        ...signTransactionBlockArgs,\n        account: signerAccount,\n        chain: signTransactionBlockArgs.chain ?? signerAccount.chains[0]\n      });\n    },\n    ...mutationOptions\n  });\n}\nexport {\n  useSignTransactionBlock\n};\n//# sourceMappingURL=useSignTransactionBlock.js.map\n","import { useContext } from \"react\";\nimport { useStore } from \"zustand\";\nimport { WalletContext } from \"../../contexts/walletContext.js\";\nfunction useWalletStore(selector) {\n  const store = useContext(WalletContext);\n  if (!store) {\n    throw new Error(\n      \"Could not find WalletContext. Ensure that you have set up the WalletProvider.\"\n    );\n  }\n  return useStore(store, selector);\n}\nexport {\n  useWalletStore\n};\n//# sourceMappingURL=useWalletStore.js.map\n","import { useWalletStore } from \"./useWalletStore.js\";\nfunction useWallets() {\n  return useWalletStore((state) => state.wallets);\n}\nexport {\n  useWallets\n};\n//# sourceMappingURL=useWallets.js.map\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n    constructor(failure, failures) {\n        let cached;\n        const { message, explanation, ...rest } = failure;\n        const { path } = failure;\n        const msg = path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`;\n        super(explanation ?? msg);\n        if (explanation != null)\n            this.cause = msg;\n        Object.assign(this, rest);\n        this.name = this.constructor.name;\n        this.failures = () => {\n            return (cached ?? (cached = [failure, ...failures()]));\n        };\n    }\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n    return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isObject(x) {\n    return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isPlainObject(x) {\n    if (Object.prototype.toString.call(x) !== '[object Object]') {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(x);\n    return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\nfunction print(value) {\n    if (typeof value === 'symbol') {\n        return value.toString();\n    }\n    return typeof value === 'string' ? JSON.stringify(value) : `${value}`;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\nfunction shiftIterator(input) {\n    const { done, value } = input.next();\n    return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\nfunction toFailure(result, context, struct, value) {\n    if (result === true) {\n        return;\n    }\n    else if (result === false) {\n        result = {};\n    }\n    else if (typeof result === 'string') {\n        result = { message: result };\n    }\n    const { path, branch } = context;\n    const { type } = struct;\n    const { refinement, message = `Expected a value of type \\`${type}\\`${refinement ? ` with refinement \\`${refinement}\\`` : ''}, but received: \\`${print(value)}\\``, } = result;\n    return {\n        value,\n        type,\n        refinement,\n        key: path[path.length - 1],\n        path,\n        branch,\n        ...result,\n        message,\n    };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\nfunction* toFailures(result, context, struct, value) {\n    if (!isIterable(result)) {\n        result = [result];\n    }\n    for (const r of result) {\n        const failure = toFailure(r, context, struct, value);\n        if (failure) {\n            yield failure;\n        }\n    }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\nfunction* run(value, struct, options = {}) {\n    const { path = [], branch = [value], coerce = false, mask = false } = options;\n    const ctx = { path, branch };\n    if (coerce) {\n        value = struct.coercer(value, ctx);\n        if (mask &&\n            struct.type !== 'type' &&\n            isObject(struct.schema) &&\n            isObject(value) &&\n            !Array.isArray(value)) {\n            for (const key in value) {\n                if (struct.schema[key] === undefined) {\n                    delete value[key];\n                }\n            }\n        }\n    }\n    let status = 'valid';\n    for (const failure of struct.validator(value, ctx)) {\n        failure.explanation = options.message;\n        status = 'not_valid';\n        yield [failure, undefined];\n    }\n    for (let [k, v, s] of struct.entries(value, ctx)) {\n        const ts = run(v, s, {\n            path: k === undefined ? path : [...path, k],\n            branch: k === undefined ? branch : [...branch, v],\n            coerce,\n            mask,\n            message: options.message,\n        });\n        for (const t of ts) {\n            if (t[0]) {\n                status = t[0].refinement != null ? 'not_refined' : 'not_valid';\n                yield [t[0], undefined];\n            }\n            else if (coerce) {\n                v = t[1];\n                if (k === undefined) {\n                    value = v;\n                }\n                else if (value instanceof Map) {\n                    value.set(k, v);\n                }\n                else if (value instanceof Set) {\n                    value.add(v);\n                }\n                else if (isObject(value)) {\n                    if (v !== undefined || k in value)\n                        value[k] = v;\n                }\n            }\n        }\n    }\n    if (status !== 'not_valid') {\n        for (const failure of struct.refiner(value, ctx)) {\n            failure.explanation = options.message;\n            status = 'not_refined';\n            yield [failure, undefined];\n        }\n    }\n    if (status === 'valid') {\n        yield [undefined, value];\n    }\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\nclass Struct {\n    constructor(props) {\n        const { type, schema, validator, refiner, coercer = (value) => value, entries = function* () { }, } = props;\n        this.type = type;\n        this.schema = schema;\n        this.entries = entries;\n        this.coercer = coercer;\n        if (validator) {\n            this.validator = (value, context) => {\n                const result = validator(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.validator = () => [];\n        }\n        if (refiner) {\n            this.refiner = (value, context) => {\n                const result = refiner(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.refiner = () => [];\n        }\n    }\n    /**\n     * Assert that a value passes the struct's validation, throwing if it doesn't.\n     */\n    assert(value, message) {\n        return assert(value, this, message);\n    }\n    /**\n     * Create a value with the struct's coercion logic, then validate it.\n     */\n    create(value, message) {\n        return create(value, this, message);\n    }\n    /**\n     * Check if a value passes the struct's validation.\n     */\n    is(value) {\n        return is(value, this);\n    }\n    /**\n     * Mask a value, coercing and validating it, but returning only the subset of\n     * properties defined by the struct's schema.\n     */\n    mask(value, message) {\n        return mask(value, this, message);\n    }\n    /**\n     * Validate a value with the struct's validation logic, returning a tuple\n     * representing the result.\n     *\n     * You may optionally pass `true` for the `withCoercion` argument to coerce\n     * the value before attempting to validate it. If you do, the result will\n     * contain the coerced result when successful.\n     */\n    validate(value, options = {}) {\n        return validate(value, this, options);\n    }\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\nfunction assert(value, struct, message) {\n    const result = validate(value, struct, { message });\n    if (result[0]) {\n        throw result[0];\n    }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\nfunction create(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\nfunction mask(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, mask: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Check if a value passes a struct.\n */\nfunction is(value, struct) {\n    const result = validate(value, struct);\n    return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\nfunction validate(value, struct, options = {}) {\n    const tuples = run(value, struct, options);\n    const tuple = shiftIterator(tuples);\n    if (tuple[0]) {\n        const error = new StructError(tuple[0], function* () {\n            for (const t of tuples) {\n                if (t[0]) {\n                    yield t[0];\n                }\n            }\n        });\n        return [error, undefined];\n    }\n    else {\n        const v = tuple[1];\n        return [undefined, v];\n    }\n}\n\nfunction assign(...Structs) {\n    const isType = Structs[0].type === 'type';\n    const schemas = Structs.map((s) => s.schema);\n    const schema = Object.assign({}, ...schemas);\n    return isType ? type(schema) : object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\nfunction define(name, validator) {\n    return new Struct({ type: name, schema: null, validator });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\nfunction deprecated(struct, log) {\n    return new Struct({\n        ...struct,\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n        validator(value, ctx) {\n            if (value === undefined) {\n                return true;\n            }\n            else {\n                log(value, ctx);\n                return struct.validator(value, ctx);\n            }\n        },\n    });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\nfunction dynamic(fn) {\n    return new Struct({\n        type: 'dynamic',\n        schema: null,\n        *entries(value, ctx) {\n            const struct = fn(value, ctx);\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\nfunction lazy(fn) {\n    let struct;\n    return new Struct({\n        type: 'lazy',\n        schema: null,\n        *entries(value, ctx) {\n            struct ?? (struct = fn());\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\nfunction omit(struct, keys) {\n    const { schema } = struct;\n    const subschema = { ...schema };\n    for (const key of keys) {\n        delete subschema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\nfunction partial(struct) {\n    const isStruct = struct instanceof Struct;\n    const schema = isStruct ? { ...struct.schema } : { ...struct };\n    for (const key in schema) {\n        schema[key] = optional(schema[key]);\n    }\n    if (isStruct && struct.type === 'type') {\n        return type(schema);\n    }\n    return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\nfunction pick(struct, keys) {\n    const { schema } = struct;\n    const subschema = {};\n    for (const key of keys) {\n        subschema[key] = schema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\nfunction struct(name, validator) {\n    console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n    return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\nfunction any() {\n    return define('any', () => true);\n}\nfunction array(Element) {\n    return new Struct({\n        type: 'array',\n        schema: Element,\n        *entries(value) {\n            if (Element && Array.isArray(value)) {\n                for (const [i, v] of value.entries()) {\n                    yield [i, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return Array.isArray(value) ? value.slice() : value;\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array value, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a bigint.\n */\nfunction bigint() {\n    return define('bigint', (value) => {\n        return typeof value === 'bigint';\n    });\n}\n/**\n * Ensure that a value is a boolean.\n */\nfunction boolean() {\n    return define('boolean', (value) => {\n        return typeof value === 'boolean';\n    });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\nfunction date() {\n    return define('date', (value) => {\n        return ((value instanceof Date && !isNaN(value.getTime())) ||\n            `Expected a valid \\`Date\\` object, but received: ${print(value)}`);\n    });\n}\nfunction enums(values) {\n    const schema = {};\n    const description = values.map((v) => print(v)).join();\n    for (const key of values) {\n        schema[key] = key;\n    }\n    return new Struct({\n        type: 'enums',\n        schema,\n        validator(value) {\n            return (values.includes(value) ||\n                `Expected one of \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a function.\n */\nfunction func() {\n    return define('func', (value) => {\n        return (typeof value === 'function' ||\n            `Expected a function, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\nfunction instance(Class) {\n    return define('instance', (value) => {\n        return (value instanceof Class ||\n            `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an integer.\n */\nfunction integer() {\n    return define('integer', (value) => {\n        return ((typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n            `Expected an integer, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value matches all of a set of types.\n */\nfunction intersection(Structs) {\n    return new Struct({\n        type: 'intersection',\n        schema: null,\n        *entries(value, ctx) {\n            for (const S of Structs) {\n                yield* S.entries(value, ctx);\n            }\n        },\n        *validator(value, ctx) {\n            for (const S of Structs) {\n                yield* S.validator(value, ctx);\n            }\n        },\n        *refiner(value, ctx) {\n            for (const S of Structs) {\n                yield* S.refiner(value, ctx);\n            }\n        },\n    });\n}\nfunction literal(constant) {\n    const description = print(constant);\n    const t = typeof constant;\n    return new Struct({\n        type: 'literal',\n        schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n        validator(value) {\n            return (value === constant ||\n                `Expected the literal \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\nfunction map(Key, Value) {\n    return new Struct({\n        type: 'map',\n        schema: null,\n        *entries(value) {\n            if (Key && Value && value instanceof Map) {\n                for (const [k, v] of value.entries()) {\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Map ? new Map(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Map ||\n                `Expected a \\`Map\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that no value ever passes validation.\n */\nfunction never() {\n    return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\nfunction nullable(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === null || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is a number.\n */\nfunction number() {\n    return define('number', (value) => {\n        return ((typeof value === 'number' && !isNaN(value)) ||\n            `Expected a number, but received: ${print(value)}`);\n    });\n}\nfunction object(schema) {\n    const knowns = schema ? Object.keys(schema) : [];\n    const Never = never();\n    return new Struct({\n        type: 'object',\n        schema: schema ? schema : null,\n        *entries(value) {\n            if (schema && isObject(value)) {\n                const unknowns = new Set(Object.keys(value));\n                for (const key of knowns) {\n                    unknowns.delete(key);\n                    yield [key, value[key], schema[key]];\n                }\n                for (const key of unknowns) {\n                    yield [key, value[key], Never];\n                }\n            }\n        },\n        validator(value) {\n            return (isObject(value) || `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\nfunction optional(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\nfunction record(Key, Value) {\n    return new Struct({\n        type: 'record',\n        schema: null,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k in value) {\n                    const v = value[k];\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        validator(value) {\n            return (isObject(value) || `Expected an object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\nfunction regexp() {\n    return define('regexp', (value) => {\n        return value instanceof RegExp;\n    });\n}\nfunction set(Element) {\n    return new Struct({\n        type: 'set',\n        schema: null,\n        *entries(value) {\n            if (Element && value instanceof Set) {\n                for (const v of value) {\n                    yield [v, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Set ? new Set(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Set ||\n                `Expected a \\`Set\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a string.\n */\nfunction string() {\n    return define('string', (value) => {\n        return (typeof value === 'string' ||\n            `Expected a string, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\nfunction tuple(Structs) {\n    const Never = never();\n    return new Struct({\n        type: 'tuple',\n        schema: null,\n        *entries(value) {\n            if (Array.isArray(value)) {\n                const length = Math.max(Structs.length, value.length);\n                for (let i = 0; i < length; i++) {\n                    yield [i, value[i], Structs[i] || Never];\n                }\n            }\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\nfunction type(schema) {\n    const keys = Object.keys(schema);\n    return new Struct({\n        type: 'type',\n        schema,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k of keys) {\n                    yield [k, value[k], schema[k]];\n                }\n            }\n        },\n        validator(value) {\n            return (isObject(value) || `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Ensure that a value matches one of a set of types.\n */\nfunction union(Structs) {\n    const description = Structs.map((s) => s.type).join(' | ');\n    return new Struct({\n        type: 'union',\n        schema: null,\n        coercer(value) {\n            for (const S of Structs) {\n                const [error, coerced] = S.validate(value, { coerce: true });\n                if (!error) {\n                    return coerced;\n                }\n            }\n            return value;\n        },\n        validator(value, ctx) {\n            const failures = [];\n            for (const S of Structs) {\n                const [...tuples] = run(value, S, ctx);\n                const [first] = tuples;\n                if (!first[0]) {\n                    return [];\n                }\n                else {\n                    for (const [failure] of tuples) {\n                        if (failure) {\n                            failures.push(failure);\n                        }\n                    }\n                }\n            }\n            return [\n                `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(value)}`,\n                ...failures,\n            ];\n        },\n    });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\nfunction unknown() {\n    return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction coerce(struct, condition, coercer) {\n    return new Struct({\n        ...struct,\n        coercer: (value, ctx) => {\n            return is(value, condition)\n                ? struct.coercer(coercer(value, ctx), ctx)\n                : struct.coercer(value, ctx);\n        },\n    });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction defaulted(struct, fallback, options = {}) {\n    return coerce(struct, unknown(), (x) => {\n        const f = typeof fallback === 'function' ? fallback() : fallback;\n        if (x === undefined) {\n            return f;\n        }\n        if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n            const ret = { ...x };\n            let changed = false;\n            for (const key in f) {\n                if (ret[key] === undefined) {\n                    ret[key] = f[key];\n                    changed = true;\n                }\n            }\n            if (changed) {\n                return ret;\n            }\n        }\n        return x;\n    });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction trimmed(struct) {\n    return coerce(struct, string(), (x) => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\nfunction empty(struct) {\n    return refine(struct, 'empty', (value) => {\n        const size = getSize(value);\n        return (size === 0 ||\n            `Expected an empty ${struct.type} but received one with a size of \\`${size}\\``);\n    });\n}\nfunction getSize(value) {\n    if (value instanceof Map || value instanceof Set) {\n        return value.size;\n    }\n    else {\n        return value.length;\n    }\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\nfunction max(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'max', (value) => {\n        return exclusive\n            ? value < threshold\n            : value <= threshold ||\n                `Expected a ${struct.type} less than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\nfunction min(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'min', (value) => {\n        return exclusive\n            ? value > threshold\n            : value >= threshold ||\n                `Expected a ${struct.type} greater than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a string, array, map or set is not empty.\n */\nfunction nonempty(struct) {\n    return refine(struct, 'nonempty', (value) => {\n        const size = getSize(value);\n        return (size > 0 || `Expected a nonempty ${struct.type} but received an empty one`);\n    });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\nfunction pattern(struct, regexp) {\n    return refine(struct, 'pattern', (value) => {\n        return (regexp.test(value) ||\n            `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`);\n    });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\nfunction size(struct, min, max = min) {\n    const expected = `Expected a ${struct.type}`;\n    const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``;\n    return refine(struct, 'size', (value) => {\n        if (typeof value === 'number' || value instanceof Date) {\n            return ((min <= value && value <= max) ||\n                `${expected} ${of} but received \\`${value}\\``);\n        }\n        else if (value instanceof Map || value instanceof Set) {\n            const { size } = value;\n            return ((min <= size && size <= max) ||\n                `${expected} with a size ${of} but received one with a size of \\`${size}\\``);\n        }\n        else {\n            const { length } = value;\n            return ((min <= length && length <= max) ||\n                `${expected} with a length ${of} but received one with a length of \\`${length}\\``);\n        }\n    });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\nfunction refine(struct, name, refiner) {\n    return new Struct({\n        ...struct,\n        *refiner(value, ctx) {\n            yield* struct.refiner(value, ctx);\n            const result = refiner(value, ctx);\n            const failures = toFailures(result, ctx, struct, value);\n            for (const failure of failures) {\n                yield { ...failure, refinement: name };\n            }\n        },\n    });\n}\n\nexport { Struct, StructError, any, array, assert, assign, bigint, boolean, coerce, create, date, defaulted, define, deprecated, dynamic, empty, enums, func, instance, integer, intersection, is, lazy, literal, map, mask, max, min, never, nonempty, nullable, number, object, omit, optional, partial, pattern, pick, record, refine, regexp, set, size, string, struct, trimmed, tuple, type, union, unknown, validate };\n//# sourceMappingURL=index.mjs.map\n","import { array, bigint, boolean, integer, number, object, string, union } from \"superstruct\";\nimport { bcs, isSerializedBcs } from \"../bcs/index.js\";\nimport { normalizeHexAddress } from \"../utils/bf-types.js\";\nconst BenfenObjectRef = object({\n  /** Base64 string representing the object digest */\n  digest: string(),\n  /** Hex code as string representing the object id */\n  objectId: string(),\n  /** Object version */\n  version: union([number(), string(), bigint()])\n});\nconst ObjectArg = union([\n  object({ ImmOrOwned: BenfenObjectRef }),\n  object({\n    Shared: object({\n      objectId: string(),\n      initialSharedVersion: union([integer(), string()]),\n      mutable: boolean()\n    })\n  }),\n  object({ Receiving: BenfenObjectRef })\n]);\nconst PureCallArg = object({ Pure: array(integer()) });\nconst ObjectCallArg = object({ Object: ObjectArg });\nconst BuilderCallArg = union([PureCallArg, ObjectCallArg]);\nfunction Pure(data, type) {\n  return {\n    Pure: Array.from(\n      data instanceof Uint8Array ? data : isSerializedBcs(data) ? data.toBytes() : (\n        // NOTE: We explicitly set this to be growable to infinity, because we have maxSize validation at the builder-level:\n        bcs.ser(type, data, { maxSize: Infinity }).toBytes()\n      )\n    )\n  };\n}\nconst Inputs = {\n  Pure,\n  ObjectRef({ objectId, digest, version }) {\n    return {\n      Object: {\n        ImmOrOwned: {\n          digest,\n          version,\n          objectId: normalizeHexAddress(objectId)\n        }\n      }\n    };\n  },\n  SharedObjectRef({ objectId, mutable, initialSharedVersion }) {\n    return {\n      Object: {\n        Shared: {\n          mutable,\n          initialSharedVersion,\n          objectId: normalizeHexAddress(objectId)\n        }\n      }\n    };\n  },\n  ReceivingRef({ objectId, digest, version }) {\n    return {\n      Object: {\n        Receiving: {\n          digest,\n          version,\n          objectId: normalizeHexAddress(objectId)\n        }\n      }\n    };\n  }\n};\nfunction getIdFromCallArg(arg) {\n  if (typeof arg === \"string\") {\n    return normalizeHexAddress(arg);\n  }\n  if (\"ImmOrOwned\" in arg.Object) {\n    return normalizeHexAddress(arg.Object.ImmOrOwned.objectId);\n  }\n  if (\"Receiving\" in arg.Object) {\n    return normalizeHexAddress(arg.Object.Receiving.objectId);\n  }\n  return normalizeHexAddress(arg.Object.Shared.objectId);\n}\nfunction getSharedObjectInput(arg) {\n  return typeof arg === \"object\" && \"Object\" in arg && \"Shared\" in arg.Object ? arg.Object.Shared : void 0;\n}\nfunction isSharedObjectInput(arg) {\n  return !!getSharedObjectInput(arg);\n}\nfunction isMutableSharedObjectInput(arg) {\n  return getSharedObjectInput(arg)?.mutable ?? false;\n}\nexport {\n  BenfenObjectRef,\n  BuilderCallArg,\n  Inputs,\n  ObjectCallArg,\n  PureCallArg,\n  getIdFromCallArg,\n  getSharedObjectInput,\n  isMutableSharedObjectInput,\n  isSharedObjectInput\n};\n//# sourceMappingURL=Inputs.js.map\n","import { bcs } from \"../bcs/index.js\";\nfunction createPure(makePure) {\n  function pure(value, type) {\n    return makePure(value, type);\n  }\n  pure.u8 = (value) => makePure(bcs.U8.serialize(value));\n  pure.u16 = (value) => makePure(bcs.U16.serialize(value));\n  pure.u32 = (value) => makePure(bcs.U32.serialize(value));\n  pure.u64 = (value) => makePure(bcs.U64.serialize(value));\n  pure.u128 = (value) => makePure(bcs.U128.serialize(value));\n  pure.u256 = (value) => makePure(bcs.U256.serialize(value));\n  pure.bool = (value) => makePure(bcs.Bool.serialize(value));\n  pure.string = (value) => makePure(bcs.String.serialize(value));\n  pure.address = (value) => makePure(bcs.Address.serialize(value));\n  pure.id = pure.address;\n  return pure;\n}\nexport {\n  createPure\n};\n//# sourceMappingURL=pure.js.map\n","import { create as superstructCreate } from \"superstruct\";\nfunction create(value, struct) {\n  return superstructCreate(value, struct);\n}\nfunction extractMutableReference(normalizedType) {\n  return typeof normalizedType === \"object\" && \"MutableReference\" in normalizedType ? normalizedType.MutableReference : void 0;\n}\nfunction extractReference(normalizedType) {\n  return typeof normalizedType === \"object\" && \"Reference\" in normalizedType ? normalizedType.Reference : void 0;\n}\nfunction extractStructTag(normalizedType) {\n  if (typeof normalizedType === \"object\" && \"Struct\" in normalizedType) {\n    return normalizedType;\n  }\n  const ref = extractReference(normalizedType);\n  const mutRef = extractMutableReference(normalizedType);\n  if (typeof ref === \"object\" && \"Struct\" in ref) {\n    return ref;\n  }\n  if (typeof mutRef === \"object\" && \"Struct\" in mutRef) {\n    return mutRef;\n  }\n  return void 0;\n}\nexport {\n  create,\n  extractMutableReference,\n  extractReference,\n  extractStructTag\n};\n//# sourceMappingURL=utils.js.map\n","import { isValidBenfenAddress } from \"../utils/bf-types.js\";\nimport { BENFEN_FRAMEWORK_ADDRESS, MOVE_STDLIB_ADDRESS } from \"../utils/index.js\";\nimport { extractStructTag } from \"./utils.js\";\nconst OBJECT_MODULE_NAME = \"object\";\nconst ID_STRUCT_NAME = \"ID\";\nconst STD_ASCII_MODULE_NAME = \"ascii\";\nconst STD_ASCII_STRUCT_NAME = \"String\";\nconst STD_UTF8_MODULE_NAME = \"string\";\nconst STD_UTF8_STRUCT_NAME = \"String\";\nconst STD_OPTION_MODULE_NAME = \"option\";\nconst STD_OPTION_STRUCT_NAME = \"Option\";\nconst RESOLVED_BENFEN_ID = {\n  address: BENFEN_FRAMEWORK_ADDRESS,\n  module: OBJECT_MODULE_NAME,\n  name: ID_STRUCT_NAME\n};\nconst RESOLVED_ASCII_STR = {\n  address: MOVE_STDLIB_ADDRESS,\n  module: STD_ASCII_MODULE_NAME,\n  name: STD_ASCII_STRUCT_NAME\n};\nconst RESOLVED_UTF8_STR = {\n  address: MOVE_STDLIB_ADDRESS,\n  module: STD_UTF8_MODULE_NAME,\n  name: STD_UTF8_STRUCT_NAME\n};\nconst RESOLVED_STD_OPTION = {\n  address: MOVE_STDLIB_ADDRESS,\n  module: STD_OPTION_MODULE_NAME,\n  name: STD_OPTION_STRUCT_NAME\n};\nconst isSameStruct = (a, b) => a.address === b.address && a.module === b.module && a.name === b.name;\nfunction isTxContext(param) {\n  const struct = extractStructTag(param)?.Struct;\n  return struct?.address === \"0x2\" && struct?.module === \"tx_context\" && struct?.name === \"TxContext\";\n}\nfunction expectType(typeName, argVal) {\n  if (typeof argVal === \"undefined\") {\n    return;\n  }\n  if (typeof argVal !== typeName) {\n    throw new Error(`Expect ${argVal} to be ${typeName}, received ${typeof argVal}`);\n  }\n}\nconst allowedTypes = [\"Address\", \"Bool\", \"U8\", \"U16\", \"U32\", \"U64\", \"U128\", \"U256\"];\nfunction getPureSerializationType(normalizedType, argVal) {\n  if (typeof normalizedType === \"string\" && allowedTypes.includes(normalizedType)) {\n    if (normalizedType in [\"U8\", \"U16\", \"U32\", \"U64\", \"U128\", \"U256\"]) {\n      expectType(\"number\", argVal);\n    } else if (normalizedType === \"Bool\") {\n      expectType(\"boolean\", argVal);\n    } else if (normalizedType === \"Address\") {\n      expectType(\"string\", argVal);\n      if (argVal && !isValidBenfenAddress(argVal)) {\n        throw new Error(\"Invalid bfc Address\");\n      }\n    }\n    return normalizedType.toLowerCase();\n  } else if (typeof normalizedType === \"string\") {\n    throw new Error(`Unknown pure normalized type ${JSON.stringify(normalizedType, null, 2)}`);\n  }\n  if (\"Vector\" in normalizedType) {\n    if ((argVal === void 0 || typeof argVal === \"string\") && normalizedType.Vector === \"U8\") {\n      return \"string\";\n    }\n    if (argVal !== void 0 && !Array.isArray(argVal)) {\n      throw new Error(`Expect ${argVal} to be a array, received ${typeof argVal}`);\n    }\n    const innerType = getPureSerializationType(\n      normalizedType.Vector,\n      // undefined when argVal is empty\n      argVal ? argVal[0] : void 0\n    );\n    if (innerType === void 0) {\n      return;\n    }\n    return `vector<${innerType}>`;\n  }\n  if (\"Struct\" in normalizedType) {\n    if (isSameStruct(normalizedType.Struct, RESOLVED_ASCII_STR)) {\n      return \"string\";\n    } else if (isSameStruct(normalizedType.Struct, RESOLVED_UTF8_STR)) {\n      return \"utf8string\";\n    } else if (isSameStruct(normalizedType.Struct, RESOLVED_BENFEN_ID)) {\n      return \"address\";\n    } else if (isSameStruct(normalizedType.Struct, RESOLVED_STD_OPTION)) {\n      const optionToVec = {\n        Vector: normalizedType.Struct.typeArguments[0]\n      };\n      return getPureSerializationType(optionToVec, argVal);\n    }\n  }\n  return void 0;\n}\nexport {\n  getPureSerializationType,\n  isTxContext\n};\n//# sourceMappingURL=serializer.js.map\n","import { blake2b } from \"@noble/hashes/blake2b\";\nfunction hashTypedData(typeTag, data) {\n  const typeTagBytes = Array.from(`${typeTag}::`).map((e) => e.charCodeAt(0));\n  const dataWithTag = new Uint8Array(typeTagBytes.length + data.length);\n  dataWithTag.set(typeTagBytes);\n  dataWithTag.set(data, typeTagBytes.length);\n  return blake2b(dataWithTag, { dkLen: 32 });\n}\nexport {\n  hashTypedData\n};\n//# sourceMappingURL=hash.js.map\n","import {\n  any,\n  array,\n  assert,\n  define,\n  integer,\n  is,\n  literal,\n  object,\n  optional,\n  record,\n  string,\n  union,\n  unknown\n} from \"superstruct\";\nimport { bcs } from \"../bcs/index.js\";\nimport { fromB64 } from \"../bcs/src/index.js\";\nimport { TypeTagSerializer } from \"../bcs/type-tag-serializer.js\";\nimport { normalizeBenfenObjectId } from \"../utils/bf-types.js\";\nimport { Inputs } from \"./Inputs.js\";\nimport { create } from \"./utils.js\";\nconst option = (some) => union([object({ None: union([literal(true), literal(null)]) }), object({ Some: some })]);\nconst TransactionBlockInput = union([\n  object({\n    kind: literal(\"Input\"),\n    index: integer(),\n    value: optional(any()),\n    type: optional(literal(\"object\"))\n  }),\n  object({\n    kind: literal(\"Input\"),\n    index: integer(),\n    value: optional(any()),\n    type: literal(\"pure\")\n  })\n]);\nconst TransactionArgumentTypes = [\n  TransactionBlockInput,\n  object({ kind: literal(\"GasCoin\") }),\n  object({ kind: literal(\"Result\"), index: integer() }),\n  object({\n    kind: literal(\"NestedResult\"),\n    index: integer(),\n    resultIndex: integer()\n  })\n];\nconst TransactionArgument = union([...TransactionArgumentTypes]);\nconst MoveCallTransaction = object({\n  kind: literal(\"MoveCall\"),\n  target: define(\"target\", string().validator),\n  typeArguments: array(string()),\n  arguments: array(TransactionArgument)\n});\nconst TransferObjectsTransaction = object({\n  kind: literal(\"TransferObjects\"),\n  objects: array(TransactionArgument),\n  address: TransactionArgument\n});\nconst SplitCoinsTransaction = object({\n  kind: literal(\"SplitCoins\"),\n  coin: TransactionArgument,\n  amounts: array(TransactionArgument)\n});\nconst MergeCoinsTransaction = object({\n  kind: literal(\"MergeCoins\"),\n  destination: TransactionArgument,\n  sources: array(TransactionArgument)\n});\nconst MakeMoveVecTransaction = object({\n  kind: literal(\"MakeMoveVec\"),\n  // TODO: ideally we should use `TypeTag` instead of `record()` here,\n  // but TypeTag is recursively defined and it's tricky to define a\n  // recursive struct in superstruct\n  type: optional(option(record(string(), unknown()))),\n  objects: array(TransactionArgument)\n});\nconst PublishTransaction = object({\n  kind: literal(\"Publish\"),\n  modules: array(array(integer())),\n  dependencies: array(string())\n});\nvar UpgradePolicy = /* @__PURE__ */ ((UpgradePolicy2) => {\n  UpgradePolicy2[UpgradePolicy2[\"COMPATIBLE\"] = 0] = \"COMPATIBLE\";\n  UpgradePolicy2[UpgradePolicy2[\"ADDITIVE\"] = 128] = \"ADDITIVE\";\n  UpgradePolicy2[UpgradePolicy2[\"DEP_ONLY\"] = 192] = \"DEP_ONLY\";\n  return UpgradePolicy2;\n})(UpgradePolicy || {});\nconst UpgradeTransaction = object({\n  kind: literal(\"Upgrade\"),\n  modules: array(array(integer())),\n  dependencies: array(string()),\n  packageId: string(),\n  ticket: TransactionArgument\n});\nconst TransactionTypes = [\n  MoveCallTransaction,\n  TransferObjectsTransaction,\n  SplitCoinsTransaction,\n  MergeCoinsTransaction,\n  PublishTransaction,\n  UpgradeTransaction,\n  MakeMoveVecTransaction\n];\nconst TransactionType = union([...TransactionTypes]);\nfunction getTransactionType(data) {\n  assert(data, TransactionType);\n  return TransactionTypes.find((schema) => is(data, schema));\n}\nconst Transactions = {\n  MoveCall(input) {\n    return create(\n      {\n        kind: \"MoveCall\",\n        target: input.target,\n        arguments: input.arguments ?? [],\n        typeArguments: input.typeArguments ?? []\n      },\n      MoveCallTransaction\n    );\n  },\n  TransferObjects(objects, address) {\n    if (address.kind === \"Input\" && address.type === \"pure\" && typeof address.value !== \"object\") {\n      address.value = Inputs.Pure(bcs.Address.serialize(address.value));\n    }\n    return create({ kind: \"TransferObjects\", objects, address }, TransferObjectsTransaction);\n  },\n  SplitCoins(coin, amounts) {\n    amounts.forEach((input) => {\n      if (input.kind === \"Input\" && input.type === \"pure\" && typeof input.value !== \"object\") {\n        input.value = Inputs.Pure(bcs.U64.serialize(input.value));\n      }\n    });\n    return create(\n      {\n        kind: \"SplitCoins\",\n        coin,\n        amounts\n      },\n      SplitCoinsTransaction\n    );\n  },\n  MergeCoins(destination, sources) {\n    return create({ kind: \"MergeCoins\", destination, sources }, MergeCoinsTransaction);\n  },\n  Publish({\n    modules,\n    dependencies\n  }) {\n    return create(\n      {\n        kind: \"Publish\",\n        modules: modules.map(\n          (module) => typeof module === \"string\" ? Array.from(fromB64(module)) : module\n        ),\n        dependencies: dependencies.map((dep) => normalizeBenfenObjectId(dep))\n      },\n      PublishTransaction\n    );\n  },\n  Upgrade({\n    modules,\n    dependencies,\n    packageId,\n    ticket\n  }) {\n    return create(\n      {\n        kind: \"Upgrade\",\n        modules: modules.map(\n          (module) => typeof module === \"string\" ? Array.from(fromB64(module)) : module\n        ),\n        dependencies: dependencies.map((dep) => normalizeBenfenObjectId(dep)),\n        packageId,\n        ticket\n      },\n      UpgradeTransaction\n    );\n  },\n  MakeMoveVec({\n    type,\n    objects\n  }) {\n    return create(\n      {\n        kind: \"MakeMoveVec\",\n        type: type ? { Some: TypeTagSerializer.parseFromStr(type) } : { None: null },\n        objects\n      },\n      MakeMoveVecTransaction\n    );\n  }\n};\nexport {\n  MakeMoveVecTransaction,\n  MergeCoinsTransaction,\n  MoveCallTransaction,\n  PublishTransaction,\n  SplitCoinsTransaction,\n  TransactionArgument,\n  TransactionBlockInput,\n  TransactionType,\n  Transactions,\n  TransferObjectsTransaction,\n  UpgradePolicy,\n  UpgradeTransaction,\n  getTransactionType\n};\n//# sourceMappingURL=Transactions.js.map\n","import {\n  array,\n  assert,\n  define,\n  integer,\n  is,\n  literal,\n  nullable,\n  object,\n  optional,\n  string,\n  union\n} from \"superstruct\";\nimport { bcs } from \"../bcs/index.js\";\nimport { toB58 } from \"../bcs/src/index.js\";\nimport { normalizeHexAddress } from \"../utils/bf-types.js\";\nimport { bfc2HexAddress } from \"../utils/format.js\";\nimport { hashTypedData } from \"./hash.js\";\nimport { BenfenObjectRef, BuilderCallArg, PureCallArg } from \"./Inputs.js\";\nimport { TransactionBlockInput, TransactionType } from \"./Transactions.js\";\nimport { create } from \"./utils.js\";\nconst TransactionExpiration = optional(\n  nullable(\n    union([object({ Epoch: integer() }), object({ None: union([literal(true), literal(null)]) })])\n  )\n);\nconst StringEncodedBigint = define(\"StringEncodedBigint\", (val) => {\n  if (![\"string\", \"number\", \"bigint\"].includes(typeof val))\n    return false;\n  try {\n    BigInt(val);\n    return true;\n  } catch {\n    return false;\n  }\n});\nconst GasConfig = object({\n  budget: optional(StringEncodedBigint),\n  price: optional(StringEncodedBigint),\n  payment: optional(array(BenfenObjectRef)),\n  owner: optional(string())\n});\nconst SerializedTransactionDataBuilder = object({\n  version: literal(1),\n  sender: optional(string()),\n  expiration: TransactionExpiration,\n  gasConfig: GasConfig,\n  inputs: array(TransactionBlockInput),\n  transactions: array(TransactionType)\n});\nfunction prepareHexAddress(address) {\n  let value = address;\n  if (/^bfc/i.test(address)) {\n    value = bfc2HexAddress(address);\n  }\n  return normalizeHexAddress(value).replace(\"0x\", \"\");\n}\nclass TransactionBlockDataBuilder {\n  constructor(clone) {\n    this.version = 1;\n    this.sender = clone?.sender;\n    this.expiration = clone?.expiration;\n    this.gasConfig = clone?.gasConfig ?? {};\n    this.inputs = clone?.inputs ?? [];\n    this.transactions = clone?.transactions ?? [];\n  }\n  static fromKindBytes(bytes) {\n    const kind = bcs.TransactionKind.parse(bytes);\n    const programmableTx = \"ProgrammableTransaction\" in kind ? kind.ProgrammableTransaction : null;\n    if (!programmableTx) {\n      throw new Error(\"Unable to deserialize from bytes.\");\n    }\n    const serialized = create(\n      {\n        version: 1,\n        gasConfig: {},\n        inputs: programmableTx.inputs.map(\n          (value, index) => create(\n            {\n              kind: \"Input\",\n              value,\n              index,\n              type: is(value, PureCallArg) ? \"pure\" : \"object\"\n            },\n            TransactionBlockInput\n          )\n        ),\n        transactions: programmableTx.transactions\n      },\n      SerializedTransactionDataBuilder\n    );\n    return TransactionBlockDataBuilder.restore(serialized);\n  }\n  static fromBytes(bytes) {\n    const rawData = bcs.TransactionData.parse(bytes);\n    const data = rawData?.V1;\n    const programmableTx = \"ProgrammableTransaction\" in data.kind ? data?.kind?.ProgrammableTransaction : null;\n    if (!data || !programmableTx) {\n      throw new Error(\"Unable to deserialize from bytes.\");\n    }\n    const serialized = create(\n      {\n        version: 1,\n        sender: data.sender,\n        expiration: data.expiration,\n        gasConfig: data.gasData,\n        inputs: programmableTx.inputs.map(\n          (value, index) => create(\n            {\n              kind: \"Input\",\n              value,\n              index,\n              type: is(value, PureCallArg) ? \"pure\" : \"object\"\n            },\n            TransactionBlockInput\n          )\n        ),\n        transactions: programmableTx.transactions\n      },\n      SerializedTransactionDataBuilder\n    );\n    return TransactionBlockDataBuilder.restore(serialized);\n  }\n  static restore(data) {\n    assert(data, SerializedTransactionDataBuilder);\n    const transactionData = new TransactionBlockDataBuilder();\n    Object.assign(transactionData, data);\n    return transactionData;\n  }\n  /**\n   * Generate transaction digest.\n   *\n   * @param bytes BCS serialized transaction data\n   * @returns transaction digest.\n   */\n  static getDigestFromBytes(bytes) {\n    const hash = hashTypedData(\"TransactionData\", bytes);\n    return toB58(hash);\n  }\n  build({\n    maxSizeBytes = Infinity,\n    overrides,\n    onlyTransactionKind\n  } = {}) {\n    const inputs = this.inputs.map((input) => {\n      assert(input.value, BuilderCallArg);\n      return input.value;\n    });\n    const kind = {\n      ProgrammableTransaction: {\n        inputs,\n        transactions: this.transactions\n      }\n    };\n    if (onlyTransactionKind) {\n      return bcs.TransactionKind.serialize(kind, { maxSize: maxSizeBytes }).toBytes();\n    }\n    const expiration = overrides?.expiration ?? this.expiration;\n    const sender = overrides?.sender ?? this.sender;\n    const gasConfig = { ...this.gasConfig, ...overrides?.gasConfig };\n    if (!sender) {\n      throw new Error(\"Missing transaction sender\");\n    }\n    if (!gasConfig.budget) {\n      throw new Error(\"Missing gas budget\");\n    }\n    if (!gasConfig.payment) {\n      throw new Error(\"Missing gas payment\");\n    }\n    if (!gasConfig.price) {\n      throw new Error(\"Missing gas price\");\n    }\n    const transactionData = {\n      sender: prepareHexAddress(sender),\n      expiration: expiration ? expiration : { None: true },\n      gasData: {\n        payment: gasConfig.payment,\n        owner: prepareHexAddress(this.gasConfig.owner ?? sender),\n        price: BigInt(gasConfig.price),\n        budget: BigInt(gasConfig.budget)\n      },\n      kind: {\n        ProgrammableTransaction: {\n          inputs,\n          transactions: this.transactions\n        }\n      }\n    };\n    return bcs.TransactionData.serialize(\n      { V1: transactionData },\n      { maxSize: maxSizeBytes }\n    ).toBytes();\n  }\n  getDigest() {\n    const bytes = this.build({ onlyTransactionKind: false });\n    return TransactionBlockDataBuilder.getDigestFromBytes(bytes);\n  }\n  snapshot() {\n    return create(this, SerializedTransactionDataBuilder);\n  }\n}\nexport {\n  SerializedTransactionDataBuilder,\n  TransactionBlockDataBuilder,\n  TransactionExpiration\n};\n//# sourceMappingURL=TransactionBlockData.js.map\n","var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\nvar _blockData, _input, input_fn, _normalizeTransactionArgument, normalizeTransactionArgument_fn, _getConfig, getConfig_fn, _validate, validate_fn, _prepareGasPayment, prepareGasPayment_fn, _prepareGasPrice, prepareGasPrice_fn, _prepareTransactions, prepareTransactions_fn, _prepare, prepare_fn;\nimport { is, mask } from \"superstruct\";\nimport { bcs, fromB64, isSerializedBcs } from \"../bcs/index.js\";\nimport { normalizeBenfenObjectId, normalizeHexAddress } from \"../utils/bf-types.js\";\nimport { hex2BfcAddress } from \"../utils/format.js\";\nimport { BFC_TYPE_ARG } from \"../utils/index.js\";\nimport {\n  BenfenObjectRef,\n  BuilderCallArg,\n  getIdFromCallArg,\n  Inputs,\n  isMutableSharedObjectInput,\n  ObjectCallArg,\n  PureCallArg\n} from \"./Inputs.js\";\nimport { createPure } from \"./pure.js\";\nimport { getPureSerializationType, isTxContext } from \"./serializer.js\";\nimport { TransactionBlockDataBuilder } from \"./TransactionBlockData.js\";\nimport { TransactionBlockInput, Transactions } from \"./Transactions.js\";\nimport { create, extractMutableReference, extractReference, extractStructTag } from \"./utils.js\";\nconst DefaultOfflineLimits = {\n  maxPureArgumentSize: 16 * 1024,\n  maxTxGas: 5e10,\n  maxGasObjects: 256,\n  maxTxSizeBytes: 128 * 1024\n};\nfunction createTransactionResult(index) {\n  const baseResult = { kind: \"Result\", index };\n  const nestedResults = [];\n  const nestedResultFor = (resultIndex) => nestedResults[resultIndex] ?? (nestedResults[resultIndex] = {\n    kind: \"NestedResult\",\n    index,\n    resultIndex\n  });\n  return new Proxy(baseResult, {\n    set() {\n      throw new Error(\n        \"The transaction result is a proxy, and does not support setting properties directly\"\n      );\n    },\n    // TODO: Instead of making this return a concrete argument, we should ideally\n    // make it reference-based (so that this gets resolved at build-time), which\n    // allows re-ordering transactions.\n    get(target, property) {\n      if (property in target) {\n        return Reflect.get(target, property);\n      }\n      if (property === Symbol.iterator) {\n        return function* () {\n          let i = 0;\n          while (true) {\n            yield nestedResultFor(i);\n            i++;\n          }\n        };\n      }\n      if (typeof property === \"symbol\")\n        return;\n      const resultIndex = parseInt(property, 10);\n      if (Number.isNaN(resultIndex) || resultIndex < 0)\n        return;\n      return nestedResultFor(resultIndex);\n    }\n  });\n}\nfunction isReceivingType(normalizedType) {\n  const tag = extractStructTag(normalizedType);\n  if (tag) {\n    return tag.Struct.address === \"0x2\" && tag.Struct.module === \"transfer\" && tag.Struct.name === \"Receiving\";\n  }\n  return false;\n}\nfunction expectClient(options) {\n  if (!options.client) {\n    throw new Error(\n      `No provider passed to Transaction#build, but transaction data was not sufficient to build offline.`\n    );\n  }\n  return options.client;\n}\nconst TRANSACTION_BRAND = Symbol.for(\"@benfen/transaction\");\nconst LIMITS = {\n  // The maximum gas that is allowed.\n  maxTxGas: \"max_tx_gas\",\n  // The maximum number of gas objects that can be selected for one transaction.\n  maxGasObjects: \"max_gas_payment_objects\",\n  // The maximum size (in bytes) that the transaction can be:\n  maxTxSizeBytes: \"max_tx_size_bytes\",\n  // The maximum size (in bytes) that pure arguments can be:\n  maxPureArgumentSize: \"max_pure_argument_size\"\n};\nconst GAS_SAFE_OVERHEAD = 10000n;\nconst DEFAULT_GAS_PRICE = 100n;\nconst MAX_OBJECTS_PER_FETCH = 50;\nconst chunk = (arr, size) => Array.from(\n  { length: Math.ceil(arr.length / size) },\n  (_, i) => arr.slice(i * size, i * size + size)\n);\nfunction isTransactionBlock(obj) {\n  return !!obj && typeof obj === \"object\" && obj[TRANSACTION_BRAND] === true;\n}\nconst _TransactionBlock = class {\n  constructor(transaction) {\n    /**\n     * Dynamically create a new input, which is separate from the `input`. This is important\n     * for generated clients to be able to define unique inputs that are non-overlapping with the\n     * defined inputs.\n     *\n     * For `Uint8Array` type automatically convert the input into a `Pure` CallArg, since this\n     * is the format required for custom serialization.\n     *\n     */\n    __privateAdd(this, _input);\n    __privateAdd(this, _normalizeTransactionArgument);\n    __privateAdd(this, _getConfig);\n    __privateAdd(this, _validate);\n    // The current default is just picking _all_ coins we can which may not be ideal.\n    __privateAdd(this, _prepareGasPayment);\n    __privateAdd(this, _prepareGasPrice);\n    __privateAdd(this, _prepareTransactions);\n    /**\n     * Prepare the transaction by valdiating the transaction data and resolving all inputs\n     * so that it can be built into bytes.\n     */\n    __privateAdd(this, _prepare);\n    __privateAdd(this, _blockData, void 0);\n    __privateSet(this, _blockData, new TransactionBlockDataBuilder(\n      transaction ? transaction.blockData : void 0\n    ));\n  }\n  /**\n   * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.\n   * Supports either a byte array, or base64-encoded bytes.\n   */\n  static fromKind(serialized) {\n    const tx = new _TransactionBlock();\n    __privateSet(tx, _blockData, TransactionBlockDataBuilder.fromKindBytes(\n      typeof serialized === \"string\" ? fromB64(serialized) : serialized\n    ));\n    return tx;\n  }\n  /**\n   * Converts from a serialized transaction format to a `Transaction` class.\n   * There are two supported serialized formats:\n   * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.\n   * - A byte array (or base64-encoded bytes) containing BCS transaction data.\n   */\n  static from(serialized) {\n    const tx = new _TransactionBlock();\n    if (typeof serialized !== \"string\" || !serialized.startsWith(\"{\")) {\n      __privateSet(tx, _blockData, TransactionBlockDataBuilder.fromBytes(\n        typeof serialized === \"string\" ? fromB64(serialized) : serialized\n      ));\n    } else {\n      __privateSet(tx, _blockData, TransactionBlockDataBuilder.restore(JSON.parse(serialized)));\n    }\n    return tx;\n  }\n  setSender(sender) {\n    __privateGet(this, _blockData).sender = sender;\n  }\n  /**\n   * Sets the sender only if it has not already been set.\n   * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.\n   */\n  setSenderIfNotSet(sender) {\n    if (!__privateGet(this, _blockData).sender) {\n      __privateGet(this, _blockData).sender = sender;\n    }\n  }\n  setExpiration(expiration) {\n    __privateGet(this, _blockData).expiration = expiration;\n  }\n  setGasPrice(price) {\n    __privateGet(this, _blockData).gasConfig.price = String(price);\n  }\n  setGasBudget(budget) {\n    __privateGet(this, _blockData).gasConfig.budget = String(budget);\n  }\n  setGasOwner(owner) {\n    __privateGet(this, _blockData).gasConfig.owner = owner;\n  }\n  setGasPayment(payments) {\n    __privateGet(this, _blockData).gasConfig.payment = payments.map((payment) => mask(payment, BenfenObjectRef));\n  }\n  /** Get a snapshot of the transaction data, in JSON form: */\n  get blockData() {\n    return __privateGet(this, _blockData).snapshot();\n  }\n  // Used to brand transaction classes so that they can be identified, even between multiple copies\n  // of the builder.\n  get [TRANSACTION_BRAND]() {\n    return true;\n  }\n  // Temporary workaround for the wallet interface accidentally serializing transaction blocks via postMessage\n  get pure() {\n    Object.defineProperty(this, \"pure\", {\n      enumerable: false,\n      value: createPure((value, type) => {\n        if (isSerializedBcs(value)) {\n          return __privateMethod(this, _input, input_fn).call(this, \"pure\", {\n            Pure: Array.from(value.toBytes())\n          });\n        }\n        return __privateMethod(this, _input, input_fn).call(this, \"pure\", value instanceof Uint8Array ? Inputs.Pure(value) : type ? Inputs.Pure(value, type) : value);\n      })\n    });\n    return this.pure;\n  }\n  /** Returns an argument for the gas coin, to be used in a transaction. */\n  get gas() {\n    return { kind: \"GasCoin\" };\n  }\n  /**\n   * Add a new object input to the transaction.\n   */\n  object(value) {\n    if (typeof value === \"object\" && \"kind\" in value) {\n      return value;\n    }\n    const id = getIdFromCallArg(value);\n    const inserted = __privateGet(this, _blockData).inputs.find(\n      (i) => i.type === \"object\" && id === getIdFromCallArg(i.value)\n    );\n    if (inserted && is(inserted.value, ObjectCallArg) && \"Shared\" in inserted.value.Object && is(value, ObjectCallArg) && \"Shared\" in value.Object) {\n      inserted.value.Object.Shared.mutable = inserted.value.Object.Shared.mutable || value.Object.Shared.mutable;\n    }\n    return inserted ?? __privateMethod(this, _input, input_fn).call(this, \"object\", typeof value === \"string\" ? normalizeHexAddress(value) : value);\n  }\n  /**\n   * Add a new object input to the transaction using the fully-resolved object reference.\n   * If you only have an object ID, use `builder.object(id)` instead.\n   */\n  objectRef(...args) {\n    return this.object(Inputs.ObjectRef(...args));\n  }\n  /**\n   * Add a new receiving input to the transaction using the fully-resolved object reference.\n   * If you only have an object ID, use `builder.object(id)` instead.\n   */\n  receivingRef(...args) {\n    return this.object(Inputs.ReceivingRef(...args));\n  }\n  /**\n   * Add a new shared object input to the transaction using the fully-resolved shared object reference.\n   * If you only have an object ID, use `builder.object(id)` instead.\n   */\n  sharedObjectRef(...args) {\n    return this.object(Inputs.SharedObjectRef(...args));\n  }\n  /** Add a transaction to the transaction block. */\n  add(transaction) {\n    const index = __privateGet(this, _blockData).transactions.push(transaction);\n    return createTransactionResult(index - 1);\n  }\n  // Method shorthands:\n  splitCoins(coin, amounts) {\n    return this.add(\n      Transactions.SplitCoins(\n        typeof coin === \"string\" ? this.object(coin) : coin,\n        amounts.map(\n          (amount) => typeof amount === \"number\" || typeof amount === \"bigint\" || typeof amount === \"string\" ? this.pure.u64(amount) : __privateMethod(this, _normalizeTransactionArgument, normalizeTransactionArgument_fn).call(this, amount)\n        )\n      )\n    );\n  }\n  mergeCoins(destination, sources) {\n    return this.add(\n      Transactions.MergeCoins(\n        typeof destination === \"string\" ? this.object(destination) : destination,\n        sources.map((src) => typeof src === \"string\" ? this.object(src) : src)\n      )\n    );\n  }\n  publish({ modules, dependencies }) {\n    return this.add(\n      Transactions.Publish({\n        modules,\n        dependencies\n      })\n    );\n  }\n  upgrade({\n    modules,\n    dependencies,\n    packageId,\n    ticket\n  }) {\n    return this.add(\n      Transactions.Upgrade({\n        modules,\n        dependencies,\n        packageId,\n        ticket: typeof ticket === \"string\" ? this.object(ticket) : ticket\n      })\n    );\n  }\n  moveCall({\n    arguments: args,\n    typeArguments,\n    target\n  }) {\n    return this.add(\n      Transactions.MoveCall({\n        arguments: args?.map((arg) => __privateMethod(this, _normalizeTransactionArgument, normalizeTransactionArgument_fn).call(this, arg)),\n        typeArguments,\n        target\n      })\n    );\n  }\n  transferObjects(objects, address) {\n    return this.add(\n      Transactions.TransferObjects(\n        objects.map((obj) => typeof obj === \"string\" ? this.object(obj) : obj),\n        typeof address === \"string\" ? this.pure.address(address) : __privateMethod(this, _normalizeTransactionArgument, normalizeTransactionArgument_fn).call(this, address)\n      )\n    );\n  }\n  makeMoveVec({\n    type,\n    objects\n  }) {\n    return this.add(\n      Transactions.MakeMoveVec({\n        type,\n        objects: objects.map((obj) => typeof obj === \"string\" ? this.object(obj) : obj)\n      })\n    );\n  }\n  /**\n   * Serialize the transaction to a string so that it can be sent to a separate context.\n   * This is different from `build` in that it does not serialize to BCS bytes, and instead\n   * uses a separate format that is unique to the transaction builder. This allows\n   * us to serialize partially-complete transactions, that can then be completed and\n   * built in a separate context.\n   *\n   * For example, a dapp can construct a transaction, but not provide gas objects\n   * or a gas budget. The transaction then can be sent to the wallet, where this\n   * information is automatically filled in (e.g. by querying for coin objects\n   * and performing a dry run).\n   */\n  serialize() {\n    return JSON.stringify(__privateGet(this, _blockData).snapshot());\n  }\n  /** Build the transaction to BCS bytes, and sign it with the provided keypair. */\n  async sign(options) {\n    const { signer, ...buildOptions } = options;\n    const bytes = await this.build(buildOptions);\n    return signer.signTransactionBlock(bytes);\n  }\n  /** Build the transaction to BCS bytes. */\n  async build(options = {}) {\n    await __privateMethod(this, _prepare, prepare_fn).call(this, options);\n    return __privateGet(this, _blockData).build({\n      maxSizeBytes: __privateMethod(this, _getConfig, getConfig_fn).call(this, \"maxTxSizeBytes\", options),\n      onlyTransactionKind: options.onlyTransactionKind\n    });\n  }\n  /** Derive transaction digest */\n  async getDigest(options = {}) {\n    await __privateMethod(this, _prepare, prepare_fn).call(this, options);\n    return __privateGet(this, _blockData).getDigest();\n  }\n};\nlet TransactionBlock = _TransactionBlock;\n_blockData = new WeakMap();\n_input = new WeakSet();\ninput_fn = function(type, value) {\n  const index = __privateGet(this, _blockData).inputs.length;\n  const input = create(\n    {\n      kind: \"Input\",\n      // bigints can't be serialized to JSON, so just string-convert them here:\n      value: typeof value === \"bigint\" ? String(value) : value,\n      index,\n      type\n    },\n    TransactionBlockInput\n  );\n  __privateGet(this, _blockData).inputs.push(input);\n  return input;\n};\n_normalizeTransactionArgument = new WeakSet();\nnormalizeTransactionArgument_fn = function(arg) {\n  if (isSerializedBcs(arg)) {\n    return this.pure(arg);\n  }\n  return arg;\n};\n_getConfig = new WeakSet();\ngetConfig_fn = function(key, { protocolConfig, limits }) {\n  if (limits && typeof limits[key] === \"number\") {\n    return limits[key];\n  }\n  if (!protocolConfig) {\n    return DefaultOfflineLimits[key];\n  }\n  const attribute = protocolConfig?.attributes[LIMITS[key]];\n  if (!attribute) {\n    throw new Error(`Missing expected protocol config: \"${LIMITS[key]}\"`);\n  }\n  const value = \"u64\" in attribute ? attribute.u64 : \"u32\" in attribute ? attribute.u32 : attribute.f64;\n  if (!value) {\n    throw new Error(`Unexpected protocol config value found for: \"${LIMITS[key]}\"`);\n  }\n  return Number(value);\n};\n_validate = new WeakSet();\nvalidate_fn = function(options) {\n  const maxPureArgumentSize = __privateMethod(this, _getConfig, getConfig_fn).call(this, \"maxPureArgumentSize\", options);\n  __privateGet(this, _blockData).inputs.forEach((input, index) => {\n    if (is(input.value, PureCallArg)) {\n      if (input.value.Pure.length > maxPureArgumentSize) {\n        throw new Error(\n          `Input at index ${index} is too large, max pure input size is ${maxPureArgumentSize} bytes, got ${input.value.Pure.length} bytes`\n        );\n      }\n    }\n  });\n};\n_prepareGasPayment = new WeakSet();\nprepareGasPayment_fn = async function(options) {\n  const maxGasObjects = __privateMethod(this, _getConfig, getConfig_fn).call(this, \"maxGasObjects\", options);\n  if (__privateGet(this, _blockData).gasConfig.payment) {\n    if (__privateGet(this, _blockData).gasConfig.payment.length > maxGasObjects) {\n      throw new Error(`Payment objects exceed maximum amount: ${maxGasObjects}`);\n    }\n  }\n  if (options.onlyTransactionKind || __privateGet(this, _blockData).gasConfig.payment) {\n    return;\n  }\n  const gasOwner = __privateGet(this, _blockData).gasConfig.owner ?? __privateGet(this, _blockData).sender;\n  const bfcCoins = await expectClient(options).getCoins({\n    owner: gasOwner,\n    coinType: BFC_TYPE_ARG,\n    limit: maxGasObjects\n  });\n  const paymentCoins = bfcCoins.data.filter((coin) => {\n    const matchingInput = __privateGet(this, _blockData).inputs.find((input) => {\n      if (is(input.value, BuilderCallArg) && \"Object\" in input.value && \"ImmOrOwned\" in input.value.Object) {\n        return hex2BfcAddress(coin.coinObjectId) === hex2BfcAddress(input.value.Object.ImmOrOwned.objectId);\n      }\n      return false;\n    });\n    return !matchingInput;\n  }).slice(0, maxGasObjects - 1).map((coin) => ({\n    objectId: coin.coinObjectId,\n    digest: coin.digest,\n    version: coin.version\n  }));\n  if (!paymentCoins.length) {\n    throw new Error(\"No valid gas coins found for the transaction.\");\n  }\n  this.setGasPayment(paymentCoins);\n};\n_prepareGasPrice = new WeakSet();\nprepareGasPrice_fn = async function(options) {\n  if (options.onlyTransactionKind || __privateGet(this, _blockData).gasConfig.price) {\n    return;\n  }\n  this.setGasPrice(await expectClient(options).getReferenceGasPrice());\n};\n_prepareTransactions = new WeakSet();\nprepareTransactions_fn = async function(options) {\n  const { inputs, transactions } = __privateGet(this, _blockData);\n  const moveModulesToResolve = [];\n  const objectsToResolve = [];\n  inputs.forEach((input) => {\n    if (input.type === \"object\" && typeof input.value === \"string\") {\n      objectsToResolve.push({ id: normalizeHexAddress(input.value), input });\n      return;\n    }\n  });\n  transactions.forEach((transaction) => {\n    if (transaction.kind === \"MoveCall\") {\n      const needsResolution = transaction.arguments.some(\n        (arg) => arg.kind === \"Input\" && !is(inputs[arg.index].value, BuilderCallArg)\n      );\n      if (needsResolution) {\n        moveModulesToResolve.push(transaction);\n      }\n    }\n    if (transaction.kind === \"SplitCoins\") {\n      transaction.amounts.forEach((amount) => {\n        if (amount.kind === \"Input\") {\n          const input = inputs[amount.index];\n          if (typeof input.value !== \"object\") {\n            input.value = Inputs.Pure(bcs.U64.serialize(input.value));\n          }\n        }\n      });\n    }\n    if (transaction.kind === \"TransferObjects\") {\n      if (transaction.address.kind === \"Input\") {\n        const input = inputs[transaction.address.index];\n        if (typeof input.value !== \"object\") {\n          input.value = Inputs.Pure(bcs.Address.serialize(input.value));\n        }\n      }\n    }\n  });\n  if (moveModulesToResolve.length) {\n    await Promise.all(\n      moveModulesToResolve.map(async (moveCall) => {\n        const [packageId, moduleName, functionName] = moveCall.target.split(\"::\");\n        const normalized = await expectClient(options).getNormalizedMoveFunction({\n          package: normalizeBenfenObjectId(packageId),\n          module: moduleName,\n          function: functionName\n        });\n        const lastIndex = normalized.parameters.length - 1;\n        const hasTxContext = normalized.parameters.length > 0 && isTxContext(normalized.parameters[lastIndex]);\n        const params = hasTxContext ? normalized.parameters.slice(0, lastIndex) : normalized.parameters;\n        if (params.length !== moveCall.arguments.length) {\n          throw new Error(\"Incorrect number of arguments.\");\n        }\n        params.forEach((param, i) => {\n          const arg = moveCall.arguments[i];\n          if (arg.kind !== \"Input\")\n            return;\n          const input = inputs[arg.index];\n          if (is(input.value, BuilderCallArg))\n            return;\n          let inputValue = input.value;\n          const serType = getPureSerializationType(param, inputValue);\n          if (serType) {\n            input.value = Inputs.Pure(inputValue, serType);\n            return;\n          }\n          const structVal = extractStructTag(param);\n          if (structVal != null || typeof param === \"object\" && \"TypeParameter\" in param) {\n            if (typeof inputValue !== \"string\") {\n              throw new Error(\n                `Expect the argument to be an object id string, got ${JSON.stringify(\n                  inputValue,\n                  null,\n                  2\n                )}`\n              );\n            }\n            objectsToResolve.push({\n              id: inputValue,\n              input,\n              normalizedType: param\n            });\n            return;\n          }\n          throw new Error(\n            `Unknown call arg type ${JSON.stringify(param, null, 2)} for value ${JSON.stringify(\n              inputValue,\n              null,\n              2\n            )}`\n          );\n        });\n      })\n    );\n  }\n  if (objectsToResolve.length) {\n    const dedupedIds = [...new Set(objectsToResolve.map(({ id }) => id))];\n    const objectChunks = chunk(dedupedIds, MAX_OBJECTS_PER_FETCH);\n    const objects = (await Promise.all(\n      objectChunks.map(\n        (chunk2) => expectClient(options).multiGetObjects({\n          ids: chunk2,\n          options: { showOwner: true }\n        })\n      )\n    )).flat();\n    let objectsById = new Map(\n      dedupedIds.map((id, index) => {\n        return [id, objects[index]];\n      })\n    );\n    const invalidObjects = Array.from(objectsById).filter(([_, obj]) => obj.error).map(([id, _]) => id);\n    if (invalidObjects.length) {\n      throw new Error(`The following input objects are invalid: ${invalidObjects.join(\", \")}`);\n    }\n    objectsToResolve.forEach(({ id, input, normalizedType }) => {\n      const object = objectsById.get(id);\n      const owner = object.data?.owner;\n      const initialSharedVersion = owner && typeof owner === \"object\" && \"Shared\" in owner ? owner.Shared.initial_shared_version : void 0;\n      if (initialSharedVersion) {\n        const isByValue = normalizedType != null && extractMutableReference(normalizedType) == null && extractReference(normalizedType) == null;\n        const mutable = isMutableSharedObjectInput(input.value) || isByValue || normalizedType != null && extractMutableReference(normalizedType) != null;\n        input.value = Inputs.SharedObjectRef({\n          objectId: id,\n          initialSharedVersion,\n          mutable\n        });\n      } else if (normalizedType && isReceivingType(normalizedType)) {\n        input.value = Inputs.ReceivingRef(object.data);\n      } else {\n        input.value = Inputs.ObjectRef(object.data);\n      }\n    });\n  }\n};\n_prepare = new WeakSet();\nprepare_fn = async function(options) {\n  if (!options.onlyTransactionKind && !__privateGet(this, _blockData).sender) {\n    throw new Error(\"Missing transaction sender\");\n  }\n  if (!options.protocolConfig && !options.limits && options.client) {\n    options.protocolConfig = await options.client.getProtocolConfig();\n  }\n  await Promise.all([__privateMethod(this, _prepareGasPrice, prepareGasPrice_fn).call(this, options), __privateMethod(this, _prepareTransactions, prepareTransactions_fn).call(this, options)]);\n  if (!options.onlyTransactionKind) {\n    await __privateMethod(this, _prepareGasPayment, prepareGasPayment_fn).call(this, options);\n    if (!__privateGet(this, _blockData).gasConfig.budget) {\n      const client = expectClient(options);\n      const dryRunResult = await client.dryRunTransactionBlock({\n        transactionBlock: __privateGet(this, _blockData).build({\n          maxSizeBytes: __privateMethod(this, _getConfig, getConfig_fn).call(this, \"maxTxSizeBytes\", options),\n          overrides: {\n            gasConfig: {\n              budget: String(__privateMethod(this, _getConfig, getConfig_fn).call(this, \"maxTxGas\", options)),\n              payment: []\n            }\n          }\n        })\n      });\n      if (dryRunResult.effects.status.status !== \"success\") {\n        throw new Error(\n          `Dry run failed, could not automatically determine a budget: ${dryRunResult.effects.status.error}`,\n          { cause: dryRunResult }\n        );\n      }\n      const safeOverhead = GAS_SAFE_OVERHEAD * BigInt(DEFAULT_GAS_PRICE);\n      const baseComputationCostWithOverhead = BigInt(dryRunResult.effects.gasUsed.computationCost) + safeOverhead;\n      const gasBudget = baseComputationCostWithOverhead + BigInt(dryRunResult.effects.gasUsed.storageCost);\n      this.setGasBudget(gasBudget);\n    }\n  }\n  __privateMethod(this, _validate, validate_fn).call(this, options);\n};\nexport {\n  DEFAULT_GAS_PRICE,\n  GAS_SAFE_OVERHEAD,\n  TransactionBlock,\n  isTransactionBlock\n};\n//# sourceMappingURL=TransactionBlock.js.map\n","import { bytesToHex, hexToBytes } from \"@noble/hashes/utils\";\nimport BigNumber from \"bignumber.js\";\nimport { fromB58, splitGenericParameters } from \"../bcs/src/index.js\";\nimport { bfc2HexAddress } from \"./format.js\";\nconst TX_DIGEST_LENGTH = 32;\nfunction isValidTransactionDigest(value) {\n  try {\n    const buffer = fromB58(value);\n    return buffer.length === TX_DIGEST_LENGTH;\n  } catch (e) {\n    return false;\n  }\n}\nconst BENFEN_ADDRESS_LENGTH = 32;\nfunction isValidBenfenAddress(value) {\n  let address = value;\n  if (/^bfc/i.test(value)) {\n    address = value.slice(3, -4);\n  }\n  return isHex(address) && getHexByteLength(address) === BENFEN_ADDRESS_LENGTH;\n}\nfunction isValidBenfenObjectId(value) {\n  return isValidBenfenAddress(value);\n}\nfunction parseTypeTag(type) {\n  if (!type.includes(\"::\"))\n    return type;\n  return parseStructTag(type);\n}\nfunction parseStructTag(type) {\n  const [address, module] = type.split(\"::\");\n  const rest = type.slice(address.length + module.length + 4);\n  const name = rest.includes(\"<\") ? rest.slice(0, rest.indexOf(\"<\")) : rest;\n  const typeParams = rest.includes(\"<\") ? splitGenericParameters(rest.slice(rest.indexOf(\"<\") + 1, rest.lastIndexOf(\">\"))).map(\n    (typeParam) => parseTypeTag(typeParam.trim())\n  ) : [];\n  return {\n    address: normalizeHexAddress(address),\n    module,\n    name,\n    typeParams\n  };\n}\nfunction normalizeStructTag(type) {\n  const { address, module, name, typeParams } = typeof type === \"string\" ? parseStructTag(type) : type;\n  const formattedTypeParams = typeParams?.length > 0 ? `<${typeParams.map(\n    (typeParam) => typeof typeParam === \"string\" ? typeParam : normalizeStructTag(typeParam)\n  ).join(\",\")}>` : \"\";\n  return `${address}::${module}::${name}${formattedTypeParams}`;\n}\nfunction normalizeHexAddress(value, forceAdd0x = false) {\n  let address = value.toLowerCase();\n  if (/^bfc/i.test(value)) {\n    address = bfc2HexAddress(value);\n  }\n  if (!forceAdd0x && address.startsWith(\"0x\")) {\n    address = address.slice(2);\n  }\n  return `0x${address.padStart(BENFEN_ADDRESS_LENGTH * 2, \"0\")}`;\n}\nfunction normalizeBenfenObjectId(value, forceAdd0x = false) {\n  return normalizeHexAddress(value, forceAdd0x);\n}\nfunction isHex(value) {\n  return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\n}\nfunction getHexByteLength(value) {\n  return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\n}\nfunction humanReadableToBfcDigits(amount) {\n  return BigInt(new BigNumber(amount).shiftedBy(9).integerValue().toString(10));\n}\nfunction bfcDigitsToHumanReadable(amount) {\n  return new BigNumber(amount).shiftedBy(-9).toString(10);\n}\nfunction hexToString(hex) {\n  return new TextDecoder().decode(hexToBytes((hex || \"\").replace(/^0x/, \"\")));\n}\nfunction strToHex(str) {\n  return `0x${bytesToHex(new TextEncoder().encode(str || \"\"))}`;\n}\nexport {\n  BENFEN_ADDRESS_LENGTH,\n  bfcDigitsToHumanReadable,\n  hexToString,\n  humanReadableToBfcDigits,\n  isValidBenfenAddress,\n  isValidBenfenObjectId,\n  isValidTransactionDigest,\n  normalizeBenfenObjectId,\n  normalizeHexAddress,\n  normalizeStructTag,\n  parseStructTag,\n  strToHex\n};\n//# sourceMappingURL=bf-types.js.map\n","import sha256 from \"fast-sha256\";\nimport { toHEX } from \"../bcs/src/index.js\";\nconst ELLIPSIS = \"\\u2026\";\nfunction hex2BfcAddress(hexAddress) {\n  if (/^BFC/i.test(hexAddress)) {\n    return hexAddress;\n  }\n  const hex = hexAddress.replace(/^0x/, \"\").padStart(64, \"0\").toLowerCase();\n  const hash = toHEX(sha256(new TextEncoder().encode(hex)));\n  return `BFC${hex}${hash.slice(0, 4)}`;\n}\nfunction bfc2HexAddress(bfcAddress) {\n  if (bfcAddress.startsWith(\"0x\") || !/^BFC/i.test(bfcAddress)) {\n    return bfcAddress;\n  }\n  return `0x${bfcAddress.slice(3, -4)}`;\n}\nfunction formatAddress(address) {\n  let text = address;\n  if (!/^BFC/i.test(address)) {\n    text = hex2BfcAddress(address);\n  }\n  return `${text.slice(0, 4)}${ELLIPSIS}${text.slice(-4)}`;\n}\nfunction formatDigest(digest) {\n  return `${digest.slice(0, 10)}${ELLIPSIS}`;\n}\nexport {\n  bfc2HexAddress,\n  formatAddress,\n  formatDigest,\n  hex2BfcAddress\n};\n//# sourceMappingURL=format.js.map\n","import {\n  BENFEN_ADDRESS_LENGTH,\n  bfcDigitsToHumanReadable,\n  hexToString,\n  humanReadableToBfcDigits,\n  isValidBenfenAddress,\n  isValidBenfenObjectId,\n  isValidTransactionDigest,\n  normalizeBenfenObjectId,\n  normalizeHexAddress,\n  normalizeStructTag,\n  parseStructTag,\n  strToHex\n} from \"./bf-types.js\";\nimport { bfc2HexAddress, formatAddress, formatDigest, hex2BfcAddress } from \"./format.js\";\nimport { fromB64, toB64, fromHEX, toHEX } from \"../bcs/src/index.js\";\nimport { is, assert } from \"superstruct\";\nimport { isValidBenfenNSName, normalizeBenfenNSName } from \"./benfenns.js\";\nconst BFC_DECIMALS = 9;\nconst MIST_PER_BFC = BigInt(1e9);\nconst MOVE_STDLIB_ADDRESS = \"0x1\";\nconst BENFEN_FRAMEWORK_ADDRESS = \"0x2\";\nconst BENFEN_SYSTEM_ADDRESS = \"0x3\";\nconst BENFEN_CLOCK_OBJECT_ID = normalizeBenfenObjectId(\"0x6\");\nconst BFC_SYSTEM_MODULE_NAME = \"bfc_system\";\nconst BFC_TYPE_ARG = `${BENFEN_FRAMEWORK_ADDRESS}::bfc::BFC`;\nconst BFC_SYSTEM_STATE_OBJECT_ID = hex2BfcAddress(\"0x5\");\nexport {\n  BENFEN_ADDRESS_LENGTH,\n  BENFEN_CLOCK_OBJECT_ID,\n  BENFEN_FRAMEWORK_ADDRESS,\n  BENFEN_SYSTEM_ADDRESS,\n  BFC_DECIMALS,\n  BFC_SYSTEM_MODULE_NAME,\n  BFC_SYSTEM_STATE_OBJECT_ID,\n  BFC_TYPE_ARG,\n  MIST_PER_BFC,\n  MOVE_STDLIB_ADDRESS,\n  assert,\n  bfc2HexAddress,\n  bfcDigitsToHumanReadable,\n  formatAddress,\n  formatDigest,\n  fromB64,\n  fromHEX,\n  hex2BfcAddress,\n  hexToString,\n  humanReadableToBfcDigits,\n  is,\n  isValidBenfenAddress,\n  isValidBenfenNSName,\n  isValidBenfenObjectId,\n  isValidTransactionDigest,\n  normalizeBenfenNSName,\n  normalizeBenfenObjectId,\n  normalizeHexAddress,\n  normalizeStructTag,\n  parseStructTag,\n  strToHex,\n  toB64,\n  toHEX\n};\n//# sourceMappingURL=index.js.map\n","var AppId = /* @__PURE__ */ ((AppId2) => {\n  AppId2[AppId2[\"Benfen\"] = 0] = \"Benfen\";\n  return AppId2;\n})(AppId || {});\nvar IntentVersion = /* @__PURE__ */ ((IntentVersion2) => {\n  IntentVersion2[IntentVersion2[\"V0\"] = 0] = \"V0\";\n  return IntentVersion2;\n})(IntentVersion || {});\nvar IntentScope = /* @__PURE__ */ ((IntentScope2) => {\n  IntentScope2[IntentScope2[\"TransactionData\"] = 0] = \"TransactionData\";\n  IntentScope2[IntentScope2[\"TransactionEffects\"] = 1] = \"TransactionEffects\";\n  IntentScope2[IntentScope2[\"CheckpointSummary\"] = 2] = \"CheckpointSummary\";\n  IntentScope2[IntentScope2[\"PersonalMessage\"] = 3] = \"PersonalMessage\";\n  return IntentScope2;\n})(IntentScope || {});\nfunction intentWithScope(scope) {\n  return [scope, 0 /* V0 */, 0 /* Benfen */];\n}\nfunction messageWithIntent(scope, message) {\n  const intent = intentWithScope(scope);\n  const intentMessage = new Uint8Array(intent.length + message.length);\n  intentMessage.set(intent);\n  intentMessage.set(message, intent.length);\n  return intentMessage;\n}\nexport {\n  AppId,\n  IntentScope,\n  IntentVersion,\n  messageWithIntent\n};\n//# sourceMappingURL=intent.js.map\n","import { blake2b } from \"@noble/hashes/blake2b\";\nimport { bytesToHex } from \"@noble/hashes/utils\";\nimport { bcs } from \"../bcs/index.js\";\nimport { toB64 } from \"../bcs/src/index.js\";\nimport { BENFEN_ADDRESS_LENGTH, normalizeHexAddress } from \"../utils/bf-types.js\";\nimport { IntentScope, messageWithIntent } from \"./intent.js\";\nfunction bytesEqual(a, b) {\n  if (a === b)\n    return true;\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nclass PublicKey {\n  /**\n   * Checks if two public keys are equal\n   */\n  equals(publicKey) {\n    return bytesEqual(this.toRawBytes(), publicKey.toRawBytes());\n  }\n  /**\n   * Return the base-64 representation of the public key\n   */\n  toBase64() {\n    return toB64(this.toRawBytes());\n  }\n  toString() {\n    throw new Error(\n      \"`toString` is not implemented on public keys. Use `toBase64()` or `toRawBytes()` instead.\"\n    );\n  }\n  /**\n   * Return the Benfen representation of the public key encoded in\n   * base-64. A Benfen public key is formed by the concatenation\n   * of the scheme flag with the raw bytes of the public key\n   */\n  toBenfenPublicKey() {\n    const bytes = this.toBenfenBytes();\n    return toB64(bytes);\n  }\n  verifyWithIntent(bytes, signature, intent) {\n    const intentMessage = messageWithIntent(intent, bytes);\n    const digest = blake2b(intentMessage, { dkLen: 32 });\n    return this.verify(digest, signature);\n  }\n  /**\n   * Verifies that the signature is valid for for the provided PersonalMessage\n   */\n  verifyPersonalMessage(message, signature) {\n    return this.verifyWithIntent(\n      bcs.vector(bcs.u8()).serialize(message).toBytes(),\n      signature,\n      IntentScope.PersonalMessage\n    );\n  }\n  /**\n   * Verifies that the signature is valid for for the provided TransactionBlock\n   */\n  verifyTransactionBlock(transactionBlock, signature) {\n    return this.verifyWithIntent(transactionBlock, signature, IntentScope.TransactionData);\n  }\n  /**\n   * Returns the bytes representation of the public key\n   * prefixed with the signature scheme flag\n   */\n  toBenfenBytes() {\n    const rawBytes = this.toRawBytes();\n    const benfenBytes = new Uint8Array(rawBytes.length + 1);\n    benfenBytes.set([this.flag()]);\n    benfenBytes.set(rawBytes, 1);\n    return benfenBytes;\n  }\n  /**\n   * Return the Benfen address associated with this Ed25519 public key\n   */\n  toHexAddress() {\n    return normalizeHexAddress(\n      bytesToHex(blake2b(this.toBenfenBytes(), { dkLen: 32 })).slice(0, BENFEN_ADDRESS_LENGTH * 2)\n    );\n  }\n}\nexport {\n  PublicKey,\n  bytesEqual\n};\n//# sourceMappingURL=publickey.js.map\n","const SIGNATURE_SCHEME_TO_FLAG = {\n  ED25519: 0,\n  Secp256k1: 1,\n  Secp256r1: 2,\n  MultiSig: 3,\n  ZkLogin: 5\n};\nconst SIGNATURE_SCHEME_TO_SIZE = {\n  ED25519: 32,\n  Secp256k1: 33,\n  Secp256r1: 33\n};\nconst SIGNATURE_FLAG_TO_SCHEME = {\n  0: \"ED25519\",\n  1: \"Secp256k1\",\n  2: \"Secp256r1\",\n  3: \"MultiSig\",\n  5: \"ZkLogin\"\n};\nexport {\n  SIGNATURE_FLAG_TO_SCHEME,\n  SIGNATURE_SCHEME_TO_FLAG,\n  SIGNATURE_SCHEME_TO_SIZE\n};\n//# sourceMappingURL=signature-scheme.js.map\n","function base64UrlCharTo6Bits(base64UrlChar) {\n  if (base64UrlChar.length !== 1) {\n    throw new Error(\"Invalid base64Url character: \" + base64UrlChar);\n  }\n  const base64UrlCharacterSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n  const index = base64UrlCharacterSet.indexOf(base64UrlChar);\n  if (index === -1) {\n    throw new Error(\"Invalid base64Url character: \" + base64UrlChar);\n  }\n  const binaryString = index.toString(2).padStart(6, \"0\");\n  const bits = Array.from(binaryString).map(Number);\n  return bits;\n}\nfunction base64UrlStringToBitVector(base64UrlString) {\n  let bitVector = [];\n  for (let i = 0; i < base64UrlString.length; i++) {\n    const base64UrlChar = base64UrlString.charAt(i);\n    const bits = base64UrlCharTo6Bits(base64UrlChar);\n    bitVector = bitVector.concat(bits);\n  }\n  return bitVector;\n}\nfunction decodeBase64URL(s, i) {\n  if (s.length < 2) {\n    throw new Error(`Input (s = ${s}) is not tightly packed because s.length < 2`);\n  }\n  let bits = base64UrlStringToBitVector(s);\n  const firstCharOffset = i % 4;\n  if (firstCharOffset === 0) {\n  } else if (firstCharOffset === 1) {\n    bits = bits.slice(2);\n  } else if (firstCharOffset === 2) {\n    bits = bits.slice(4);\n  } else {\n    throw new Error(`Input (s = ${s}) is not tightly packed because i%4 = 3 (i = ${i}))`);\n  }\n  const lastCharOffset = (i + s.length - 1) % 4;\n  if (lastCharOffset === 3) {\n  } else if (lastCharOffset === 2) {\n    bits = bits.slice(0, bits.length - 2);\n  } else if (lastCharOffset === 1) {\n    bits = bits.slice(0, bits.length - 4);\n  } else {\n    throw new Error(\n      `Input (s = ${s}) is not tightly packed because (i + s.length - 1)%4 = 0 (i = ${i}))`\n    );\n  }\n  if (bits.length % 8 !== 0) {\n    throw new Error(`We should never reach here...`);\n  }\n  const bytes = new Uint8Array(Math.floor(bits.length / 8));\n  let currentByteIndex = 0;\n  for (let i2 = 0; i2 < bits.length; i2 += 8) {\n    const bitChunk = bits.slice(i2, i2 + 8);\n    const byte = parseInt(bitChunk.join(\"\"), 2);\n    bytes[currentByteIndex++] = byte;\n  }\n  return new TextDecoder().decode(bytes);\n}\nfunction verifyExtendedClaim(claim) {\n  if (!(claim.slice(-1) === \"}\" || claim.slice(-1) === \",\")) {\n    throw new Error(\"Invalid claim\");\n  }\n  const json = JSON.parse(\"{\" + claim.slice(0, -1) + \"}\");\n  if (Object.keys(json).length !== 1) {\n    throw new Error(\"Invalid claim\");\n  }\n  const key = Object.keys(json)[0];\n  return [key, json[key]];\n}\nfunction extractClaimValue(claim, claimName) {\n  const extendedClaim = decodeBase64URL(claim.value, claim.indexMod4);\n  const [name, value] = verifyExtendedClaim(extendedClaim);\n  if (name !== claimName) {\n    throw new Error(`Invalid field name: found ${name} expected ${claimName}`);\n  }\n  return value;\n}\nexport {\n  extractClaimValue\n};\n//# sourceMappingURL=jwt-utils.js.map\n","import { bcs } from \"../../bcs/index.js\";\nconst zkLoginSignature = bcs.struct(\"ZkLoginSignature\", {\n  inputs: bcs.struct(\"ZkLoginSignatureInputs\", {\n    proofPoints: bcs.struct(\"ZkLoginSignatureInputsProofPoints\", {\n      a: bcs.vector(bcs.string()),\n      b: bcs.vector(bcs.vector(bcs.string())),\n      c: bcs.vector(bcs.string())\n    }),\n    issBase64Details: bcs.struct(\"ZkLoginSignatureInputsClaim\", {\n      value: bcs.string(),\n      indexMod4: bcs.u8()\n    }),\n    headerBase64: bcs.string(),\n    addressSeed: bcs.string()\n  }),\n  maxEpoch: bcs.u64(),\n  userSignature: bcs.vector(bcs.u8())\n});\nexport {\n  zkLoginSignature\n};\n//# sourceMappingURL=bcs.js.map\n","import { fromB64, toB64 } from \"../../bcs/index.js\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../../cryptography/signature-scheme.js\";\nimport { zkLoginSignature } from \"./bcs.js\";\nfunction getZkLoginSignatureBytes({ inputs, maxEpoch, userSignature }) {\n  return zkLoginSignature.serialize(\n    {\n      inputs,\n      maxEpoch,\n      userSignature: typeof userSignature === \"string\" ? fromB64(userSignature) : userSignature\n    },\n    { maxSize: 2048 }\n  ).toBytes();\n}\nfunction getZkLoginSignature({ inputs, maxEpoch, userSignature }) {\n  const bytes = getZkLoginSignatureBytes({ inputs, maxEpoch, userSignature });\n  const signatureBytes = new Uint8Array(bytes.length + 1);\n  signatureBytes.set([SIGNATURE_SCHEME_TO_FLAG.ZkLogin]);\n  signatureBytes.set(bytes, 1);\n  return toB64(signatureBytes);\n}\nfunction parseZkLoginSignature(signature) {\n  return zkLoginSignature.parse(typeof signature === \"string\" ? fromB64(signature) : signature);\n}\nexport {\n  getZkLoginSignature,\n  parseZkLoginSignature\n};\n//# sourceMappingURL=signature.js.map\n","import { hexToBytes } from \"@noble/hashes/utils\";\nfunction findFirstNonZeroIndex(bytes) {\n  for (let i = 0; i < bytes.length; i++) {\n    if (bytes[i] !== 0) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction toPaddedBigEndianBytes(num, width) {\n  const hex = num.toString(16);\n  return hexToBytes(hex.padStart(width * 2, \"0\").slice(-width * 2));\n}\nfunction toBigEndianBytes(num, width) {\n  const bytes = toPaddedBigEndianBytes(num, width);\n  const firstNonZeroIndex = findFirstNonZeroIndex(bytes);\n  if (firstNonZeroIndex === -1) {\n    return new Uint8Array([0]);\n  }\n  return bytes.slice(firstNonZeroIndex);\n}\nexport {\n  toBigEndianBytes,\n  toPaddedBigEndianBytes\n};\n//# sourceMappingURL=utils.js.map\n","var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _data;\nimport { fromB64, toB64 } from \"../../bcs/index.js\";\nimport { PublicKey } from \"../../cryptography/publickey.js\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../../cryptography/signature-scheme.js\";\nimport { extractClaimValue } from \"./jwt-utils.js\";\nimport { parseZkLoginSignature } from \"./signature.js\";\nimport { toPaddedBigEndianBytes } from \"./utils.js\";\nclass ZkLoginPublicIdentifier extends PublicKey {\n  /**\n   * Create a new ZkLoginPublicIdentifier object\n   * @param value zkLogin public identifier as buffer or base-64 encoded string\n   */\n  constructor(value) {\n    super();\n    __privateAdd(this, _data, void 0);\n    if (typeof value === \"string\") {\n      __privateSet(this, _data, fromB64(value));\n    } else if (value instanceof Uint8Array) {\n      __privateSet(this, _data, value);\n    } else {\n      __privateSet(this, _data, Uint8Array.from(value));\n    }\n  }\n  /**\n   * Checks if two zkLogin public identifiers are equal\n   */\n  equals(publicKey) {\n    return super.equals(publicKey);\n  }\n  /**\n   * Return the byte array representation of the zkLogin public identifier\n   */\n  toRawBytes() {\n    return __privateGet(this, _data);\n  }\n  /**\n   * Return the Benfen address associated with this ZkLogin public identifier\n   */\n  flag() {\n    return SIGNATURE_SCHEME_TO_FLAG[\"ZkLogin\"];\n  }\n  /**\n   * Verifies that the signature is valid for for the provided message\n   */\n  async verify(_message, _signature) {\n    throw Error(\"does not support\");\n  }\n  /**\n   * Verifies that the signature is valid for for the provided PersonalMessage\n   */\n  verifyPersonalMessage(message, signature) {\n    return Promise.resolve(true);\n  }\n  /**\n   * Verifies that the signature is valid for for the provided TransactionBlock\n   */\n  verifyTransactionBlock(transactionBlock, signature) {\n    return Promise.resolve(true);\n  }\n}\n_data = new WeakMap();\nfunction toZkLoginPublicIdentifier(addressSeed, iss) {\n  const addressSeedBytesBigEndian = toPaddedBigEndianBytes(addressSeed, 32);\n  const issBytes = new TextEncoder().encode(iss);\n  const tmp = new Uint8Array(1 + issBytes.length + addressSeedBytesBigEndian.length);\n  tmp.set([issBytes.length], 0);\n  tmp.set(issBytes, 1);\n  tmp.set(addressSeedBytesBigEndian, 1 + issBytes.length);\n  return new ZkLoginPublicIdentifier(tmp);\n}\nfunction parseSerializedZkLoginSignature(signature) {\n  const bytes = typeof signature === \"string\" ? fromB64(signature) : signature;\n  if (bytes[0] !== SIGNATURE_SCHEME_TO_FLAG.ZkLogin) {\n    throw new Error(\"Invalid signature scheme\");\n  }\n  const signatureBytes = bytes.slice(1);\n  const { inputs, maxEpoch, userSignature } = parseZkLoginSignature(signatureBytes);\n  const { issBase64Details, addressSeed } = inputs;\n  const iss = extractClaimValue(issBase64Details, \"iss\");\n  const publicIdentifer = toZkLoginPublicIdentifier(BigInt(addressSeed), iss);\n  const address = publicIdentifer.toHexAddress();\n  return {\n    serializedSignature: toB64(bytes),\n    signatureScheme: \"ZkLogin\",\n    zkLogin: {\n      inputs,\n      maxEpoch,\n      userSignature,\n      iss,\n      address,\n      addressSeed: BigInt(addressSeed)\n    },\n    signature: bytes,\n    publicKey: publicIdentifer.toRawBytes()\n  };\n}\nexport {\n  ZkLoginPublicIdentifier,\n  parseSerializedZkLoginSignature,\n  toZkLoginPublicIdentifier\n};\n//# sourceMappingURL=publickey.js.map\n","import { bcs } from \"../bcs/index.js\";\nimport { fromB64, toB64 } from \"../bcs/src/index.js\";\nimport { parseSerializedZkLoginSignature } from \"../zklogin/helper/publickey.js\";\nimport {\n  SIGNATURE_FLAG_TO_SCHEME,\n  SIGNATURE_SCHEME_TO_FLAG,\n  SIGNATURE_SCHEME_TO_SIZE\n} from \"./signature-scheme.js\";\nfunction toSerializedSignature({\n  signature,\n  signatureScheme,\n  publicKey\n}) {\n  if (!publicKey) {\n    throw new Error(\"`publicKey` is required\");\n  }\n  const pubKeyBytes = publicKey.toRawBytes();\n  const serializedSignature = new Uint8Array(1 + signature.length + pubKeyBytes.length);\n  serializedSignature.set([SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);\n  serializedSignature.set(signature, 1);\n  serializedSignature.set(pubKeyBytes, 1 + signature.length);\n  return toB64(serializedSignature);\n}\nfunction parseSerializedSignature(serializedSignature) {\n  const bytes = fromB64(serializedSignature);\n  const signatureScheme = SIGNATURE_FLAG_TO_SCHEME[bytes[0]];\n  switch (signatureScheme) {\n    case \"MultiSig\":\n      const multisig = bcs.MultiSig.parse(bytes.slice(1));\n      return {\n        serializedSignature,\n        signatureScheme,\n        multisig,\n        bytes\n      };\n    case \"ZkLogin\":\n      return parseSerializedZkLoginSignature(serializedSignature);\n    case \"ED25519\":\n    case \"Secp256k1\":\n    case \"Secp256r1\":\n      const size = SIGNATURE_SCHEME_TO_SIZE[signatureScheme];\n      const signature = bytes.slice(1, bytes.length - size);\n      const publicKey = bytes.slice(1 + signature.length);\n      return {\n        serializedSignature,\n        signatureScheme,\n        signature,\n        publicKey,\n        bytes\n      };\n    default:\n      throw new Error(\"Unsupported signature scheme\");\n  }\n}\nexport {\n  parseSerializedSignature,\n  toSerializedSignature\n};\n//# sourceMappingURL=signature.js.map\n","import nacl from \"tweetnacl\";\nimport { fromB64 } from \"../../bcs/src/index.js\";\nimport { bytesEqual, PublicKey } from \"../../cryptography/publickey.js\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../../cryptography/signature-scheme.js\";\nimport { parseSerializedSignature } from \"../../cryptography/signature.js\";\nconst PUBLIC_KEY_SIZE = 32;\nclass Ed25519PublicKey extends PublicKey {\n  /**\n   * Create a new Ed25519PublicKey object\n   * @param value ed25519 public key as buffer or base-64 encoded string\n   */\n  constructor(value) {\n    super();\n    if (typeof value === \"string\") {\n      this.data = fromB64(value);\n    } else if (value instanceof Uint8Array) {\n      this.data = value;\n    } else {\n      this.data = Uint8Array.from(value);\n    }\n    if (this.data.length !== PUBLIC_KEY_SIZE) {\n      throw new Error(\n        `Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`\n      );\n    }\n  }\n  /**\n   * Checks if two Ed25519 public keys are equal\n   */\n  equals(publicKey) {\n    return super.equals(publicKey);\n  }\n  /**\n   * Return the byte array representation of the Ed25519 public key\n   */\n  toRawBytes() {\n    return this.data;\n  }\n  /**\n   * Return the benfen address associated with this Ed25519 public key\n   */\n  flag() {\n    return SIGNATURE_SCHEME_TO_FLAG[\"ED25519\"];\n  }\n  /**\n   * Verifies that the signature is valid for for the provided message\n   */\n  async verify(message, signature) {\n    let bytes;\n    if (typeof signature === \"string\") {\n      const parsed = parseSerializedSignature(signature);\n      if (parsed.signatureScheme !== \"ED25519\") {\n        throw new Error(\"Invalid signature scheme\");\n      }\n      if (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n        throw new Error(\"Signature does not match public key\");\n      }\n      bytes = parsed.signature;\n    } else {\n      bytes = signature;\n    }\n    return nacl.sign.detached.verify(message, bytes, this.toRawBytes());\n  }\n}\nEd25519PublicKey.SIZE = PUBLIC_KEY_SIZE;\nexport {\n  Ed25519PublicKey\n};\n//# sourceMappingURL=publickey.js.map\n","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a) => a instanceof Uint8Array;\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (u8a(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexport function equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length)\n        return false;\n    for (let i = 0; i < b1.length; i++)\n        if (b1[i] !== b2[i])\n            return false;\n    return true;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!(data instanceof Uint8Array))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (key instanceof Uint8Array)\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = item instanceof Uint8Array;\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp,\n    n: secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true,\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","import { secp256k1 } from \"@noble/curves/secp256k1\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { fromB64 } from \"../../bcs/src/index.js\";\nimport { bytesEqual, PublicKey } from \"../../cryptography/publickey.js\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../../cryptography/signature-scheme.js\";\nimport { parseSerializedSignature } from \"../../cryptography/signature.js\";\nconst SECP256K1_PUBLIC_KEY_SIZE = 33;\nclass Secp256k1PublicKey extends PublicKey {\n  /**\n   * Create a new Secp256k1PublicKey object\n   * @param value secp256k1 public key as buffer or base-64 encoded string\n   */\n  constructor(value) {\n    super();\n    if (typeof value === \"string\") {\n      this.data = fromB64(value);\n    } else if (value instanceof Uint8Array) {\n      this.data = value;\n    } else {\n      this.data = Uint8Array.from(value);\n    }\n    if (this.data.length !== SECP256K1_PUBLIC_KEY_SIZE) {\n      throw new Error(\n        `Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`\n      );\n    }\n  }\n  /**\n   * Checks if two Secp256k1 public keys are equal\n   */\n  equals(publicKey) {\n    return super.equals(publicKey);\n  }\n  /**\n   * Return the byte array representation of the Secp256k1 public key\n   */\n  toRawBytes() {\n    return this.data;\n  }\n  /**\n   * Return the Benfen address associated with this Secp256k1 public key\n   */\n  flag() {\n    return SIGNATURE_SCHEME_TO_FLAG[\"Secp256k1\"];\n  }\n  /**\n   * Verifies that the signature is valid for for the provided message\n   */\n  async verify(message, signature) {\n    let bytes;\n    if (typeof signature === \"string\") {\n      const parsed = parseSerializedSignature(signature);\n      if (parsed.signatureScheme !== \"Secp256k1\") {\n        throw new Error(\"Invalid signature scheme\");\n      }\n      if (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n        throw new Error(\"Signature does not match public key\");\n      }\n      bytes = parsed.signature;\n    } else {\n      bytes = signature;\n    }\n    return secp256k1.verify(\n      secp256k1.Signature.fromCompact(bytes),\n      sha256(message),\n      this.toRawBytes()\n    );\n  }\n}\nSecp256k1PublicKey.SIZE = SECP256K1_PUBLIC_KEY_SIZE;\nexport {\n  Secp256k1PublicKey\n};\n//# sourceMappingURL=publickey.js.map\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { createCurve } from './_shortw_utils.js';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Field } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { createHasher } from './abstract/hash-to-curve.js';\n// NIST secp256r1 aka p256\n// https://www.secg.org/sec2-v2.pdf, https://neuromancer.sk/std/nist/P-256\nconst Fp = Field(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst CURVE_A = Fp.create(BigInt('-3'));\nconst CURVE_B = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n// prettier-ignore\nexport const p256 = createCurve({\n    a: CURVE_A,\n    b: CURVE_B,\n    Fp,\n    // Curve order, total count of valid points in the field\n    n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n    // Base (generator) point (x, y)\n    Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n    Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n    h: BigInt(1),\n    lowS: false,\n}, sha256);\nexport const secp256r1 = p256;\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: CURVE_A,\n    B: CURVE_B,\n    Z: Fp.create(BigInt('-10')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256r1.ProjectivePoint, (scalars) => mapSWU(scalars[0]), {\n    DST: 'P256_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=p256.js.map","import { secp256r1 } from \"@noble/curves/p256\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { bytesEqual, PublicKey } from \"../../cryptography/publickey.js\";\nimport { SIGNATURE_SCHEME_TO_FLAG } from \"../../cryptography/signature-scheme.js\";\nimport { parseSerializedSignature } from \"../../cryptography/signature.js\";\nimport { fromB64 } from \"../../utils/index.js\";\nconst SECP256R1_PUBLIC_KEY_SIZE = 33;\nclass Secp256r1PublicKey extends PublicKey {\n  /**\n   * Create a new Secp256r1PublicKey object\n   * @param value secp256r1 public key as buffer or base-64 encoded string\n   */\n  constructor(value) {\n    super();\n    if (typeof value === \"string\") {\n      this.data = fromB64(value);\n    } else if (value instanceof Uint8Array) {\n      this.data = value;\n    } else {\n      this.data = Uint8Array.from(value);\n    }\n    if (this.data.length !== SECP256R1_PUBLIC_KEY_SIZE) {\n      throw new Error(\n        `Invalid public key input. Expected ${SECP256R1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`\n      );\n    }\n  }\n  /**\n   * Checks if two Secp256r1 public keys are equal\n   */\n  equals(publicKey) {\n    return super.equals(publicKey);\n  }\n  /**\n   * Return the byte array representation of the Secp256r1 public key\n   */\n  toRawBytes() {\n    return this.data;\n  }\n  /**\n   * Return the Benfen address associated with this Secp256r1 public key\n   */\n  flag() {\n    return SIGNATURE_SCHEME_TO_FLAG[\"Secp256r1\"];\n  }\n  /**\n   * Verifies that the signature is valid for for the provided message\n   */\n  async verify(message, signature) {\n    let bytes;\n    if (typeof signature === \"string\") {\n      const parsed = parseSerializedSignature(signature);\n      if (parsed.signatureScheme !== \"Secp256r1\") {\n        throw new Error(\"Invalid signature scheme\");\n      }\n      if (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n        throw new Error(\"Signature does not match public key\");\n      }\n      bytes = parsed.signature;\n    } else {\n      bytes = signature;\n    }\n    return secp256r1.verify(\n      secp256r1.Signature.fromCompact(bytes),\n      sha256(message),\n      this.toRawBytes()\n    );\n  }\n}\nSecp256r1PublicKey.SIZE = SECP256R1_PUBLIC_KEY_SIZE;\nexport {\n  Secp256r1PublicKey\n};\n//# sourceMappingURL=publickey.js.map\n","import { blake2b } from \"@noble/hashes/blake2b\";\nimport { bytesToHex } from \"@noble/hashes/utils\";\nimport { bcs } from \"../bcs/index.js\";\nimport { fromB64, toB64 } from \"../bcs/src/index.js\";\nimport { bytesEqual, PublicKey } from \"../cryptography/publickey.js\";\nimport {\n  SIGNATURE_FLAG_TO_SCHEME,\n  SIGNATURE_SCHEME_TO_FLAG\n} from \"../cryptography/signature-scheme.js\";\nimport { parseSerializedSignature } from \"../cryptography/signature.js\";\nimport { normalizeHexAddress } from \"../utils/bf-types.js\";\nimport { publicKeyFromRawBytes } from \"../verify/index.js\";\nimport { toZkLoginPublicIdentifier } from \"../zklogin/helper/publickey.js\";\nconst MAX_SIGNER_IN_MULTISIG = 10;\nconst MIN_SIGNER_IN_MULTISIG = 1;\nclass MultiSigPublicKey extends PublicKey {\n  /**\n   * Create a new MultiSigPublicKey object\n   */\n  constructor(value) {\n    super();\n    if (typeof value === \"string\") {\n      this.rawBytes = fromB64(value);\n      this.multisigPublicKey = bcs.MultiSigPublicKey.parse(this.rawBytes);\n    } else if (value instanceof Uint8Array) {\n      this.rawBytes = value;\n      this.multisigPublicKey = bcs.MultiSigPublicKey.parse(this.rawBytes);\n    } else {\n      this.multisigPublicKey = value;\n      this.rawBytes = bcs.MultiSigPublicKey.serialize(value).toBytes();\n    }\n    if (this.multisigPublicKey.threshold < 1) {\n      throw new Error(\"Invalid threshold\");\n    }\n    const seenPublicKeys = /* @__PURE__ */ new Set();\n    this.publicKeys = this.multisigPublicKey.pk_map.map(({ pubKey, weight }) => {\n      const [scheme, bytes] = Object.entries(pubKey)[0];\n      const publicKeyStr = Uint8Array.from(bytes).toString();\n      if (seenPublicKeys.has(publicKeyStr)) {\n        throw new Error(`Multisig does not support duplicate public keys`);\n      }\n      seenPublicKeys.add(publicKeyStr);\n      if (weight < 1) {\n        throw new Error(`Invalid weight`);\n      }\n      return {\n        publicKey: publicKeyFromRawBytes(scheme, Uint8Array.from(bytes)),\n        weight\n      };\n    });\n    const totalWeight = this.publicKeys.reduce((sum, { weight }) => sum + weight, 0);\n    if (this.multisigPublicKey.threshold > totalWeight) {\n      throw new Error(`Unreachable threshold`);\n    }\n    if (this.publicKeys.length > MAX_SIGNER_IN_MULTISIG) {\n      throw new Error(`Max number of signers in a multisig is ${MAX_SIGNER_IN_MULTISIG}`);\n    }\n    if (this.publicKeys.length < MIN_SIGNER_IN_MULTISIG) {\n      throw new Error(`Min number of signers in a multisig is ${MIN_SIGNER_IN_MULTISIG}`);\n    }\n  }\n  /**\n   * \tA static method to create a new MultiSig publickey instance from a set of public keys and their associated weights pairs and threshold.\n   */\n  static fromPublicKeys({\n    threshold,\n    publicKeys\n  }) {\n    return new MultiSigPublicKey({\n      pk_map: publicKeys.map(({ publicKey, weight }) => {\n        const scheme = SIGNATURE_FLAG_TO_SCHEME[publicKey.flag()];\n        return {\n          pubKey: { [scheme]: Array.from(publicKey.toRawBytes()) },\n          weight\n        };\n      }),\n      threshold\n    });\n  }\n  /**\n   * Checks if two MultiSig public keys are equal\n   */\n  equals(publicKey) {\n    return super.equals(publicKey);\n  }\n  /**\n   * Return the byte array representation of the MultiSig public key\n   */\n  toRawBytes() {\n    return this.rawBytes;\n  }\n  getPublicKeys() {\n    return this.publicKeys;\n  }\n  /**\n   * Return the Benfen address associated with this MultiSig public key\n   */\n  toHexAddress() {\n    const maxLength = 1 + (64 + 1) * MAX_SIGNER_IN_MULTISIG + 2;\n    const tmp = new Uint8Array(maxLength);\n    tmp.set([SIGNATURE_SCHEME_TO_FLAG[\"MultiSig\"]]);\n    tmp.set(bcs.u16().serialize(this.multisigPublicKey.threshold).toBytes(), 1);\n    let i = 3;\n    for (const { publicKey, weight } of this.publicKeys) {\n      const bytes = publicKey.toBenfenBytes();\n      tmp.set(bytes, i);\n      i += bytes.length;\n      tmp.set([weight], i++);\n    }\n    return normalizeHexAddress(bytesToHex(blake2b(tmp.slice(0, i), { dkLen: 32 })));\n  }\n  /**\n   * Return the Benfen address associated with this MultiSig public key\n   */\n  flag() {\n    return SIGNATURE_SCHEME_TO_FLAG[\"MultiSig\"];\n  }\n  /**\n   * Verifies that the signature is valid for for the provided message\n   */\n  async verify(message, multisigSignature) {\n    const parsed = parseSerializedSignature(multisigSignature);\n    if (parsed.signatureScheme !== \"MultiSig\") {\n      throw new Error(\"Invalid signature scheme\");\n    }\n    const { multisig } = parsed;\n    let signatureWeight = 0;\n    if (!bytesEqual(\n      bcs.MultiSigPublicKey.serialize(this.multisigPublicKey).toBytes(),\n      bcs.MultiSigPublicKey.serialize(multisig.multisig_pk).toBytes()\n    )) {\n      return false;\n    }\n    for (const { publicKey, weight, signature } of parsePartialSignatures(multisig)) {\n      if (!await publicKey.verify(message, signature)) {\n        return false;\n      }\n      signatureWeight += weight;\n    }\n    return signatureWeight >= this.multisigPublicKey.threshold;\n  }\n  /**\n   * Combines multiple partial signatures into a single multisig, ensuring that each public key signs only once\n   * and that all the public keys involved are known and valid, and then serializes multisig into the standard format\n   */\n  combinePartialSignatures(signatures) {\n    if (signatures.length > MAX_SIGNER_IN_MULTISIG) {\n      throw new Error(`Max number of signatures in a multisig is ${MAX_SIGNER_IN_MULTISIG}`);\n    }\n    let bitmap = 0;\n    const compressedSignatures = new Array(signatures.length);\n    for (let i = 0; i < signatures.length; i++) {\n      let parsed = parseSerializedSignature(signatures[i]);\n      if (parsed.signatureScheme === \"MultiSig\") {\n        throw new Error(\"MultiSig is not supported inside MultiSig\");\n      }\n      let publicKey;\n      if (parsed.signatureScheme === \"ZkLogin\") {\n        publicKey = toZkLoginPublicIdentifier(\n          parsed.zkLogin?.addressSeed,\n          parsed.zkLogin?.iss\n        ).toRawBytes();\n      } else {\n        publicKey = parsed.publicKey;\n      }\n      compressedSignatures[i] = {\n        [parsed.signatureScheme]: Array.from(parsed.signature.map((x) => Number(x)))\n      };\n      let publicKeyIndex;\n      for (let j = 0; j < this.publicKeys.length; j++) {\n        if (bytesEqual(publicKey, this.publicKeys[j].publicKey.toRawBytes())) {\n          if (bitmap & 1 << j) {\n            throw new Error(\"Received multiple signatures from the same public key\");\n          }\n          publicKeyIndex = j;\n          break;\n        }\n      }\n      if (publicKeyIndex === void 0) {\n        throw new Error(\"Received signature from unknown public key\");\n      }\n      bitmap |= 1 << publicKeyIndex;\n    }\n    let multisig = {\n      sigs: compressedSignatures,\n      bitmap,\n      multisig_pk: this.multisigPublicKey\n    };\n    const bytes = bcs.MultiSig.serialize(multisig, { maxSize: 8192 }).toBytes();\n    let tmp = new Uint8Array(bytes.length + 1);\n    tmp.set([SIGNATURE_SCHEME_TO_FLAG[\"MultiSig\"]]);\n    tmp.set(bytes, 1);\n    return toB64(tmp);\n  }\n}\nfunction parsePartialSignatures(multisig) {\n  let res = new Array(multisig.sigs.length);\n  for (let i = 0; i < multisig.sigs.length; i++) {\n    const [signatureScheme, signature] = Object.entries(multisig.sigs[i])[0];\n    const pkIndex = asIndices(multisig.bitmap).at(i);\n    const pair = multisig.multisig_pk.pk_map[pkIndex];\n    const pkBytes = Uint8Array.from(Object.values(pair.pubKey)[0]);\n    if (signatureScheme === \"MultiSig\") {\n      throw new Error(\"MultiSig is not supported inside MultiSig\");\n    }\n    const publicKey = publicKeyFromRawBytes(signatureScheme, pkBytes);\n    res[i] = {\n      signatureScheme,\n      signature: Uint8Array.from(signature),\n      publicKey,\n      weight: pair.weight\n    };\n  }\n  return res;\n}\nfunction asIndices(bitmap) {\n  if (bitmap < 0 || bitmap > 1024) {\n    throw new Error(\"Invalid bitmap\");\n  }\n  let res = [];\n  for (let i = 0; i < 10; i++) {\n    if ((bitmap & 1 << i) !== 0) {\n      res.push(i);\n    }\n  }\n  return Uint8Array.from(res);\n}\nexport {\n  MAX_SIGNER_IN_MULTISIG,\n  MIN_SIGNER_IN_MULTISIG,\n  MultiSigPublicKey,\n  parsePartialSignatures\n};\n//# sourceMappingURL=publickey.js.map\n","import { parseSerializedSignature } from \"../cryptography/index.js\";\nimport { Ed25519PublicKey } from \"../keypairs/ed25519/publickey.js\";\nimport { Secp256k1PublicKey } from \"../keypairs/secp256k1/publickey.js\";\nimport { Secp256r1PublicKey } from \"../keypairs/secp256r1/publickey.js\";\nimport { MultiSigPublicKey } from \"../multisig/publickey.js\";\nimport { ZkLoginPublicIdentifier } from \"../zklogin/helper/publickey.js\";\nasync function verifySignature(bytes, signature) {\n  const parsedSignature = parseSignature(signature);\n  if (!await parsedSignature.publicKey.verify(bytes, parsedSignature.serializedSignature)) {\n    throw new Error(`Signature is not valid for the provided data`);\n  }\n  return parsedSignature.publicKey;\n}\nasync function verifyPersonalMessage(message, signature) {\n  const parsedSignature = parseSignature(signature);\n  if (!await parsedSignature.publicKey.verifyPersonalMessage(\n    message,\n    parsedSignature.serializedSignature\n  )) {\n    throw new Error(`Signature is not valid for the provided message`);\n  }\n  return parsedSignature.publicKey;\n}\nasync function verifyTransactionBlock(transactionBlock, signature) {\n  const parsedSignature = parseSignature(signature);\n  if (!await parsedSignature.publicKey.verifyTransactionBlock(\n    transactionBlock,\n    parsedSignature.serializedSignature\n  )) {\n    throw new Error(`Signature is not valid for the provided TransactionBlock`);\n  }\n  return parsedSignature.publicKey;\n}\nfunction parseSignature(signature) {\n  const parsedSignature = parseSerializedSignature(signature);\n  if (parsedSignature.signatureScheme === \"MultiSig\") {\n    return {\n      ...parsedSignature,\n      publicKey: new MultiSigPublicKey(parsedSignature.multisig.multisig_pk)\n    };\n  }\n  const publicKey = publicKeyFromRawBytes(\n    parsedSignature.signatureScheme,\n    parsedSignature.publicKey\n  );\n  return {\n    ...parsedSignature,\n    publicKey\n  };\n}\nfunction publicKeyFromRawBytes(signatureScheme, bytes) {\n  switch (signatureScheme) {\n    case \"ED25519\":\n      return new Ed25519PublicKey(bytes);\n    case \"Secp256k1\":\n      return new Secp256k1PublicKey(bytes);\n    case \"Secp256r1\":\n      return new Secp256r1PublicKey(bytes);\n    case \"MultiSig\":\n      return new MultiSigPublicKey(bytes);\n    case \"ZkLogin\":\n      return new ZkLoginPublicIdentifier(bytes);\n    default:\n      throw new Error(`Unsupported signature scheme ${signatureScheme}`);\n  }\n}\nexport {\n  publicKeyFromRawBytes,\n  verifyPersonalMessage,\n  verifySignature,\n  verifyTransactionBlock\n};\n//# sourceMappingURL=index.js.map\n","/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","/**\n * Internal helpers for blake hash.\n * @module\n */\nimport { aexists, anumber, aoutput } from './_assert.js';\nimport { byteSwap32, byteSwapIfBE, Hash, isLE, toBytes, u32 } from './utils.js';\n/**\n * Internal blake variable.\n * For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].\n */\n// prettier-ignore\nexport const SIGMA = /* @__PURE__ */ new Uint8Array([\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n    12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n    13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n    6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n    10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n    // Blake1, unused in others\n    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n]);\n/** Class, from which others are subclassed. */\nexport class BLAKE extends Hash {\n    constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.length = 0;\n        this.pos = 0;\n        this.finished = false;\n        this.destroyed = false;\n        anumber(blockLen);\n        anumber(outputLen);\n        anumber(keyLen);\n        if (outputLen < 0 || outputLen > keyLen)\n            throw new Error('outputLen bigger than keyLen');\n        if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen))\n            throw new Error('key length must be undefined or 1..' + keyLen);\n        if (opts.salt !== undefined && opts.salt.length !== saltLen)\n            throw new Error('salt must be undefined or ' + saltLen);\n        if (opts.personalization !== undefined && opts.personalization.length !== persLen)\n            throw new Error('personalization must be undefined or ' + persLen);\n        this.buffer = new Uint8Array(blockLen);\n        this.buffer32 = u32(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        // Main difference with other hashes: there is flag for last block,\n        // so we cannot process current block before we know that there\n        // is the next one. This significantly complicates logic and reduces ability\n        // to do zero-copy processing\n        const { blockLen, buffer, buffer32 } = this;\n        data = toBytes(data);\n        const len = data.length;\n        const offset = data.byteOffset;\n        const buf = data.buffer;\n        for (let pos = 0; pos < len;) {\n            // If buffer is full and we still have input (don't process last block, same as blake2s)\n            if (this.pos === blockLen) {\n                if (!isLE)\n                    byteSwap32(buffer32);\n                this.compress(buffer32, 0, false);\n                if (!isLE)\n                    byteSwap32(buffer32);\n                this.pos = 0;\n            }\n            const take = Math.min(blockLen - this.pos, len - pos);\n            const dataOffset = offset + pos;\n            // full block && aligned to 4 bytes && not last in input\n            if (take === blockLen && !(dataOffset % 4) && pos + take < len) {\n                const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));\n                if (!isLE)\n                    byteSwap32(data32);\n                for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {\n                    this.length += blockLen;\n                    this.compress(data32, pos32, false);\n                }\n                if (!isLE)\n                    byteSwap32(data32);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            this.length += take;\n            pos += take;\n        }\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        const { pos, buffer32 } = this;\n        this.finished = true;\n        // Padding\n        this.buffer.subarray(pos).fill(0);\n        if (!isLE)\n            byteSwap32(buffer32);\n        this.compress(buffer32, 0, true);\n        if (!isLE)\n            byteSwap32(buffer32);\n        const out32 = u32(out);\n        this.get().forEach((v, i) => (out32[i] = byteSwapIfBE(v)));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        const { buffer, length, finished, destroyed, outputLen, pos } = this;\n        to || (to = new this.constructor({ dkLen: outputLen }));\n        to.set(...this.get());\n        to.length = length;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.outputLen = outputLen;\n        to.buffer.set(buffer);\n        to.pos = pos;\n        return to;\n    }\n}\n//# sourceMappingURL=_blake.js.map","/**\n * Blake2b hash function. Focuses on 64-bit platforms, but in JS speed different from Blake2s is negligible.\n * @module\n */\nimport { BLAKE, SIGMA } from './_blake.js';\nimport u64 from './_u64.js';\nimport { byteSwapIfBE, toBytes, u32, wrapConstructorWithOpts } from './utils.js';\n// Same as SHA-512 but LE\n// prettier-ignore\nconst B2B_IV = /* @__PURE__ */ new Uint32Array([\n    0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,\n    0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19\n]);\n// Temporary buffer\nconst BBUF = /* @__PURE__ */ new Uint32Array(32);\n// Mixing function G splitted in two halfs\nfunction G1b(a, b, c, d, msg, x) {\n    // NOTE: V is LE here\n    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\n    let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\n    let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\n    let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\n    let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\n    // v[a] = (v[a] + v[b] + x) | 0;\n    let ll = u64.add3L(Al, Bl, Xl);\n    Ah = u64.add3H(ll, Ah, Bh, Xh);\n    Al = ll | 0;\n    // v[d] = rotr(v[d] ^ v[a], 32)\n    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\n    ({ Dh, Dl } = { Dh: u64.rotr32H(Dh, Dl), Dl: u64.rotr32L(Dh, Dl) });\n    // v[c] = (v[c] + v[d]) | 0;\n    ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));\n    // v[b] = rotr(v[b] ^ v[c], 24)\n    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\n    ({ Bh, Bl } = { Bh: u64.rotrSH(Bh, Bl, 24), Bl: u64.rotrSL(Bh, Bl, 24) });\n    (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\n    (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\n    (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\n    (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\n}\nfunction G2b(a, b, c, d, msg, x) {\n    // NOTE: V is LE here\n    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\n    let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\n    let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\n    let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\n    let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\n    // v[a] = (v[a] + v[b] + x) | 0;\n    let ll = u64.add3L(Al, Bl, Xl);\n    Ah = u64.add3H(ll, Ah, Bh, Xh);\n    Al = ll | 0;\n    // v[d] = rotr(v[d] ^ v[a], 16)\n    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\n    ({ Dh, Dl } = { Dh: u64.rotrSH(Dh, Dl, 16), Dl: u64.rotrSL(Dh, Dl, 16) });\n    // v[c] = (v[c] + v[d]) | 0;\n    ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));\n    // v[b] = rotr(v[b] ^ v[c], 63)\n    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\n    ({ Bh, Bl } = { Bh: u64.rotrBH(Bh, Bl, 63), Bl: u64.rotrBL(Bh, Bl, 63) });\n    (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\n    (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\n    (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\n    (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\n}\nexport class BLAKE2b extends BLAKE {\n    constructor(opts = {}) {\n        super(128, opts.dkLen === undefined ? 64 : opts.dkLen, opts, 64, 16, 16);\n        // Same as SHA-512, but LE\n        this.v0l = B2B_IV[0] | 0;\n        this.v0h = B2B_IV[1] | 0;\n        this.v1l = B2B_IV[2] | 0;\n        this.v1h = B2B_IV[3] | 0;\n        this.v2l = B2B_IV[4] | 0;\n        this.v2h = B2B_IV[5] | 0;\n        this.v3l = B2B_IV[6] | 0;\n        this.v3h = B2B_IV[7] | 0;\n        this.v4l = B2B_IV[8] | 0;\n        this.v4h = B2B_IV[9] | 0;\n        this.v5l = B2B_IV[10] | 0;\n        this.v5h = B2B_IV[11] | 0;\n        this.v6l = B2B_IV[12] | 0;\n        this.v6h = B2B_IV[13] | 0;\n        this.v7l = B2B_IV[14] | 0;\n        this.v7h = B2B_IV[15] | 0;\n        const keyLength = opts.key ? opts.key.length : 0;\n        this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\n        if (opts.salt) {\n            const salt = u32(toBytes(opts.salt));\n            this.v4l ^= byteSwapIfBE(salt[0]);\n            this.v4h ^= byteSwapIfBE(salt[1]);\n            this.v5l ^= byteSwapIfBE(salt[2]);\n            this.v5h ^= byteSwapIfBE(salt[3]);\n        }\n        if (opts.personalization) {\n            const pers = u32(toBytes(opts.personalization));\n            this.v6l ^= byteSwapIfBE(pers[0]);\n            this.v6h ^= byteSwapIfBE(pers[1]);\n            this.v7l ^= byteSwapIfBE(pers[2]);\n            this.v7h ^= byteSwapIfBE(pers[3]);\n        }\n        if (opts.key) {\n            // Pad to blockLen and update\n            const tmp = new Uint8Array(this.blockLen);\n            tmp.set(toBytes(opts.key));\n            this.update(tmp);\n        }\n    }\n    // prettier-ignore\n    get() {\n        let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;\n        return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];\n    }\n    // prettier-ignore\n    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {\n        this.v0l = v0l | 0;\n        this.v0h = v0h | 0;\n        this.v1l = v1l | 0;\n        this.v1h = v1h | 0;\n        this.v2l = v2l | 0;\n        this.v2h = v2h | 0;\n        this.v3l = v3l | 0;\n        this.v3h = v3h | 0;\n        this.v4l = v4l | 0;\n        this.v4h = v4h | 0;\n        this.v5l = v5l | 0;\n        this.v5h = v5h | 0;\n        this.v6l = v6l | 0;\n        this.v6h = v6h | 0;\n        this.v7l = v7l | 0;\n        this.v7h = v7h | 0;\n    }\n    compress(msg, offset, isLast) {\n        this.get().forEach((v, i) => (BBUF[i] = v)); // First half from state.\n        BBUF.set(B2B_IV, 16); // Second half from IV.\n        let { h, l } = u64.fromBig(BigInt(this.length));\n        BBUF[24] = B2B_IV[8] ^ l; // Low word of the offset.\n        BBUF[25] = B2B_IV[9] ^ h; // High word.\n        // Invert all bits for last block\n        if (isLast) {\n            BBUF[28] = ~BBUF[28];\n            BBUF[29] = ~BBUF[29];\n        }\n        let j = 0;\n        const s = SIGMA;\n        for (let i = 0; i < 12; i++) {\n            G1b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n            G2b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n            G1b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n            G2b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n            G1b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n            G2b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n            G1b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n            G2b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n            G1b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n            G2b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n            G1b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n            G2b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n            G1b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n            G2b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n            G1b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n            G2b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n        }\n        this.v0l ^= BBUF[0] ^ BBUF[16];\n        this.v0h ^= BBUF[1] ^ BBUF[17];\n        this.v1l ^= BBUF[2] ^ BBUF[18];\n        this.v1h ^= BBUF[3] ^ BBUF[19];\n        this.v2l ^= BBUF[4] ^ BBUF[20];\n        this.v2h ^= BBUF[5] ^ BBUF[21];\n        this.v3l ^= BBUF[6] ^ BBUF[22];\n        this.v3h ^= BBUF[7] ^ BBUF[23];\n        this.v4l ^= BBUF[8] ^ BBUF[24];\n        this.v4h ^= BBUF[9] ^ BBUF[25];\n        this.v5l ^= BBUF[10] ^ BBUF[26];\n        this.v5h ^= BBUF[11] ^ BBUF[27];\n        this.v6l ^= BBUF[12] ^ BBUF[28];\n        this.v6h ^= BBUF[13] ^ BBUF[29];\n        this.v7l ^= BBUF[14] ^ BBUF[30];\n        this.v7h ^= BBUF[15] ^ BBUF[31];\n        BBUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer32.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\n/**\n * Blake2b hash function. Focuses on 64-bit platforms, but in JS speed different from Blake2s is negligible.\n * @param msg - message that would be hashed\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\n */\nexport const blake2b = /* @__PURE__ */ wrapConstructorWithOpts((opts) => new BLAKE2b(opts));\n//# sourceMappingURL=blake2b.js.map"],"names":["basex","__webpack_require__","module","exports","ALPHABET","length","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","it4","vch","encode","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","pbegin","pend","b58","it1","it2","str","repeat","decode","string","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","sha256","k","undefined","call","__esModule","digestLength","blockSize","K","Uint32Array","hashBlocks","w","v","p","pos","len","a","b","c","d","e","f","g","h","u","t1","t2","Hash","state","Int32Array","temp","bufferLength","bytesHashed","finished","reset","prototype","clean","update","data","dataLength","dataPos","finish","out","left","bitLenHi","bitLenLo","padLength","digest","_saveState","_restoreState","HMAC","key","inner","outer","pad","istate","ostate","hash","hmac","hkdfSalt","hkdf","salt","info","counter","okm","hmac_","bufpos","fillBuffer","num","fill","pbkdf2","password","iterations","dkLen","prf","ctr","t","dk","_BCS","constructor","schema","types","Map","registerAddressType","ADDRESS","addressLength","addressEncoding","registerVectorType","vectorType","structs","name","Object","keys","registerStructType","enums","registerEnumType","aliases","registerAlias","withPrimitives","bcs","registerType","BCS","U8","writer","write8","reader","read8","u8","U16","write16","read16","u16","U32","write32","read32","u32","U64","write64","read64","U128","write128","read128","U256","write256","read256","BOOL","toString","STRING","writeVec","writer2","el","readVec","reader2","map","String","fromCharCode","Number","join","HEX","src_hex","H","bytes","BASE58","n","BASE64","b64","F","z","tempKey","ser","type","options","params","parseTypeName","getTypeInterface","JSON","stringify","de","encoding","utils","NX","hasType","has","forType","set","typeName","encodeCb","decodeCb","validateCb","generics","self","typeParams","typeMap","reduce","acc","value","index","assign","_encodeRaw","B","_decodeRaw","r","registerBcsType","createType","bcs_type","mn","param","write","data2","typeInterface","read","_data","_writer","readBytes","hex","padStart","TextEncoder","slice","elementType","name2","params2","innerName","innerParams","fields","internalName","struct","freeze","canonicalOrder","structName","fieldType","fieldParams","includes","paramIdx","indexOf","result","fieldName","variants","canonicalTypeParams","orderByte","invariantType","paramIndex","typeOrParam","readULEB","invariant","get","chain","push","typeName2","right","genericSeparators","l_bound","r_bound","reverse","fR","VECTOR","sN","readMethod","writeMethod","maxValue","u64","bZ","u128","u256","bool","ZY","validate","uleb128","pq","serialize","uleb","ws","toBytes","fromBytes","TextDecoder","fixedArray","item","option","enum","None","Some","transform","input","output","vector","writeULEB","tuple","serializedSize","total","values","entries","field","val","optionName","optionType","hasOwn","keyType","valueType","generic","_names","cb","lazy","um","bcsRegistry","unsafe_u64","enumKind","kind","Address","bf_types","fK","wo","ObjectDigest","BenfenObjectRef","objectId","version","SharedObjectRef","initialSharedVersion","mutable","ObjectArg","ImmOrOwned","Shared","Receiving","CallArg","Pure","ObjVec","TypeTag","address","signer","StructTag","Argument","GasCoin","Input","Result","NestedResult","resultIndex","ProgrammableMoveCall","package","function","type_arguments","arguments","pkg","fun","target","split","typeArguments","type_tag_serializer","X","parseFromStr","tag","tagToString","Transaction","MoveCall","TransferObjects","objects","SplitCoins","coin","amounts","MergeCoins","destination","sources","Publish","modules","dependencies","MakeMoveVec","Upgrade","packageId","ticket","ProgrammableTransaction","inputs","transactions","TransactionKind","ChangeEpoch","Genesis","ConsensusCommitPrologue","TransactionExpiration","Epoch","GasData","payment","owner","price","budget","TransactionDataV1","sender","gasData","expiration","TransactionData","V1","IntentScope","TransactionEffects","CheckpointSummary","PersonalMessage","IntentVersion","V0","AppId","Benfen","Intent","scope","appId","IntentMessage","intent","T","CompressedSignature","ED25519","Secp256k1","Secp256r1","ZkLogin","PublicKey","MultiSigPkMap","pubKey","weight","MultiSigPublicKey","pk_map","threshold","MultiSig","sigs","bitmap","multisig_pk","base64String","SenderSignedTransaction","intentMessage","txSignatures","SenderSignedData","benfenBcs","ULEB128","Bool","bind","forEach","toB58","bs58__WEBPACK_IMPORTED_MODULE_0__","fromB58","fromB64","atob","char","toB64","btoa","chunk","_write","_serialize","_schema","_bytes","__accessCheck","obj","member","msg","TypeError","__privateGet","getter","__privateAdd","WeakSet","add","__privateSet","setter","_BcsType","options2","_writer_js__WEBPACK_IMPORTED_MODULE_0__","SerializedBcs","parse","_reader_js__WEBPACK_IMPORTED_MODULE_1__","BcsType","WeakMap","SERIALIZED_BCS_BRAND","Symbol","for","isSerializedBcs","toHex","_hex_js__WEBPACK_IMPORTED_MODULE_2__","toBase64","_b64_js__WEBPACK_IMPORTED_MODULE_3__","toBase58","_b58_js__WEBPACK_IMPORTED_MODULE_4__","fixedSizeBcsType","uIntBcsType","bigUIntBcsType","BigInt","dynamicSizeBcsType","byte","stringLikeBcsType","_uleb_js__WEBPACK_IMPORTED_MODULE_5__","lazyBcsType","lazyType","getType","fromHEX","hexStr","normalized","test","replace","padded","intArr","match","parseInt","toHEX","BcsReader","bytePosition","dataView","DataView","shift","getUint8","getUint16","getUint32","value1","value2","start","_uleb_js__WEBPACK_IMPORTED_MODULE_0__","y","ulebEncode","arr","ulebDecode","encodeStr","_b58_js__WEBPACK_IMPORTED_MODULE_0__","_b64_js__WEBPACK_IMPORTED_MODULE_1__","decodeStr","splitGenericParameters","tok","word","nestedAngleBrackets","trim","BcsWriter","maxSize","allocateSize","ensureSizeOrGrow","requiredSize","nextSize","min","nextBuffer","setUint8","setUint16","setUint32","toLittleEndian","iterator","_utils_js__WEBPACK_IMPORTED_MODULE_1__","zS","bigint","VECTOR_REGEX","STRUCT_REGEX","TypeTagSerializer","normalizeAddress","vectorMatch","structMatch","_utils_bf_types_js__WEBPACK_IMPORTED_MODULE_0__","parseStructTypeArgs","_src_index_js__WEBPACK_IMPORTED_MODULE_1__","getFullnodeUrl","network","_requestId","_disconnects","_webSocket","_connectionPromise","_subscriptions","_pendingRequests","_setupWebSocket","setupWebSocket_fn","_reconnect","reconnect_fn","http_transport_requestId","_options","_websocketClient","_getWebsocketClient","getWebsocketClient_fn","BENFEN_NS_NAME_REGEX","BENFEN_NS_DOMAIN_REGEX","CODE_TO_ERROR_TYPE","BenfenHTTPTransportError","Error","JsonRpcError","message","code","BenfenHTTPStatusError","status","statusText","__privateWrapper","_","__privateMethod","method","DEFAULT_CLIENT_OPTIONS","WebSocketConstructor","WebSocket","callTimeout","reconnectTimeout","maxReconnects","WebsocketClient","endpoint","Set","startsWith","getWebsocketUrl","httpUrl","url","URL","protocol","makeRequest","webSocket","Promise","resolve","reject","timeout","setTimeout","delete","send","jsonrpc","id","then","error","subscribe","subscription","RpcSubscription","unsubscribe","close","addEventListener","json","console","cause","resolve2","clearTimeout","subscriptionId","onMessage","allSettled","subscribed","client","newSubscriptionId","http_transport_accessCheck","http_transport_privateGet","http_transport_privateAdd","http_transport_privateSet","http_transport_privateMethod","BenfenHTTPTransport","fetch","init","globalThis","request","res","rpc","headers","body","ok","websocket","BENFEN_CLIENT_BRAND","BenfenClient","transport","getRpcApiVersion","resp","getCoins","OM","coinType","cursor","limit","getAllCoins","getBalance","getAllBalances","getCoinMetadata","getTotalSupply","getMoveFunctionArgTypes","getNormalizedMoveModulesByPackage","getNormalizedMoveModule","getNormalizedMoveFunction","getNormalizedMoveStruct","getOwnedObjects","filter","getObject","z3","format","RD","tryGetPastObject","multiGetObjects","ids","hasDuplicates","queryTransactionBlocks","order","getTransactionBlock","iI","multiGetTransactionBlocks","digests","executeTransactionBlock","transactionBlock","signature","requestType","signAndExecuteTransactionBlock","transactionBytes","setSenderIfNotSet","toHexAddress","build","signTransactionBlock","getTotalTransactionBlocks","getReferenceGasPrice","getStableRate","getStakes","getStakesByIds","stakedBfcIds","getLatestBenfeSystemState","getNetworkOverview","getInnerDao","getDaoProposalWithVoter","voter","queryEvents","query","subscribeEvent","subscribeTransaction","devInspectTransactionBlock","devInspectTxBytes","TransactionBlock","nv","onlyTransactionKind","gasPrice","epoch","dryRunTransactionBlock","getDynamicFields","parentId","getDynamicFieldObject","getLatestCheckpointSequenceNumber","getCheckpoint","getCheckpoints","descendingOrder","getCommitteeInfo","getNetworkMetrics","getAddressMetrics","getEpochMetrics","getAllEpochAddressMetrics","getEpochs","getMoveCallMetrics","getCurrentEpoch","getValidatorsApy","getChainIdentifier","checkpoint","resolveNameServiceAddress","resolveNameServiceNames","nextCursor","hasNextPage","normalizeBenfenNSName","parts","lowerCase","toLowerCase","labels","domain","getProtocolConfig","waitForTransactionBlock","signal","pollInterval","timeoutSignal","AbortSignal","timeoutPromise","reason","catch","aborted","throwIfAborted","race","BenfenClientContext","react","createContext","DEFAULT_NETWORKS","localnet","I","DEFAULT_CREATE_CLIENT","_name","config","BenfenClientProvider","props","onNetworkChange","children","networks","createClient2","createClient","selectedNetwork","setSelectedNetwork","useState","defaultNetwork","currentNetwork","useMemo","ctx","selectNetwork","newNetwork","jsx_runtime","jsx","Provider","createInMemoryStore","store","getItem","setItem","removeItem","DEFAULT_STORAGE","window","localStorage","DEFAULT_REQUIRED_FEATURES","DEFAULT_PREFERRED_WALLETS","REQUIRED_FEATURES","getRegisteredWallets","preferredWallets","requiredFeatures","walletsApi","esm_wallets","M","wallets","benfenWallets","isWalletWithRequiredFeatureSet","wallet","additionalFeatures","every","feature","features","find","Boolean","getWalletUniqueIdentifier","WalletProvider","storage","storageKey","autoConnect","storeRef","useRef","createWalletStore","autoConnectEnabled","vanilla","middleware","tJ","accounts","currentWallet","currentAccount","lastConnectedAccountAddress","lastConnectedWalletName","connectionStatus","setConnectionStatus","setWalletConnected","connectedAccounts","selectedAccount","setWalletDisconnected","setAccountSwitched","setWalletRegistered","updatedWallets","setWalletUnregistered","unregisteredWallet","updateWalletAccounts","FL","partialize","walletContext","current","WalletConnectionManager","useWalletsChanged","useWalletStore","useEffect","checkInterval","setInterval","registered","newWallets","unsubscribeFromRegister","on","unsubscribeFromUnregister","clearInterval","useWalletPropertiesChanged","useCurrentWallet","unsubscribeFromEvents","useAutoConnectWallet","mutateAsync","connectWallet","useConnectWallet","O","useWallets","isConnected","clientOnly","setClientOnly","useLayoutEffect","isError","useQuery","queryKey","walletCount","queryFn","wallet2","accountAddress","silent","enabled","persister","gcTime","staleTime","networkMode","retry","retryOnMount","refetchInterval","refetchIntervalInBackground","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","walletMutationKeys","all","baseScope","formMutationKeyFn","autoconnectWallet","disconnectWallet","signPersonalMessage","switchAccount","switchChain","baseEntity","additionalKeys","WalletContext","react__WEBPACK_IMPORTED_MODULE_0__","WalletNotConnectedError","WalletNoAccountSelectedError","WalletFeatureNotSupportedError","createNetworkConfig","networkConfig","useNetworkConfig","_useBenfenClient_js__WEBPACK_IMPORTED_MODULE_0__","useNetworkVariables","variables","useNetworkVariable","useBenfenClientContext","benfenClient","useContext","_components_BenfenClientProvider_js__WEBPACK_IMPORTED_MODULE_1__","useBenfenClient","mutationKey","mutationOptions","_useWalletStore_js__WEBPACK_IMPORTED_MODULE_0__","_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__","D","_constants_walletMutationKeys_js__WEBPACK_IMPORTED_MODULE_2__","G","mutationFn","connectArgs","connectResult","connect","connectedBenfenAccounts","account","chains","some","getSelectedAccount","useCurrentAccount","isDisconnected","isConnecting","useDisconnectWallet","_useCurrentWallet_js__WEBPACK_IMPORTED_MODULE_0__","_useWalletStore_js__WEBPACK_IMPORTED_MODULE_1__","_tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__","_constants_walletMutationKeys_js__WEBPACK_IMPORTED_MODULE_3__","_errors_walletErrors_js__WEBPACK_IMPORTED_MODULE_4__","oS","disconnect","useSignAndExecuteTransactionBlock","executeFromWallet","_useCurrentAccount_js__WEBPACK_IMPORTED_MODULE_1__","_useBenfenClient_js__WEBPACK_IMPORTED_MODULE_2__","U","_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__","_constants_walletMutationKeys_js__WEBPACK_IMPORTED_MODULE_4__","signTransactionBlockArgs","_errors_walletErrors_js__WEBPACK_IMPORTED_MODULE_5__","signerAccount","K0","walletFeature2","rl","walletFeature","transactionBlockBytes","useSignPersonalMessage","signPersonalMessageArgs","signPersonalMessageFeature","signMessageFeature","warn","messageBytes","signMessage","useSignTransactionBlock","selector","_contexts_walletContext_js__WEBPACK_IMPORTED_MODULE_1__","zustand__WEBPACK_IMPORTED_MODULE_2__","oR","StructError","failure","failures","cached","explanation","rest","path","isObject","print","toFailures","context","toFailure","branch","refinement","run","coerce","mask","coercer","validator","s","ts","refiner","Struct","assert","dist_assert","create","is","dist_is","tuples","shiftIterator","done","next","dist_define","any","array","Element","integer","isNaN","isInteger","literal","constant","description","object","knowns","Never","unknowns","optional","union","Structs","S","coerced","first","Key","Value","UpgradePolicy2","_blockData","_input","input_fn","_normalizeTransactionArgument","normalizeTransactionArgument_fn","_getConfig","getConfig_fn","_validate","validate_fn","_prepareGasPayment","prepareGasPayment_fn","_prepareGasPrice","prepareGasPrice_fn","_prepareTransactions","prepareTransactions_fn","_prepare","prepare_fn","PureCallArg","ObjectCallArg","BuilderCallArg","Inputs","pF","$5","Infinity","ObjectRef","ReceivingRef","getIdFromCallArg","arg","extractMutableReference","normalizedType","MutableReference","extractReference","Reference","extractStructTag","ref","mutRef","RESOLVED_BENFEN_ID","Rx","RESOLVED_ASCII_STR","ht","RESOLVED_UTF8_STR","RESOLVED_STD_OPTION","isSameStruct","expectType","argVal","allowedTypes","TransactionBlockInput","TransactionArgumentTypes","TransactionArgument","MoveCallTransaction","TransferObjectsTransaction","SplitCoinsTransaction","MergeCoinsTransaction","MakeMoveVecTransaction","PublishTransaction","UpgradePolicy","UpgradeTransaction","TransactionTypes","TransactionType","Transactions","tc","dep","StringEncodedBigint","GasConfig","SerializedTransactionDataBuilder","gasConfig","prepareHexAddress","Og","TransactionBlockDataBuilder","clone","fromKindBytes","programmableTx","serialized","restore","rawData","transactionData","getDigestFromBytes","hashTypedData","typeTag","typeTagBytes","dataWithTag","blake2b","R","maxSizeBytes","overrides","getDigest","snapshot","DefaultOfflineLimits","maxPureArgumentSize","maxTxGas","maxGasObjects","maxTxSizeBytes","expectClient","TRANSACTION_BRAND","LIMITS","GAS_SAFE_OVERHEAD","DEFAULT_GAS_PRICE","ceil","isTransactionBlock","_TransactionBlock","transaction","blockData","fromKind","tx","setSender","setExpiration","setGasPrice","setGasBudget","setGasOwner","setGasPayment","payments","pure","defineProperty","enumerable","createPure","makePure","gas","inserted","objectRef","args","receivingRef","sharedObjectRef","createTransactionResult","nestedResults","nestedResultFor","Proxy","property","Reflect","splitCoins","amount","mergeCoins","src","publish","upgrade","moveCall","transferObjects","makeMoveVec","sign","buildOptions","protocolConfig","limits","attribute","attributes","f64","gasOwner","bfcCoins","p$","paymentCoins","matchingInput","coinObjectId","moveModulesToResolve","objectsToResolve","needsResolution","moduleName","functionName","lastIndex","parameters","hasTxContext","isTxContext","inputValue","serType","getPureSerializationType","Vector","innerType","optionToVec","structVal","dedupedIds","objectChunks","chunk2","showOwner","flat","objectsById","invalidObjects","initial_shared_version","isByValue","isMutableSharedObjectInput","getSharedObjectInput","isReceivingType","dryRunResult","effects","safeOverhead","baseComputationCostWithOverhead","gasUsed","computationCost","gasBudget","storageCost","normalizeStructTag","parseStructTag","formattedTypeParams","typeParam","isValidTransactionDigest","_bcs_src_index_js__WEBPACK_IMPORTED_MODULE_1__","BENFEN_ADDRESS_LENGTH","isValidBenfenAddress","getHexByteLength","isValidBenfenObjectId","_bcs_src_index_js__WEBPACK_IMPORTED_MODULE_2__","lastIndexOf","normalizeHexAddress","forceAdd0x","_format_js__WEBPACK_IMPORTED_MODULE_3__","normalizeBenfenObjectId","hex2BfcAddress","hexAddress","fast_sha256__WEBPACK_IMPORTED_MODULE_0__","bfc2HexAddress","bfcAddress","BFC_DECIMALS","MIST_PER_BFC","MOVE_STDLIB_ADDRESS","BENFEN_FRAMEWORK_ADDRESS","BENFEN_CLOCK_OBJECT_ID","_bf_types_js__WEBPACK_IMPORTED_MODULE_0__","BFC_TYPE_ARG","_format_js__WEBPACK_IMPORTED_MODULE_1__","AppId2","IntentVersion2","IntentScope2","bytesEqual","equals","publicKey","toRawBytes","toBenfenPublicKey","toBenfenBytes","verifyWithIntent","messageWithIntent","verify","verifyPersonalMessage","verifyTransactionBlock","rawBytes","benfenBytes","flag","ci","signature_scheme_SIGNATURE_SCHEME_TO_FLAG","SIGNATURE_SCHEME_TO_SIZE","SIGNATURE_FLAG_TO_SCHEME","bcs_zkLoginSignature","proofPoints","issBase64Details","indexMod4","headerBase64","addressSeed","maxEpoch","userSignature","ZkLoginPublicIdentifier","_message","_signature","toZkLoginPublicIdentifier","iss","addressSeedBytesBigEndian","toPaddedBigEndianBytes","width","nr","issBytes","tmp","parseSerializedSignature","serializedSignature","signatureScheme","multisig","parseSerializedZkLoginSignature","signatureBytes","extractClaimValue","claim","claimName","extendedClaim","decodeBase64URL","bits","base64UrlStringToBitVector","base64UrlString","bitVector","base64UrlChar","base64UrlCharTo6Bits","base64UrlCharacterSet","binaryString","concat","firstCharOffset","lastCharOffset","floor","currentByteIndex","i2","bitChunk","verifyExtendedClaim","publicIdentifer","zkLogin","Ed25519PublicKey","parsed","nacl_fast","detached","number","isSafeInteger","lengths","exists","instance","checkFinished","destroyed","SIZE","crypto_crypto","crypto","u8a","createView","rotr","isLE","utf8ToBytes","_cloneInto","utils_randomBytes","bytesLength","getRandomValues","SHA2","blockLen","outputLen","padOffset","view","take","process","subarray","roundClean","digestInto","setBigUint64","_32n","_u32_max","wh","wl","l","oview","outLen","destroy","to","Chi","Maj","SHA256_K","IV","SHA256_W","SHA256","A","C","E","offset","W15","W2","s0","s1","sigma1","T1","sigma0","T2","sha256_sha256","utils_wrapConstructor","hashCons","hashC","_1n","_2n","utils_u8a","utils_hexes","utils_bytesToHex","hexToNumber","utils_hexToBytes","hexByte","utils_bytesToNumberBE","utils_bytesToNumberLE","utils_numberToBytesBE","numberToBytesLE","utils_ensureBytes","title","expectedLength","abstract_utils_concatBytes","arrays","sum","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","reseed","seed","gen","sl","pred","validatorFns","boolean","stringOrUint8Array","Fp","isValid","validateObject","validators","optValidators","checkField","isOptional","checkVal","modular_0n","modular_1n","modular_2n","_3n","_4n","_5n","_8n","modular_mod","pow2","power","modulo","invert","q","m","gcd","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","Field","ORDER","bitLen","redef","BITS","BYTES","sqrtP","FpSqrt","P","p1div4","pow","eql","sqr","c1","n2","mul","sub","ONE","tonelliShanks","Q","Z","legendreC","Q1div2","neg","ZERO","ge","MASK","is0","isOdd","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","FpInvertBatch","nums","lastMultiplied","inverted","reduceRight","lst","cmov","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","_key","_assert_hash","iHash","oHash","buf","getPrototypeOf","curve_0n","curve_1n","validateBasic","curve","validateField","opts","Gx","Gy","bytesToNumberBE","b2n","hexToBytes","h2b","abstract_utils_namespaceObject","DER","Err","_parseInt","toSig","sBytes","rBytesLeft","hexFromSig","sig","shl","rhl","weierstrass_0n","weierstrass_1n","weierstrass_3n","createCurve","curveDef","defHash","weierstrass","CURVE","validateOpts","randomBytes","bits2int","bits2int_modN","lowS","CURVE_ORDER","compressedLen","uncompressedLen","modN","ProjectivePoint","Point","normPrivateKeyToScalar","weierstrassEquation","isWithinCurveOrder","weierstrassPoints","validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","endo","beta","splitScalar","_c","point","_isCompressed","toAffine","tail","x2","x3","assertGE","pointPrecomputes","assertPrjPoint","other","px","py","pz","fromAffine","normalizeZ","points","toInv","fromHex","assertValidity","fromPrivateKey","privateKey","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","hasEvenY","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","iz","ax","ay","zz","cofactor","isCompressed","_bits","condition","windows","W","elm","precomputeWindow","base","precomputes","maxNumber","shiftBy","wbits","offset2","abs","cond1","cond2","precomputesMap","cat","head","y2","isYOdd","numToNByteStr","isBiggerThanHalfOrder","HALF","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isProbPub","delta","ORDER_MASK","int2octets","defaultSigOpts","prehash","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","privKey","k2sig","prepSig","extraEntropy","ent","h1int","seedArgs","kBytes","ik","normS","drbg","_sig","sg","derError","isValidPrivateKey","randomPrivateKey","mapHashToField","fieldLen","minLen","reduced","precompute","msgs","utils_concatBytes","secp256k1P","secp256k1N","secp256k1_1n","secp256k1_2n","divNearest","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","a1","b1","a2","POW_2_128","c2","Secp256k1PublicKey","esm_sha256","JQ","p256_Fp","CURVE_A","CURVE_B","p256","Secp256r1PublicKey","secp256r1","multisigPublicKey","seenPublicKeys","publicKeys","scheme","publicKeyStr","publicKeyFromRawBytes","totalWeight","fromPublicKeys","getPublicKeys","multisigSignature","signatureWeight","parsePartialSignatures","pkIndex","asIndices","at","pair","pkBytes","combinePartialSignatures","signatures","compressedSignatures","publicKeyIndex","parsedSignature","parseSignature","U32_MASK64","fromBig","le","Ah","Al","rotlSH","rotlSL","rotlBH","rotlBL","__webpack_exports__","ZP","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SIGMA","BLAKE","kb","keyLen","saltLen","persLen","_assert","k8","personalization","buffer32","Jq","$h","O0","iA","l1","compress","dataOffset","data32","pos32","eB","out32","UM","B2B_IV","BBUF","G1b","Xl","Xh","ll","_u64","G2b","BLAKE2b","v0l","v0h","v1l","v1h","v2l","v2h","v3l","v3h","v4l","v4h","v5l","v5h","v6l","v6h","v7l","v7h","keyLength","pers","isLast","K$"],"sourceRoot":""}