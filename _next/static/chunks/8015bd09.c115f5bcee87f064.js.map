{"version":3,"file":"static/chunks/8015bd09.c115f5bcee87f064.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@solana/web3.js/lib/index.browser.esm.js","webpack://_N_E/<anon>"],"sourcesContent":["import { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport createRpc from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\nvar _PublicKey;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [Symbol.toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_PublicKey = PublicKey;\nPublicKey.default = new _PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray, ...args) {\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures = true) {\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {\n        preflightCommitment: deployCommitment\n      });\n      const {\n        context,\n        value\n      } = await connection.confirmTransaction({\n        signature: finalizeSignature,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n        blockhash: transaction.recentBlockhash\n      }, deployCommitment);\n      if (value.err) {\n        throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n      }\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nvar fastStableStringify = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n\nvar fastStableStringify$1 = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringify);\n\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n\nvar fetchImpl = globalThis.fetch;\n\nclass RpcWebSocketClient extends RpcWebSocketCommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\n\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: nullable(ConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"0.0.0-development\" }`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n        const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n        const requestHash = fastStableStringify$1(args);\n        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n        return await requestPromises[requestHash];\n      };\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(config) {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(blockhash, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(({\n                transaction,\n                meta,\n                version\n              }) => ({\n                meta,\n                transaction: {\n                  ...transaction,\n                  message: versionedMessageFromResponse(version, transaction.message)\n                },\n                version\n              }))\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n    : options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64');\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, filters ? {\n      filters: filters\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\nvar _Lockup;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_Lockup = Lockup;\nLockup.default = new _Lockup(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\n\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };\n//# sourceMappingURL=index.browser.esm.js.map\n"],"names":["TransactionStatus","x","_noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_9__","UN","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","buffer__WEBPACK_IMPORTED_MODULE_0__","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","borsh__WEBPACK_IMPORTED_MODULE_3__","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Map","uniquePublicKeyCounter","PublicKey","value","_bn","undefined","decoded","bs58__WEBPACK_IMPORTED_MODULE_2___default","length","bn_js__WEBPACK_IMPORTED_MODULE_1___default","unique","key","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","Symbol","toStringTag","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_10__","JQ","createProgramAddressSync","seeds","forEach","createProgramAddress","findProgramAddressSync","address","nonce","seedsWithNonce","err","TypeError","findProgramAddress","pubkeyData","pubkey","default","kind","fields","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","Error","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","map","instruction","programIdIndex","accountKeyIndexes","keys","meta","property","_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__","Ik","rustString","rsl","n_","Jq","cv","_decode","bind","_encode","rslShim","offset","str","chars","span","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","assert","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","args","start","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","numUnsignedAccounts","numWritableUnsignedAccounts","unsignedAccountIndex","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","Array","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","u8","A9","signDataLayout","transaction","signData","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","numWritableLookupAccountKeys","reduce","lookupAccountKeysIndex","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","item","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","sort","y","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","signatureErrors","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","join","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","status","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","type","allocLength","layout","getAlloc","getItemAlloc","field","isArray","elementLayout","layoutFields","FeeCalculatorLayout","_O","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","u64","bigIntLayout","src","bigint_buffer__WEBPACK_IMPORTED_MODULE_5__","oU","bigInt","k$","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","gM","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","createAccount","params","lamports","space","fromPubkey","newAccountPubkey","transfer","BigInt","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","nonceInitialize","authorized","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","allocate","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","all","deployCommitment","finalizeSignature","context","currentSlot","getSlot","slot","round","MS_PER_SLOT","PACKET_DATA_SIZE","objToString","objKeys","obj","name","fastStableStringify$1","val","returnVal","isArrayProp","max","propVal","toStr","isFinite","__esModule","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","code","customMessage","fetchImpl","globalThis","fetch","RpcWebSocketClient","rpc_websockets_dist_lib_client__WEBPACK_IMPORTED_MODULE_7__","Z","generate_request_id","url","rpc","rpc_websockets_dist_lib_client_websocket_browser__WEBPACK_IMPORTED_MODULE_8__","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","reject","notify","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","decodeData","typeIndex","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","superstruct__WEBPACK_IMPORTED_MODULE_11__","oQ","eE","Z_","RawAccountDataResult","bc","i0","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","G0","dt","jsonrpc","id","_4","jt","Yj","UnknownRpcResult","jsonRpcResult","schema","Ue","jsonRpcResultAndContext","Rx","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","IX","AG","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","O7","GetLeaderScheduleResult","IM","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","_commitmentOrConfig","client","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","unsafeRes","res","confirmTransactionInitialTimeout","assertEndpointUrl","putativeUrl","test","makeWebsocketUrl","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","createRpcClient","customFetch","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","jayson_lib_client_browser__WEBPACK_IMPORTED_MODULE_6___default","request","callback","method","body","headers","too_many_requests_retries","waitTime","statusText","text","ok","requests","batch","methodName","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","close","log","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ED25519_INSTRUCTION_LAYOUT","KB","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","ecdsaSign","msgHash","privKey","_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_12__","kA","toCompactRawBytes","recovery","isValidPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_13__","fr","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","maybeLockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","split","rentExemptReserve","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","UpdateValidatorIdentity","voteAuthorizeWithSeedArgs","Voter","VoteProgram","initializeAccount","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","website","details","keybaseUsername","http","devnet","testnet","https","clusterApiUrl","cluster","tls"],"sourceRoot":""}